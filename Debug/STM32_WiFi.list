
STM32_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800916c  0800916c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800916c  0800916c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ff4  20000180  080092f4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003174  080092f4  00023174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd0f  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d6a  00000000  00000000  0002ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0002ec28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0002f940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bd7  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b132  00000000  00000000  0004a147  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099485  00000000  00000000  00055279  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee6fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000ee77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000180 	.word	0x20000180
 8000204:	00000000 	.word	0x00000000
 8000208:	08009090 	.word	0x08009090

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000184 	.word	0x20000184
 8000224:	08009090 	.word	0x08009090

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a24:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LCD_WR_REG+0x44>)
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	611a      	str	r2, [r3, #16]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a74:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LCD_WR_DATAX+0x44>)
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8e:	611a      	str	r2, [r3, #16]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000aac:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ab0:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000ab4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ab8:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <LCD_RD_DATA+0x84>)
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	f648 1289 	movw	r2, #35209	; 0x8989
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d102      	bne.n	8000ae8 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f005 fe00 	bl	80066e8 <HAL_Delay>
	t = DATAIN
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afa:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000afe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b02:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000b06:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b0a:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
	return t;
 8000b14:	88fb      	ldrh	r3, [r7, #6]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	200001b4 	.word	0x200001b4

08000b2c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff68 	bl	8000a14 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <LCD_WriteReg+0x50>)
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	60d3      	str	r3, [r2, #12]
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	611a      	str	r2, [r3, #16]
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff41 	bl	8000a14 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000b92:	f7ff ff87 	bl	8000aa4 <LCD_RD_DATA>
 8000b96:	4603      	mov	r3, r0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <LCD_WriteRAM_Prepare+0x14>)
 8000ba6:	891b      	ldrh	r3, [r3, #8]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <LCD_WR_REG>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001b4 	.word	0x200001b4

08000bb8 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000bc8:	4b73      	ldr	r3, [pc, #460]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000bca:	889b      	ldrh	r3, [r3, #4]
 8000bcc:	f249 3241 	movw	r2, #37697	; 0x9341
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d005      	beq.n	8000be0 <LCD_SetCursor+0x28>
 8000bd4:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d164      	bne.n	8000caa <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000be0:	4b6d      	ldr	r3, [pc, #436]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000be2:	895b      	ldrh	r3, [r3, #10]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff15 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b67      	ldr	r3, [pc, #412]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	4b65      	ldr	r3, [pc, #404]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	4b64      	ldr	r3, [pc, #400]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c18:	4b60      	ldr	r3, [pc, #384]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	60d3      	str	r3, [r2, #12]
 8000c30:	4b5a      	ldr	r3, [pc, #360]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c44:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000c46:	899b      	ldrh	r3, [r3, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fee3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	60d3      	str	r3, [r2, #12]
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000ca8:	e248      	b.n	800113c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cac:	889b      	ldrh	r3, [r3, #4]
 8000cae:	f646 0204 	movw	r2, #26628	; 0x6804
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d176      	bne.n	8000da4 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cb8:	799b      	ldrb	r3, [r3, #6]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cce:	895b      	ldrh	r3, [r3, #10]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe9f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	60d3      	str	r3, [r2, #12]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000d32:	899b      	ldrh	r3, [r3, #12]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe6d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	60d3      	str	r3, [r2, #12]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d92:	611a      	str	r2, [r3, #16]
}
 8000d94:	e1d2      	b.n	800113c <LCD_SetCursor+0x584>
 8000d96:	bf00      	nop
 8000d98:	200001b4 	.word	0x200001b4
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000da4:	4b99      	ldr	r3, [pc, #612]	; (800100c <LCD_SetCursor+0x454>)
 8000da6:	889b      	ldrh	r3, [r3, #4]
 8000da8:	f641 1263 	movw	r2, #6499	; 0x1963
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 8133 	bne.w	8001018 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000db2:	4b96      	ldr	r3, [pc, #600]	; (800100c <LCD_SetCursor+0x454>)
 8000db4:	799b      	ldrb	r3, [r3, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d163      	bne.n	8000e82 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000dba:	4b94      	ldr	r3, [pc, #592]	; (800100c <LCD_SetCursor+0x454>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000dc8:	4b90      	ldr	r3, [pc, #576]	; (800100c <LCD_SetCursor+0x454>)
 8000dca:	895b      	ldrh	r3, [r3, #10]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe21 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000dd2:	4b8f      	ldr	r3, [pc, #572]	; (8001010 <LCD_SetCursor+0x458>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <LCD_SetCursor+0x458>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	4b8c      	ldr	r3, [pc, #560]	; (8001014 <LCD_SetCursor+0x45c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	4b89      	ldr	r3, [pc, #548]	; (8001010 <LCD_SetCursor+0x458>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	615a      	str	r2, [r3, #20]
 8000dee:	4b88      	ldr	r3, [pc, #544]	; (8001010 <LCD_SetCursor+0x458>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	4b86      	ldr	r3, [pc, #536]	; (8001010 <LCD_SetCursor+0x458>)
 8000df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000dfc:	4b84      	ldr	r3, [pc, #528]	; (8001010 <LCD_SetCursor+0x458>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	4b82      	ldr	r3, [pc, #520]	; (8001010 <LCD_SetCursor+0x458>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b81      	ldr	r3, [pc, #516]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <LCD_SetCursor+0x458>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b7d      	ldr	r3, [pc, #500]	; (8001010 <LCD_SetCursor+0x458>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <LCD_SetCursor+0x458>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <LCD_SetCursor+0x458>)
 8000e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	4b73      	ldr	r3, [pc, #460]	; (8001010 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	4b72      	ldr	r3, [pc, #456]	; (8001010 <LCD_SetCursor+0x458>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	4b70      	ldr	r3, [pc, #448]	; (8001010 <LCD_SetCursor+0x458>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <LCD_SetCursor+0x458>)
 8000e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	4b6c      	ldr	r3, [pc, #432]	; (8001010 <LCD_SetCursor+0x458>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4a6b      	ldr	r2, [pc, #428]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	60d3      	str	r3, [r2, #12]
 8000e6c:	4b68      	ldr	r3, [pc, #416]	; (8001010 <LCD_SetCursor+0x458>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <LCD_SetCursor+0x458>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	4b65      	ldr	r3, [pc, #404]	; (8001010 <LCD_SetCursor+0x458>)
 8000e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	e061      	b.n	8000f46 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000e82:	4b62      	ldr	r3, [pc, #392]	; (800100c <LCD_SetCursor+0x454>)
 8000e84:	895b      	ldrh	r3, [r3, #10]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdc4 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000e8c:	4b60      	ldr	r3, [pc, #384]	; (8001010 <LCD_SetCursor+0x458>)
 8000e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <LCD_SetCursor+0x458>)
 8000e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <LCD_SetCursor+0x458>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <LCD_SetCursor+0x458>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <LCD_SetCursor+0x458>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000eba:	4b55      	ldr	r3, [pc, #340]	; (8001010 <LCD_SetCursor+0x458>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	4b53      	ldr	r3, [pc, #332]	; (8001010 <LCD_SetCursor+0x458>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4a51      	ldr	r2, [pc, #324]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	60d3      	str	r3, [r2, #12]
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <LCD_SetCursor+0x458>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <LCD_SetCursor+0x458>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000ee6:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <LCD_SetCursor+0x458>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b48      	ldr	r3, [pc, #288]	; (8001010 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <LCD_SetCursor+0x454>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	121a      	asrs	r2, r3, #8
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <LCD_SetCursor+0x458>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <LCD_SetCursor+0x458>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	4b40      	ldr	r3, [pc, #256]	; (8001010 <LCD_SetCursor+0x458>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <LCD_SetCursor+0x458>)
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <LCD_SetCursor+0x458>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <LCD_SetCursor+0x454>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a39      	ldr	r2, [pc, #228]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	60d3      	str	r3, [r2, #12]
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <LCD_SetCursor+0x458>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <LCD_SetCursor+0x458>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <LCD_SetCursor+0x458>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <LCD_SetCursor+0x454>)
 8000f48:	899b      	ldrh	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fd62 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <LCD_SetCursor+0x458>)
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <LCD_SetCursor+0x458>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <LCD_SetCursor+0x458>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <LCD_SetCursor+0x458>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <LCD_SetCursor+0x458>)
 8000f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <LCD_SetCursor+0x458>)
 8000f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <LCD_SetCursor+0x458>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	4a20      	ldr	r2, [pc, #128]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	60d3      	str	r3, [r2, #12]
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <LCD_SetCursor+0x458>)
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <LCD_SetCursor+0x458>)
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <LCD_SetCursor+0x458>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <LCD_SetCursor+0x458>)
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <LCD_SetCursor+0x454>)
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	121a      	asrs	r2, r3, #8
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <LCD_SetCursor+0x45c>)
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <LCD_SetCursor+0x458>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <LCD_SetCursor+0x458>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <LCD_SetCursor+0x458>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <LCD_SetCursor+0x458>)
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <LCD_SetCursor+0x458>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <LCD_SetCursor+0x454>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	60d3      	str	r3, [r2, #12]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LCD_SetCursor+0x458>)
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <LCD_SetCursor+0x458>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <LCD_SetCursor+0x458>)
 8001004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	e097      	b.n	800113c <LCD_SetCursor+0x584>
 800100c:	200001b4 	.word	0x200001b4
 8001010:	40011000 	.word	0x40011000
 8001014:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <LCD_SetCursor+0x58c>)
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001020:	4293      	cmp	r3, r2
 8001022:	d172      	bne.n	800110a <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <LCD_SetCursor+0x58c>)
 8001026:	895b      	ldrh	r3, [r3, #10]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcf3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <LCD_SetCursor+0x590>)
 8001030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <LCD_SetCursor+0x590>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b41      	ldr	r3, [pc, #260]	; (800114c <LCD_SetCursor+0x594>)
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <LCD_SetCursor+0x590>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <LCD_SetCursor+0x590>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <LCD_SetCursor+0x590>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <LCD_SetCursor+0x58c>)
 800105e:	895b      	ldrh	r3, [r3, #10]
 8001060:	3301      	adds	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fcd5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <LCD_SetCursor+0x590>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <LCD_SetCursor+0x590>)
 8001074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4a33      	ldr	r2, [pc, #204]	; (800114c <LCD_SetCursor+0x594>)
 800107e:	b2db      	uxtb	r3, r3
 8001080:	60d3      	str	r3, [r2, #12]
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <LCD_SetCursor+0x590>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <LCD_SetCursor+0x590>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <LCD_SetCursor+0x590>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <LCD_SetCursor+0x58c>)
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fcba 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <LCD_SetCursor+0x590>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <LCD_SetCursor+0x590>)
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <LCD_SetCursor+0x594>)
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <LCD_SetCursor+0x590>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <LCD_SetCursor+0x590>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <LCD_SetCursor+0x590>)
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <LCD_SetCursor+0x58c>)
 80010d0:	899b      	ldrh	r3, [r3, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc9c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <LCD_SetCursor+0x590>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <LCD_SetCursor+0x590>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <LCD_SetCursor+0x594>)
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	60d3      	str	r3, [r2, #12]
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <LCD_SetCursor+0x590>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <LCD_SetCursor+0x590>)
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <LCD_SetCursor+0x590>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	611a      	str	r2, [r3, #16]
}
 8001108:	e018      	b.n	800113c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <LCD_SetCursor+0x58c>)
 800110c:	799b      	ldrb	r3, [r3, #6]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LCD_SetCursor+0x58c>)
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LCD_SetCursor+0x58c>)
 8001122:	895b      	ldrh	r3, [r3, #10]
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LCD_SetCursor+0x58c>)
 8001130:	899b      	ldrh	r3, [r3, #12]
 8001132:	88ba      	ldrh	r2, [r7, #4]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fcf8 	bl	8000b2c <LCD_WriteReg>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001b4 	.word	0x200001b4
 8001148:	40011000 	.word	0x40011000
 800114c:	40010c00 	.word	0x40010c00

08001150 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001164:	799b      	ldrb	r3, [r3, #6]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <LCD_Scan_Dir+0x32>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001172:	4293      	cmp	r3, r2
 8001174:	d005      	beq.n	8001182 <LCD_Scan_Dir+0x32>
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	f641 1263 	movw	r2, #6499	; 0x1963
 800117e:	4293      	cmp	r3, r2
 8001180:	d109      	bne.n	8001196 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d134      	bne.n	80011f4 <LCD_Scan_Dir+0xa4>
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001192:	4293      	cmp	r3, r2
 8001194:	d12e      	bne.n	80011f4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d82b      	bhi.n	80011f4 <LCD_Scan_Dir+0xa4>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <LCD_Scan_Dir+0x54>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011cb 	.word	0x080011cb
 80011ac:	080011d1 	.word	0x080011d1
 80011b0:	080011d7 	.word	0x080011d7
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	080011e9 	.word	0x080011e9
 80011c0:	080011ef 	.word	0x080011ef
		{
		case 0:
			dir = 6;
 80011c4:	2306      	movs	r3, #6
 80011c6:	71fb      	strb	r3, [r7, #7]
			break;
 80011c8:	e014      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	71fb      	strb	r3, [r7, #7]
			break;
 80011ce:	e011      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	71fb      	strb	r3, [r7, #7]
			break;
 80011d4:	e00e      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	71fb      	strb	r3, [r7, #7]
			break;
 80011da:	e00b      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
			break;
 80011e0:	e008      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
			break;
 80011e6:	e005      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80011e8:	2303      	movs	r3, #3
 80011ea:	71fb      	strb	r3, [r7, #7]
			break;
 80011ec:	e002      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	71fb      	strb	r3, [r7, #7]
			break;
 80011f2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80011f6:	889b      	ldrh	r3, [r3, #4]
 80011f8:	f249 3241 	movw	r2, #37697	; 0x9341
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d018      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	f646 0204 	movw	r2, #26628	; 0x6804
 8001208:	4293      	cmp	r3, r2
 800120a:	d012      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	f245 3210 	movw	r2, #21264	; 0x5310
 8001214:	4293      	cmp	r3, r2
 8001216:	d00c      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001220:	4293      	cmp	r3, r2
 8001222:	d006      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	f641 1263 	movw	r2, #6499	; 0x1963
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 8250 	bne.w	80016d2 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d836      	bhi.n	80012a6 <LCD_Scan_Dir+0x156>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <LCD_Scan_Dir+0xf0>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	080012a7 	.word	0x080012a7
 8001244:	08001261 	.word	0x08001261
 8001248:	0800126b 	.word	0x0800126b
 800124c:	08001275 	.word	0x08001275
 8001250:	0800127f 	.word	0x0800127f
 8001254:	08001289 	.word	0x08001289
 8001258:	08001293 	.word	0x08001293
 800125c:	0800129d 	.word	0x0800129d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001266:	81fb      	strh	r3, [r7, #14]
			break;
 8001268:	e01d      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001270:	81fb      	strh	r3, [r7, #14]
			break;
 8001272:	e018      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800127a:	81fb      	strh	r3, [r7, #14]
			break;
 800127c:	e013      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	81fb      	strh	r3, [r7, #14]
			break;
 8001286:	e00e      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800128e:	81fb      	strh	r3, [r7, #14]
			break;
 8001290:	e009      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001298:	81fb      	strh	r3, [r7, #14]
			break;
 800129a:	e004      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012a2:	81fb      	strh	r3, [r7, #14]
			break;
 80012a4:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d103      	bne.n	80012ba <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80012b2:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80012b6:	81bb      	strh	r3, [r7, #12]
 80012b8:	e001      	b.n	80012be <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80012ba:	2336      	movs	r3, #54	; 0x36
 80012bc:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00f      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012cc:	889b      	ldrh	r3, [r3, #4]
 80012ce:	f245 5210 	movw	r2, #21776	; 0x5510
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d009      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012d8:	889b      	ldrh	r3, [r3, #4]
 80012da:	f641 1263 	movw	r2, #6499	; 0x1963
 80012de:	4293      	cmp	r3, r2
 80012e0:	d003      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	f646 0204 	movw	r2, #26628	; 0x6804
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d103      	bne.n	80012fe <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80012fe:	89fa      	ldrh	r2, [r7, #14]
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc11 	bl	8000b2c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001312:	4293      	cmp	r3, r2
 8001314:	d028      	beq.n	8001368 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001326:	885b      	ldrh	r3, [r3, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d21d      	bcs.n	8001368 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001334:	885a      	ldrh	r2, [r3, #2]
 8001336:	4b03      	ldr	r3, [pc, #12]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001338:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800133a:	4a02      	ldr	r2, [pc, #8]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800133c:	897b      	ldrh	r3, [r7, #10]
 800133e:	8053      	strh	r3, [r2, #2]
 8001340:	e012      	b.n	8001368 <LCD_Scan_Dir+0x218>
 8001342:	bf00      	nop
 8001344:	200001b4 	.word	0x200001b4
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	d909      	bls.n	8001368 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001354:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800135a:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800135c:	885a      	ldrh	r2, [r3, #2]
 800135e:	4b7a      	ldr	r3, [pc, #488]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001360:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001362:	4a79      	ldr	r2, [pc, #484]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001368:	4b77      	ldr	r3, [pc, #476]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001370:	4293      	cmp	r3, r2
 8001372:	f040 80ef 	bne.w	8001554 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001378:	895b      	ldrh	r3, [r3, #10]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb4a 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001380:	4b72      	ldr	r3, [pc, #456]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <LCD_Scan_Dir+0x400>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80013ac:	895b      	ldrh	r3, [r3, #10]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb2e 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013b8:	4b64      	ldr	r3, [pc, #400]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <LCD_Scan_Dir+0x400>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80013e2:	4b59      	ldr	r3, [pc, #356]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80013e4:	895b      	ldrh	r3, [r3, #10]
 80013e6:	3302      	adds	r3, #2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb12 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80013f0:	4b56      	ldr	r3, [pc, #344]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	4b51      	ldr	r3, [pc, #324]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	121a      	asrs	r2, r3, #8
 8001408:	4b51      	ldr	r3, [pc, #324]	; (8001550 <LCD_Scan_Dir+0x400>)
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001422:	895b      	ldrh	r3, [r3, #10]
 8001424:	3303      	adds	r3, #3
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff faf3 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3b01      	subs	r3, #1
 8001444:	4a42      	ldr	r2, [pc, #264]	; (8001550 <LCD_Scan_Dir+0x400>)
 8001446:	b2db      	uxtb	r3, r3
 8001448:	60d3      	str	r3, [r2, #12]
 800144a:	4b40      	ldr	r3, [pc, #256]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001460:	899b      	ldrh	r3, [r3, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fad6 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <LCD_Scan_Dir+0x400>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001494:	899b      	ldrh	r3, [r3, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff faba 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <LCD_Scan_Dir+0x400>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80014cc:	899b      	ldrh	r3, [r3, #12]
 80014ce:	3302      	adds	r3, #2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fa9e 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	121a      	asrs	r2, r3, #8
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <LCD_Scan_Dir+0x400>)
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800150a:	899b      	ldrh	r3, [r3, #12]
 800150c:	3303      	adds	r3, #3
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fa7f 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <LCD_Scan_Dir+0x400>)
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60d3      	str	r3, [r2, #12]
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	4b03      	ldr	r3, [pc, #12]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001544:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001546:	e10a      	b.n	800175e <LCD_Scan_Dir+0x60e>
 8001548:	200001b4 	.word	0x200001b4
 800154c:	40011000 	.word	0x40011000
 8001550:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001556:	895b      	ldrh	r3, [r3, #10]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fa5b 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800155e:	4b83      	ldr	r3, [pc, #524]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	4b80      	ldr	r3, [pc, #512]	; (8001770 <LCD_Scan_Dir+0x620>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	4b7d      	ldr	r3, [pc, #500]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	4b7c      	ldr	r3, [pc, #496]	; (800176c <LCD_Scan_Dir+0x61c>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	4b7a      	ldr	r3, [pc, #488]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <LCD_Scan_Dir+0x61c>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	4b75      	ldr	r3, [pc, #468]	; (8001770 <LCD_Scan_Dir+0x620>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	4b73      	ldr	r3, [pc, #460]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b71      	ldr	r3, [pc, #452]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	4b70      	ldr	r3, [pc, #448]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	4b6c      	ldr	r3, [pc, #432]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <LCD_Scan_Dir+0x618>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	121a      	asrs	r2, r3, #8
 80015ca:	4b69      	ldr	r3, [pc, #420]	; (8001770 <LCD_Scan_Dir+0x620>)
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <LCD_Scan_Dir+0x618>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <LCD_Scan_Dir+0x620>)
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	60d3      	str	r3, [r2, #12]
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <LCD_Scan_Dir+0x61c>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9fc 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <LCD_Scan_Dir+0x61c>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <LCD_Scan_Dir+0x620>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <LCD_Scan_Dir+0x61c>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <LCD_Scan_Dir+0x620>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <LCD_Scan_Dir+0x61c>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <LCD_Scan_Dir+0x61c>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <LCD_Scan_Dir+0x61c>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001682:	885b      	ldrh	r3, [r3, #2]
 8001684:	3b01      	subs	r3, #1
 8001686:	121a      	asrs	r2, r3, #8
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <LCD_Scan_Dir+0x620>)
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <LCD_Scan_Dir+0x61c>)
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <LCD_Scan_Dir+0x61c>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <LCD_Scan_Dir+0x618>)
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a2e      	ldr	r2, [pc, #184]	; (8001770 <LCD_Scan_Dir+0x620>)
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	60d3      	str	r3, [r2, #12]
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016d0:	e045      	b.n	800175e <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d836      	bhi.n	8001746 <LCD_Scan_Dir+0x5f6>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <LCD_Scan_Dir+0x590>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	08001701 	.word	0x08001701
 80016e4:	0800170b 	.word	0x0800170b
 80016e8:	08001715 	.word	0x08001715
 80016ec:	08001747 	.word	0x08001747
 80016f0:	0800171f 	.word	0x0800171f
 80016f4:	08001729 	.word	0x08001729
 80016f8:	08001733 	.word	0x08001733
 80016fc:	0800173d 	.word	0x0800173d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001706:	81fb      	strh	r3, [r7, #14]
			break;
 8001708:	e01d      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	81fb      	strh	r3, [r7, #14]
			break;
 8001712:	e018      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	81fb      	strh	r3, [r7, #14]
			break;
 800171c:	e013      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001724:	81fb      	strh	r3, [r7, #14]
			break;
 8001726:	e00e      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800172e:	81fb      	strh	r3, [r7, #14]
			break;
 8001730:	e009      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f043 0318 	orr.w	r3, r3, #24
 8001738:	81fb      	strh	r3, [r7, #14]
			break;
 800173a:	e004      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	81fb      	strh	r3, [r7, #14]
			break;
 8001744:	bf00      	nop
		}
		dirreg = 0X03;
 8001746:	2303      	movs	r3, #3
 8001748:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001750:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001752:	89fa      	ldrh	r2, [r7, #14]
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f9e7 	bl	8000b2c <LCD_WriteReg>
	}
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200001b4 	.word	0x200001b4
 800176c:	40011000 	.word	0x40011000
 8001770:	40010c00 	.word	0x40010c00
 8001774:	00000000 	.word	0x00000000

08001778 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001782:	20be      	movs	r0, #190	; 0xbe
 8001784:	f7ff f946 	bl	8000a14 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	4b48      	ldr	r3, [pc, #288]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 800179a:	2205      	movs	r2, #5
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe89 	bl	80004dc <__aeabi_i2d>
 80017ca:	a339      	add	r3, pc, #228	; (adr r3, 80018b0 <LCD_SSD_BackLightSet+0x138>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe feee 	bl	80005b0 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	4c37      	ldr	r4, [pc, #220]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f8f7 	bl	80009d4 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60e3      	str	r3, [r4, #12]
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	611a      	str	r2, [r3, #16]
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80017f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 8001810:	2201      	movs	r2, #1
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 800183a:	22ff      	movs	r2, #255	; 0xff
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800184c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001850:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	615a      	str	r2, [r3, #20]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800187e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <LCD_SSD_BackLightSet+0x144>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <LCD_SSD_BackLightSet+0x140>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	611a      	str	r2, [r3, #16]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	66666666 	.word	0x66666666
 80018b4:	40046666 	.word	0x40046666
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40010c00 	.word	0x40010c00

080018c0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d177      	bne.n	80019c0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80018d0:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80018d6:	4b7f      	ldr	r3, [pc, #508]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018d8:	22f0      	movs	r2, #240	; 0xf0
 80018da:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80018dc:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018e2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	f249 3241 	movw	r2, #37697	; 0x9341
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00b      	beq.n	8001908 <LCD_Display_Dir+0x48>
 80018f0:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	f646 0204 	movw	r2, #26628	; 0x6804
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d005      	beq.n	8001908 <LCD_Display_Dir+0x48>
 80018fc:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80018fe:	889b      	ldrh	r3, [r3, #4]
 8001900:	f245 3210 	movw	r2, #21264	; 0x5310
 8001904:	4293      	cmp	r3, r2
 8001906:	d11e      	bne.n	8001946 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001908:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800190a:	222c      	movs	r2, #44	; 0x2c
 800190c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001910:	222a      	movs	r2, #42	; 0x2a
 8001912:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001914:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001916:	222b      	movs	r2, #43	; 0x2b
 8001918:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800191a:	4b6e      	ldr	r3, [pc, #440]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001922:	4293      	cmp	r3, r2
 8001924:	d006      	beq.n	8001934 <LCD_Display_Dir+0x74>
 8001926:	4b6b      	ldr	r3, [pc, #428]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	f245 3210 	movw	r2, #21264	; 0x5310
 800192e:	4293      	cmp	r3, r2
 8001930:	f040 80c7 	bne.w	8001ac2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001934:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001936:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800193a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800193c:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800193e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001942:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001944:	e0bd      	b.n	8001ac2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	f245 5210 	movw	r2, #21776	; 0x5510
 800194e:	4293      	cmp	r3, r2
 8001950:	d114      	bne.n	800197c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001952:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001954:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001958:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800195c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001960:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001962:	4b5c      	ldr	r3, [pc, #368]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001964:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001968:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800196c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001970:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001972:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001974:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001978:	805a      	strh	r2, [r3, #2]
 800197a:	e0a3      	b.n	8001ac4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800197c:	4b55      	ldr	r3, [pc, #340]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	f641 1263 	movw	r2, #6499	; 0x1963
 8001984:	4293      	cmp	r3, r2
 8001986:	d111      	bne.n	80019ac <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001988:	4b52      	ldr	r3, [pc, #328]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800198a:	222c      	movs	r2, #44	; 0x2c
 800198c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001990:	222b      	movs	r2, #43	; 0x2b
 8001992:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001994:	4b4f      	ldr	r3, [pc, #316]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001996:	222a      	movs	r2, #42	; 0x2a
 8001998:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800199a:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <LCD_Display_Dir+0x214>)
 800199c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a8:	805a      	strh	r2, [r3, #2]
 80019aa:	e08b      	b.n	8001ac4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 80019ac:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019ae:	2222      	movs	r2, #34	; 0x22
 80019b0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019b4:	2220      	movs	r2, #32
 80019b6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 80019b8:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019ba:	2221      	movs	r2, #33	; 0x21
 80019bc:	819a      	strh	r2, [r3, #12]
 80019be:	e081      	b.n	8001ac4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80019c0:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019cc:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019d0:	22f0      	movs	r2, #240	; 0xf0
 80019d2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80019d4:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	f249 3241 	movw	r2, #37697	; 0x9341
 80019dc:	4293      	cmp	r3, r2
 80019de:	d005      	beq.n	80019ec <LCD_Display_Dir+0x12c>
 80019e0:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	f245 3210 	movw	r2, #21264	; 0x5310
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d109      	bne.n	8001a00 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019ee:	222c      	movs	r2, #44	; 0x2c
 80019f0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019f4:	222a      	movs	r2, #42	; 0x2a
 80019f6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <LCD_Display_Dir+0x214>)
 80019fa:	222b      	movs	r2, #43	; 0x2b
 80019fc:	819a      	strh	r2, [r3, #12]
 80019fe:	e04b      	b.n	8001a98 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d109      	bne.n	8001a20 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a0e:	222c      	movs	r2, #44	; 0x2c
 8001a10:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a14:	222b      	movs	r2, #43	; 0x2b
 8001a16:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a1a:	222a      	movs	r2, #42	; 0x2a
 8001a1c:	819a      	strh	r2, [r3, #12]
 8001a1e:	e03b      	b.n	8001a98 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d114      	bne.n	8001a56 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a2e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a32:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a36:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a3a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a3e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001a42:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a4a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a52:	805a      	strh	r2, [r3, #2]
 8001a54:	e020      	b.n	8001a98 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a58:	889b      	ldrh	r3, [r3, #4]
 8001a5a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d111      	bne.n	8001a86 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a64:	222c      	movs	r2, #44	; 0x2c
 8001a66:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a6a:	222a      	movs	r2, #42	; 0x2a
 8001a6c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a70:	222b      	movs	r2, #43	; 0x2b
 8001a72:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a76:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a7a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a82:	805a      	strh	r2, [r3, #2]
 8001a84:	e008      	b.n	8001a98 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a88:	2222      	movs	r2, #34	; 0x22
 8001a8a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001a9a:	889b      	ldrh	r3, [r3, #4]
 8001a9c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d005      	beq.n	8001ab0 <LCD_Display_Dir+0x1f0>
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d109      	bne.n	8001ac4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ab6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LCD_Display_Dir+0x214>)
 8001aba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001abe:	805a      	strh	r2, [r3, #2]
 8001ac0:	e000      	b.n	8001ac4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ac2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fb43 	bl	8001150 <LCD_Scan_Dir>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001b4 	.word	0x200001b4

08001ad8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001ade:	4b90      	ldr	r3, [pc, #576]	; (8001d20 <LCD_Init+0x248>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a8f      	ldr	r2, [pc, #572]	; (8001d20 <LCD_Init+0x248>)
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b8d      	ldr	r3, [pc, #564]	; (8001d20 <LCD_Init+0x248>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001af6:	4b8a      	ldr	r3, [pc, #552]	; (8001d20 <LCD_Init+0x248>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a89      	ldr	r2, [pc, #548]	; (8001d20 <LCD_Init+0x248>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b87      	ldr	r3, [pc, #540]	; (8001d20 <LCD_Init+0x248>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001b0e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b12:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001b14:	2301      	movs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	487f      	ldr	r0, [pc, #508]	; (8001d24 <LCD_Init+0x24c>)
 8001b28:	f005 f816 	bl	8006b58 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b30:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	487b      	ldr	r0, [pc, #492]	; (8001d28 <LCD_Init+0x250>)
 8001b3a:	f005 f80d 	bl	8006b58 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001b3e:	2032      	movs	r0, #50	; 0x32
 8001b40:	f004 fdd2 	bl	80066e8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001b44:	2101      	movs	r1, #1
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7fe fff0 	bl	8000b2c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001b4c:	2032      	movs	r0, #50	; 0x32
 8001b4e:	f004 fdcb 	bl	80066e8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff f814 	bl	8000b80 <LCD_ReadReg>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <LCD_Init+0x254>)
 8001b5e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001b60:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <LCD_Init+0x254>)
 8001b62:	889b      	ldrh	r3, [r3, #4]
 8001b64:	2bfe      	cmp	r3, #254	; 0xfe
 8001b66:	d90b      	bls.n	8001b80 <LCD_Init+0xa8>
 8001b68:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <LCD_Init+0x254>)
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d005      	beq.n	8001b80 <LCD_Init+0xa8>
 8001b74:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <LCD_Init+0x254>)
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001b7c:	f040 80c8 	bne.w	8001d10 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001b80:	20d3      	movs	r0, #211	; 0xd3
 8001b82:	f7fe ff47 	bl	8000a14 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001b86:	f7fe ff8d 	bl	8000aa4 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001b8a:	f7fe ff8b 	bl	8000aa4 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001b8e:	f7fe ff89 	bl	8000aa4 <LCD_RD_DATA>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <LCD_Init+0x254>)
 8001b98:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <LCD_Init+0x254>)
 8001b9c:	889b      	ldrh	r3, [r3, #4]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <LCD_Init+0x254>)
 8001ba4:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001ba6:	f7fe ff7d 	bl	8000aa4 <LCD_RD_DATA>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <LCD_Init+0x254>)
 8001bb0:	889b      	ldrh	r3, [r3, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <LCD_Init+0x254>)
 8001bb8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <LCD_Init+0x254>)
 8001bbc:	889b      	ldrh	r3, [r3, #4]
 8001bbe:	f249 3241 	movw	r2, #37697	; 0x9341
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	f000 80a4 	beq.w	8001d10 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001bc8:	20bf      	movs	r0, #191	; 0xbf
 8001bca:	f7fe ff23 	bl	8000a14 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001bce:	f7fe ff69 	bl	8000aa4 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001bd2:	f7fe ff67 	bl	8000aa4 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001bd6:	f7fe ff65 	bl	8000aa4 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001bda:	f7fe ff63 	bl	8000aa4 <LCD_RD_DATA>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <LCD_Init+0x254>)
 8001be4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <LCD_Init+0x254>)
 8001be8:	889b      	ldrh	r3, [r3, #4]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <LCD_Init+0x254>)
 8001bf0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001bf2:	f7fe ff57 	bl	8000aa4 <LCD_RD_DATA>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <LCD_Init+0x254>)
 8001bfc:	889b      	ldrh	r3, [r3, #4]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <LCD_Init+0x254>)
 8001c04:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <LCD_Init+0x254>)
 8001c08:	889b      	ldrh	r3, [r3, #4]
 8001c0a:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d07e      	beq.n	8001d10 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001c12:	20d4      	movs	r0, #212	; 0xd4
 8001c14:	f7fe fefe 	bl	8000a14 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001c18:	f7fe ff44 	bl	8000aa4 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001c1c:	f7fe ff42 	bl	8000aa4 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001c20:	f7fe ff40 	bl	8000aa4 <LCD_RD_DATA>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <LCD_Init+0x254>)
 8001c2a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <LCD_Init+0x254>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <LCD_Init+0x254>)
 8001c36:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001c38:	f7fe ff34 	bl	8000aa4 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <LCD_Init+0x254>)
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <LCD_Init+0x254>)
 8001c4a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <LCD_Init+0x254>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05b      	beq.n	8001d10 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001c58:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001c5c:	f7fe feda 	bl	8000a14 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001c60:	f7fe ff20 	bl	8000aa4 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001c64:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001c68:	f7fe fed4 	bl	8000a14 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001c6c:	f7fe ff1a 	bl	8000aa4 <LCD_RD_DATA>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <LCD_Init+0x254>)
 8001c76:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <LCD_Init+0x254>)
 8001c7a:	889b      	ldrh	r3, [r3, #4]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <LCD_Init+0x254>)
 8001c82:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001c84:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001c88:	f7fe fec4 	bl	8000a14 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001c8c:	f7fe ff0a 	bl	8000aa4 <LCD_RD_DATA>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <LCD_Init+0x254>)
 8001c96:	889b      	ldrh	r3, [r3, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <LCD_Init+0x254>)
 8001c9e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <LCD_Init+0x254>)
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca8:	d103      	bne.n	8001cb2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <LCD_Init+0x254>)
 8001cac:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cb0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <LCD_Init+0x254>)
 8001cb4:	889b      	ldrh	r3, [r3, #4]
 8001cb6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d028      	beq.n	8001d10 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001cbe:	20a1      	movs	r0, #161	; 0xa1
 8001cc0:	f7fe fea8 	bl	8000a14 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001cc4:	f7fe feee 	bl	8000aa4 <LCD_RD_DATA>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <LCD_Init+0x254>)
 8001cce:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001cd0:	f7fe fee8 	bl	8000aa4 <LCD_RD_DATA>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <LCD_Init+0x254>)
 8001cda:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <LCD_Init+0x254>)
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <LCD_Init+0x254>)
 8001ce6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001ce8:	f7fe fedc 	bl	8000aa4 <LCD_RD_DATA>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <LCD_Init+0x254>)
 8001cf2:	889b      	ldrh	r3, [r3, #4]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <LCD_Init+0x254>)
 8001cfa:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LCD_Init+0x254>)
 8001cfe:	889b      	ldrh	r3, [r3, #4]
 8001d00:	f245 7261 	movw	r2, #22369	; 0x5761
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <LCD_Init+0x254>)
 8001d0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d0e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <LCD_Init+0x254>)
 8001d12:	889b      	ldrh	r3, [r3, #4]
 8001d14:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f040 811f 	bne.w	8001f5c <LCD_Init+0x484>
 8001d1e:	e007      	b.n	8001d30 <LCD_Init+0x258>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	200001b4 	.word	0x200001b4
			{
		LCD_WR_REG(0xCF);
 8001d30:	20cf      	movs	r0, #207	; 0xcf
 8001d32:	f7fe fe6f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7fe fe90 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001d3c:	20c1      	movs	r0, #193	; 0xc1
 8001d3e:	f7fe fe8d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001d42:	2030      	movs	r0, #48	; 0x30
 8001d44:	f7fe fe8a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001d48:	20ed      	movs	r0, #237	; 0xed
 8001d4a:	f7fe fe63 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001d4e:	2064      	movs	r0, #100	; 0x64
 8001d50:	f7fe fe84 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f7fe fe81 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001d5a:	2012      	movs	r0, #18
 8001d5c:	f7fe fe7e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001d60:	2081      	movs	r0, #129	; 0x81
 8001d62:	f7fe fe7b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001d66:	20e8      	movs	r0, #232	; 0xe8
 8001d68:	f7fe fe54 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001d6c:	2085      	movs	r0, #133	; 0x85
 8001d6e:	f7fe fe75 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001d72:	2010      	movs	r0, #16
 8001d74:	f7fe fe72 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001d78:	207a      	movs	r0, #122	; 0x7a
 8001d7a:	f7fe fe6f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001d7e:	20cb      	movs	r0, #203	; 0xcb
 8001d80:	f7fe fe48 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001d84:	2039      	movs	r0, #57	; 0x39
 8001d86:	f7fe fe69 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001d8a:	202c      	movs	r0, #44	; 0x2c
 8001d8c:	f7fe fe66 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe fe63 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001d96:	2034      	movs	r0, #52	; 0x34
 8001d98:	f7fe fe60 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7fe fe5d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001da2:	20f7      	movs	r0, #247	; 0xf7
 8001da4:	f7fe fe36 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001da8:	2020      	movs	r0, #32
 8001daa:	f7fe fe57 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001dae:	20ea      	movs	r0, #234	; 0xea
 8001db0:	f7fe fe30 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7fe fe51 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7fe fe4e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001dc0:	20c0      	movs	r0, #192	; 0xc0
 8001dc2:	f7fe fe27 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001dc6:	201b      	movs	r0, #27
 8001dc8:	f7fe fe48 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001dcc:	20c1      	movs	r0, #193	; 0xc1
 8001dce:	f7fe fe21 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7fe fe42 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001dd8:	20c5      	movs	r0, #197	; 0xc5
 8001dda:	f7fe fe1b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001dde:	2030      	movs	r0, #48	; 0x30
 8001de0:	f7fe fe3c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001de4:	2030      	movs	r0, #48	; 0x30
 8001de6:	f7fe fe39 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001dea:	20c7      	movs	r0, #199	; 0xc7
 8001dec:	f7fe fe12 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001df0:	20b7      	movs	r0, #183	; 0xb7
 8001df2:	f7fe fe33 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001df6:	2036      	movs	r0, #54	; 0x36
 8001df8:	f7fe fe0c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001dfc:	2048      	movs	r0, #72	; 0x48
 8001dfe:	f7fe fe2d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001e02:	203a      	movs	r0, #58	; 0x3a
 8001e04:	f7fe fe06 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001e08:	2055      	movs	r0, #85	; 0x55
 8001e0a:	f7fe fe27 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001e0e:	20b1      	movs	r0, #177	; 0xb1
 8001e10:	f7fe fe00 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe fe21 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001e1a:	201a      	movs	r0, #26
 8001e1c:	f7fe fe1e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001e20:	20b6      	movs	r0, #182	; 0xb6
 8001e22:	f7fe fdf7 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001e26:	200a      	movs	r0, #10
 8001e28:	f7fe fe18 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001e2c:	20a2      	movs	r0, #162	; 0xa2
 8001e2e:	f7fe fe15 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001e32:	20f2      	movs	r0, #242	; 0xf2
 8001e34:	f7fe fdee 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7fe fe0f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001e3e:	2026      	movs	r0, #38	; 0x26
 8001e40:	f7fe fde8 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fe09 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001e4a:	20e0      	movs	r0, #224	; 0xe0
 8001e4c:	f7fe fde2 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001e50:	200f      	movs	r0, #15
 8001e52:	f7fe fe03 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001e56:	202a      	movs	r0, #42	; 0x2a
 8001e58:	f7fe fe00 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001e5c:	2028      	movs	r0, #40	; 0x28
 8001e5e:	f7fe fdfd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001e62:	2008      	movs	r0, #8
 8001e64:	f7fe fdfa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001e68:	200e      	movs	r0, #14
 8001e6a:	f7fe fdf7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001e6e:	2008      	movs	r0, #8
 8001e70:	f7fe fdf4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001e74:	2054      	movs	r0, #84	; 0x54
 8001e76:	f7fe fdf1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001e7a:	20a9      	movs	r0, #169	; 0xa9
 8001e7c:	f7fe fdee 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001e80:	2043      	movs	r0, #67	; 0x43
 8001e82:	f7fe fdeb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001e86:	200a      	movs	r0, #10
 8001e88:	f7fe fde8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001e8c:	200f      	movs	r0, #15
 8001e8e:	f7fe fde5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe fde2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe fddf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7fe fddc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7fe fdd9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001eaa:	20e1      	movs	r0, #225	; 0xe1
 8001eac:	f7fe fdb2 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7fe fdd3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001eb6:	2015      	movs	r0, #21
 8001eb8:	f7fe fdd0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001ebc:	2017      	movs	r0, #23
 8001ebe:	f7fe fdcd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f7fe fdca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f7fe fdc7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8001ece:	2006      	movs	r0, #6
 8001ed0:	f7fe fdc4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8001ed4:	202b      	movs	r0, #43	; 0x2b
 8001ed6:	f7fe fdc1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8001eda:	2056      	movs	r0, #86	; 0x56
 8001edc:	f7fe fdbe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8001ee0:	203c      	movs	r0, #60	; 0x3c
 8001ee2:	f7fe fdbb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8001ee6:	2005      	movs	r0, #5
 8001ee8:	f7fe fdb8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001eec:	2010      	movs	r0, #16
 8001eee:	f7fe fdb5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f7fe fdb2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001ef8:	203f      	movs	r0, #63	; 0x3f
 8001efa:	f7fe fdaf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001efe:	203f      	movs	r0, #63	; 0x3f
 8001f00:	f7fe fdac 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001f04:	200f      	movs	r0, #15
 8001f06:	f7fe fda9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8001f0a:	202b      	movs	r0, #43	; 0x2b
 8001f0c:	f7fe fd82 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7fe fda3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe fda0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7fe fd9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8001f22:	203f      	movs	r0, #63	; 0x3f
 8001f24:	f7fe fd9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8001f28:	202a      	movs	r0, #42	; 0x2a
 8001f2a:	f7fe fd73 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7fe fd94 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7fe fd91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7fe fd8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8001f40:	20ef      	movs	r0, #239	; 0xef
 8001f42:	f7fe fd8b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8001f46:	2011      	movs	r0, #17
 8001f48:	f7fe fd64 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(120);
 8001f4c:	2078      	movs	r0, #120	; 0x78
 8001f4e:	f004 fbcb 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8001f52:	2029      	movs	r0, #41	; 0x29
 8001f54:	f7fe fd5e 	bl	8000a14 <LCD_WR_REG>
 8001f58:	f003 bcd8 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <LCD_Init+0x5e8>)
 8001f5e:	889b      	ldrh	r3, [r3, #4]
 8001f60:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f64:	4293      	cmp	r3, r2
 8001f66:	f040 80ad 	bne.w	80020c4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8001f6a:	2011      	movs	r0, #17
 8001f6c:	f7fe fd52 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(20);
 8001f70:	2014      	movs	r0, #20
 8001f72:	f004 fbb9 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8001f76:	20d0      	movs	r0, #208	; 0xd0
 8001f78:	f7fe fd4c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8001f7c:	2007      	movs	r0, #7
 8001f7e:	f7fe fd6d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8001f82:	2042      	movs	r0, #66	; 0x42
 8001f84:	f7fe fd6a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8001f88:	201d      	movs	r0, #29
 8001f8a:	f7fe fd67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8001f8e:	20d1      	movs	r0, #209	; 0xd1
 8001f90:	f7fe fd40 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7fe fd61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8001f9a:	201a      	movs	r0, #26
 8001f9c:	f7fe fd5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8001fa0:	2009      	movs	r0, #9
 8001fa2:	f7fe fd5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8001fa6:	20d2      	movs	r0, #210	; 0xd2
 8001fa8:	f7fe fd34 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe fd55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8001fb2:	2022      	movs	r0, #34	; 0x22
 8001fb4:	f7fe fd52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8001fb8:	20c0      	movs	r0, #192	; 0xc0
 8001fba:	f7fe fd2b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8001fbe:	2010      	movs	r0, #16
 8001fc0:	f7fe fd4c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8001fc4:	203b      	movs	r0, #59	; 0x3b
 8001fc6:	f7fe fd49 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fd46 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7fe fd43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8001fd6:	2011      	movs	r0, #17
 8001fd8:	f7fe fd40 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8001fdc:	20c5      	movs	r0, #197	; 0xc5
 8001fde:	f7fe fd19 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	f7fe fd3a 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8001fe8:	20c8      	movs	r0, #200	; 0xc8
 8001fea:	f7fe fd13 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe fd34 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8001ff4:	2025      	movs	r0, #37	; 0x25
 8001ff6:	f7fe fd31 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8001ffa:	2021      	movs	r0, #33	; 0x21
 8001ffc:	f7fe fd2e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002000:	2005      	movs	r0, #5
 8002002:	f7fe fd2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002006:	2000      	movs	r0, #0
 8002008:	f7fe fd28 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800200c:	200a      	movs	r0, #10
 800200e:	f7fe fd25 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002012:	2065      	movs	r0, #101	; 0x65
 8002014:	f7fe fd22 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002018:	2025      	movs	r0, #37	; 0x25
 800201a:	f7fe fd1f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800201e:	2077      	movs	r0, #119	; 0x77
 8002020:	f7fe fd1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002024:	2050      	movs	r0, #80	; 0x50
 8002026:	f7fe fd19 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800202a:	200f      	movs	r0, #15
 800202c:	f7fe fd16 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002030:	2000      	movs	r0, #0
 8002032:	f7fe fd13 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002036:	20f8      	movs	r0, #248	; 0xf8
 8002038:	f7fe fcec 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800203c:	2001      	movs	r0, #1
 800203e:	f7fe fd0d 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002042:	20fe      	movs	r0, #254	; 0xfe
 8002044:	f7fe fce6 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002048:	2000      	movs	r0, #0
 800204a:	f7fe fd07 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800204e:	2002      	movs	r0, #2
 8002050:	f7fe fd04 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002054:	2020      	movs	r0, #32
 8002056:	f7fe fcdd 	bl	8000a14 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800205a:	2036      	movs	r0, #54	; 0x36
 800205c:	f7fe fcda 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002060:	2008      	movs	r0, #8
 8002062:	f7fe fcfb 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002066:	203a      	movs	r0, #58	; 0x3a
 8002068:	f7fe fcd4 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800206c:	2055      	movs	r0, #85	; 0x55
 800206e:	f7fe fcf5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002072:	202b      	movs	r0, #43	; 0x2b
 8002074:	f7fe fcce 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fcef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe fcec 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002084:	2001      	movs	r0, #1
 8002086:	f7fe fce9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800208a:	203f      	movs	r0, #63	; 0x3f
 800208c:	f7fe fce6 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002090:	202a      	movs	r0, #42	; 0x2a
 8002092:	f7fe fcbf 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe fce0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe fcdd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7fe fcda 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80020a8:	20df      	movs	r0, #223	; 0xdf
 80020aa:	f7fe fcd7 	bl	8000a5c <LCD_WR_DATAX>
		HAL_Delay(120);
 80020ae:	2078      	movs	r0, #120	; 0x78
 80020b0:	f004 fb1a 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0X29);
 80020b4:	2029      	movs	r0, #41	; 0x29
 80020b6:	f7fe fcad 	bl	8000a14 <LCD_WR_REG>
 80020ba:	f003 bc27 	b.w	800590c <LCD_Init+0x3e34>
 80020be:	bf00      	nop
 80020c0:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0x5310) {
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <LCD_Init+0x5fc>)
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 877c 	bne.w	8002fca <LCD_Init+0x14f2>
 80020d2:	e001      	b.n	80020d8 <LCD_Init+0x600>
 80020d4:	200001b4 	.word	0x200001b4
		LCD_WR_REG(0xED);
 80020d8:	20ed      	movs	r0, #237	; 0xed
 80020da:	f7fe fc9b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7fe fcbc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80020e4:	20fe      	movs	r0, #254	; 0xfe
 80020e6:	f7fe fcb9 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80020ea:	20ee      	movs	r0, #238	; 0xee
 80020ec:	f7fe fc92 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80020f0:	20de      	movs	r0, #222	; 0xde
 80020f2:	f7fe fcb3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80020f6:	2021      	movs	r0, #33	; 0x21
 80020f8:	f7fe fcb0 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80020fc:	20f1      	movs	r0, #241	; 0xf1
 80020fe:	f7fe fc89 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002102:	2001      	movs	r0, #1
 8002104:	f7fe fcaa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002108:	20df      	movs	r0, #223	; 0xdf
 800210a:	f7fe fc83 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800210e:	2010      	movs	r0, #16
 8002110:	f7fe fca4 	bl	8000a5c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002114:	20c4      	movs	r0, #196	; 0xc4
 8002116:	f7fe fc7d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800211a:	208f      	movs	r0, #143	; 0x8f
 800211c:	f7fe fc9e 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002120:	20c6      	movs	r0, #198	; 0xc6
 8002122:	f7fe fc77 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe fc98 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800212c:	20e2      	movs	r0, #226	; 0xe2
 800212e:	f7fe fc95 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002132:	20e2      	movs	r0, #226	; 0xe2
 8002134:	f7fe fc92 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002138:	20e2      	movs	r0, #226	; 0xe2
 800213a:	f7fe fc8f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800213e:	20bf      	movs	r0, #191	; 0xbf
 8002140:	f7fe fc68 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002144:	20aa      	movs	r0, #170	; 0xaa
 8002146:	f7fe fc89 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800214a:	20b0      	movs	r0, #176	; 0xb0
 800214c:	f7fe fc62 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002150:	200d      	movs	r0, #13
 8002152:	f7fe fc83 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fc80 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800215c:	200d      	movs	r0, #13
 800215e:	f7fe fc7d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7fe fc7a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002168:	2011      	movs	r0, #17
 800216a:	f7fe fc77 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7fe fc74 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002174:	2019      	movs	r0, #25
 8002176:	f7fe fc71 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800217a:	2000      	movs	r0, #0
 800217c:	f7fe fc6e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002180:	2021      	movs	r0, #33	; 0x21
 8002182:	f7fe fc6b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fc68 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800218c:	202d      	movs	r0, #45	; 0x2d
 800218e:	f7fe fc65 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fc62 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002198:	203d      	movs	r0, #61	; 0x3d
 800219a:	f7fe fc5f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe fc5c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80021a4:	205d      	movs	r0, #93	; 0x5d
 80021a6:	f7fe fc59 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe fc56 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80021b0:	205d      	movs	r0, #93	; 0x5d
 80021b2:	f7fe fc53 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fc50 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80021bc:	20b1      	movs	r0, #177	; 0xb1
 80021be:	f7fe fc29 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80021c2:	2080      	movs	r0, #128	; 0x80
 80021c4:	f7fe fc4a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fc47 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80021ce:	208b      	movs	r0, #139	; 0x8b
 80021d0:	f7fe fc44 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fc41 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80021da:	2096      	movs	r0, #150	; 0x96
 80021dc:	f7fe fc3e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fc3b 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80021e6:	20b2      	movs	r0, #178	; 0xb2
 80021e8:	f7fe fc14 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7fe fc35 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fc32 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80021f8:	2002      	movs	r0, #2
 80021fa:	f7fe fc2f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fc2c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002204:	2003      	movs	r0, #3
 8002206:	f7fe fc29 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fc26 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002210:	20b3      	movs	r0, #179	; 0xb3
 8002212:	f7fe fbff 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe fc20 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f7fe fc1d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe fc1a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fc17 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fc14 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fc11 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fc0e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fc0b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7fe fc08 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fc05 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe fc02 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe fbff 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fbfc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7fe fbf9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fbf6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fbf3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7fe fbf0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fbed 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fbea 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fbe7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe fbe4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fbe1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe fbde 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fbdb 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80022a6:	20b4      	movs	r0, #180	; 0xb4
 80022a8:	f7fe fbb4 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80022ac:	208b      	movs	r0, #139	; 0x8b
 80022ae:	f7fe fbd5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fe fbd2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80022b8:	2096      	movs	r0, #150	; 0x96
 80022ba:	f7fe fbcf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fbcc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80022c4:	20a1      	movs	r0, #161	; 0xa1
 80022c6:	f7fe fbc9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fbc6 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80022d0:	20b5      	movs	r0, #181	; 0xb5
 80022d2:	f7fe fb9f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80022d6:	2002      	movs	r0, #2
 80022d8:	f7fe fbc0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe fbbd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80022e2:	2003      	movs	r0, #3
 80022e4:	f7fe fbba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe fbb7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80022ee:	2004      	movs	r0, #4
 80022f0:	f7fe fbb4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fe fbb1 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80022fa:	20b6      	movs	r0, #182	; 0xb6
 80022fc:	f7fe fb8a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fbab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fba8 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800230c:	20b7      	movs	r0, #183	; 0xb7
 800230e:	f7fe fb81 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fba2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fb9f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800231e:	203f      	movs	r0, #63	; 0x3f
 8002320:	f7fe fb9c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fb99 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800232a:	205e      	movs	r0, #94	; 0x5e
 800232c:	f7fe fb96 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fb93 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002336:	2064      	movs	r0, #100	; 0x64
 8002338:	f7fe fb90 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fb8d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002342:	208c      	movs	r0, #140	; 0x8c
 8002344:	f7fe fb8a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fb87 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800234e:	20ac      	movs	r0, #172	; 0xac
 8002350:	f7fe fb84 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fb81 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800235a:	20dc      	movs	r0, #220	; 0xdc
 800235c:	f7fe fb7e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fb7b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002366:	2070      	movs	r0, #112	; 0x70
 8002368:	f7fe fb78 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fb75 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002372:	2090      	movs	r0, #144	; 0x90
 8002374:	f7fe fb72 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fb6f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800237e:	20eb      	movs	r0, #235	; 0xeb
 8002380:	f7fe fb6c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fb69 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800238a:	20dc      	movs	r0, #220	; 0xdc
 800238c:	f7fe fb66 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fb63 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002396:	20b8      	movs	r0, #184	; 0xb8
 8002398:	f7fe fb3c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fb5d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fb5a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fb57 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fb54 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fb51 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fb4e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fb4b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fb48 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80023cc:	20ba      	movs	r0, #186	; 0xba
 80023ce:	f7fe fb21 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80023d2:	2024      	movs	r0, #36	; 0x24
 80023d4:	f7fe fb42 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fb3f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fb3c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fb39 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80023ea:	20c1      	movs	r0, #193	; 0xc1
 80023ec:	f7fe fb12 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80023f0:	2020      	movs	r0, #32
 80023f2:	f7fe fb33 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fb30 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80023fc:	2054      	movs	r0, #84	; 0x54
 80023fe:	f7fe fb2d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe fb2a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002408:	20ff      	movs	r0, #255	; 0xff
 800240a:	f7fe fb27 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe fb24 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002414:	20c2      	movs	r0, #194	; 0xc2
 8002416:	f7fe fafd 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800241a:	200a      	movs	r0, #10
 800241c:	f7fe fb1e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fb1b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002426:	2004      	movs	r0, #4
 8002428:	f7fe fb18 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fb15 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002432:	20c3      	movs	r0, #195	; 0xc3
 8002434:	f7fe faee 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002438:	203c      	movs	r0, #60	; 0x3c
 800243a:	f7fe fb0f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe fb0c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002444:	203a      	movs	r0, #58	; 0x3a
 8002446:	f7fe fb09 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fb06 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002450:	2039      	movs	r0, #57	; 0x39
 8002452:	f7fe fb03 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fb00 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800245c:	2037      	movs	r0, #55	; 0x37
 800245e:	f7fe fafd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002462:	2000      	movs	r0, #0
 8002464:	f7fe fafa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002468:	203c      	movs	r0, #60	; 0x3c
 800246a:	f7fe faf7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe faf4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002474:	2036      	movs	r0, #54	; 0x36
 8002476:	f7fe faf1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe faee 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002480:	2032      	movs	r0, #50	; 0x32
 8002482:	f7fe faeb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fae8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800248c:	202f      	movs	r0, #47	; 0x2f
 800248e:	f7fe fae5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe fae2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f7fe fadf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fadc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80024a4:	2029      	movs	r0, #41	; 0x29
 80024a6:	f7fe fad9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fad6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80024b0:	2026      	movs	r0, #38	; 0x26
 80024b2:	f7fe fad3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fad0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80024bc:	2024      	movs	r0, #36	; 0x24
 80024be:	f7fe facd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe faca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80024c8:	2024      	movs	r0, #36	; 0x24
 80024ca:	f7fe fac7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fac4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80024d4:	2023      	movs	r0, #35	; 0x23
 80024d6:	f7fe fac1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fabe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80024e0:	203c      	movs	r0, #60	; 0x3c
 80024e2:	f7fe fabb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe fab8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80024ec:	2036      	movs	r0, #54	; 0x36
 80024ee:	f7fe fab5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe fab2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80024f8:	2032      	movs	r0, #50	; 0x32
 80024fa:	f7fe faaf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe faac 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002504:	202f      	movs	r0, #47	; 0x2f
 8002506:	f7fe faa9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe faa6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002510:	202c      	movs	r0, #44	; 0x2c
 8002512:	f7fe faa3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe faa0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800251c:	2029      	movs	r0, #41	; 0x29
 800251e:	f7fe fa9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fa9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002528:	2026      	movs	r0, #38	; 0x26
 800252a:	f7fe fa97 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fa94 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002534:	2024      	movs	r0, #36	; 0x24
 8002536:	f7fe fa91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fa8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002540:	2024      	movs	r0, #36	; 0x24
 8002542:	f7fe fa8b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fa88 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800254c:	2023      	movs	r0, #35	; 0x23
 800254e:	f7fe fa85 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fa82 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002558:	20c4      	movs	r0, #196	; 0xc4
 800255a:	f7fe fa5b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800255e:	2062      	movs	r0, #98	; 0x62
 8002560:	f7fe fa7c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fa79 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800256a:	2005      	movs	r0, #5
 800256c:	f7fe fa76 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe fa73 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002576:	2084      	movs	r0, #132	; 0x84
 8002578:	f7fe fa70 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe fa6d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002582:	20f0      	movs	r0, #240	; 0xf0
 8002584:	f7fe fa6a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe fa67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800258e:	2018      	movs	r0, #24
 8002590:	f7fe fa64 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002594:	2000      	movs	r0, #0
 8002596:	f7fe fa61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800259a:	20a4      	movs	r0, #164	; 0xa4
 800259c:	f7fe fa5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fa5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80025a6:	2018      	movs	r0, #24
 80025a8:	f7fe fa58 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fa55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80025b2:	2050      	movs	r0, #80	; 0x50
 80025b4:	f7fe fa52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fa4f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80025be:	200c      	movs	r0, #12
 80025c0:	f7fe fa4c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fa49 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80025ca:	2017      	movs	r0, #23
 80025cc:	f7fe fa46 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe fa43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80025d6:	2095      	movs	r0, #149	; 0x95
 80025d8:	f7fe fa40 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe fa3d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80025e2:	20f3      	movs	r0, #243	; 0xf3
 80025e4:	f7fe fa3a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fa37 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80025ee:	20e6      	movs	r0, #230	; 0xe6
 80025f0:	f7fe fa34 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fa31 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80025fa:	20c5      	movs	r0, #197	; 0xc5
 80025fc:	f7fe fa0a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002600:	2032      	movs	r0, #50	; 0x32
 8002602:	f7fe fa2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fa28 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800260c:	2044      	movs	r0, #68	; 0x44
 800260e:	f7fe fa25 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fa22 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002618:	2065      	movs	r0, #101	; 0x65
 800261a:	f7fe fa1f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fa1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002624:	2076      	movs	r0, #118	; 0x76
 8002626:	f7fe fa19 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fa16 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002630:	2088      	movs	r0, #136	; 0x88
 8002632:	f7fe fa13 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fa10 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800263c:	20c6      	movs	r0, #198	; 0xc6
 800263e:	f7fe f9e9 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002642:	2020      	movs	r0, #32
 8002644:	f7fe fa0a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fa07 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800264e:	2017      	movs	r0, #23
 8002650:	f7fe fa04 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fa01 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800265a:	2001      	movs	r0, #1
 800265c:	f7fe f9fe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f9fb 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002666:	20c7      	movs	r0, #199	; 0xc7
 8002668:	f7fe f9d4 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f9f5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe f9f2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f9ef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe f9ec 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002684:	20c8      	movs	r0, #200	; 0xc8
 8002686:	f7fe f9c5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe f9e6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe f9e3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe f9e0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe f9dd 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80026a2:	20c9      	movs	r0, #201	; 0xc9
 80026a4:	f7fe f9b6 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe f9d7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe f9d4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f9d1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe f9ce 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe f9cb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe f9c8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f9c5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe f9c2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f9bf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe f9bc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe f9b9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f9b6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f9b3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe f9b0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe f9ad 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe f9aa 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002708:	20e0      	movs	r0, #224	; 0xe0
 800270a:	f7fe f983 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800270e:	2016      	movs	r0, #22
 8002710:	f7fe f9a4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f9a1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800271a:	201c      	movs	r0, #28
 800271c:	f7fe f99e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f99b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002726:	2021      	movs	r0, #33	; 0x21
 8002728:	f7fe f998 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe f995 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002732:	2036      	movs	r0, #54	; 0x36
 8002734:	f7fe f992 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe f98f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800273e:	2046      	movs	r0, #70	; 0x46
 8002740:	f7fe f98c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe f989 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800274a:	2052      	movs	r0, #82	; 0x52
 800274c:	f7fe f986 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f983 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002756:	2064      	movs	r0, #100	; 0x64
 8002758:	f7fe f980 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f97d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002762:	207a      	movs	r0, #122	; 0x7a
 8002764:	f7fe f97a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f977 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800276e:	208b      	movs	r0, #139	; 0x8b
 8002770:	f7fe f974 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f971 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800277a:	2099      	movs	r0, #153	; 0x99
 800277c:	f7fe f96e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe f96b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002786:	20a8      	movs	r0, #168	; 0xa8
 8002788:	f7fe f968 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe f965 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002792:	20b9      	movs	r0, #185	; 0xb9
 8002794:	f7fe f962 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe f95f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800279e:	20c4      	movs	r0, #196	; 0xc4
 80027a0:	f7fe f95c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe f959 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80027aa:	20ca      	movs	r0, #202	; 0xca
 80027ac:	f7fe f956 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f953 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80027b6:	20d2      	movs	r0, #210	; 0xd2
 80027b8:	f7fe f950 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f94d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80027c2:	20d9      	movs	r0, #217	; 0xd9
 80027c4:	f7fe f94a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f947 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80027ce:	20e0      	movs	r0, #224	; 0xe0
 80027d0:	f7fe f944 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe f941 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80027da:	20f3      	movs	r0, #243	; 0xf3
 80027dc:	f7fe f93e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe f93b 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80027e6:	20e1      	movs	r0, #225	; 0xe1
 80027e8:	f7fe f914 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80027ec:	2016      	movs	r0, #22
 80027ee:	f7fe f935 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f932 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80027f8:	201c      	movs	r0, #28
 80027fa:	f7fe f92f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f92c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002804:	2022      	movs	r0, #34	; 0x22
 8002806:	f7fe f929 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f926 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002810:	2036      	movs	r0, #54	; 0x36
 8002812:	f7fe f923 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f920 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800281c:	2045      	movs	r0, #69	; 0x45
 800281e:	f7fe f91d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f91a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002828:	2052      	movs	r0, #82	; 0x52
 800282a:	f7fe f917 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f914 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002834:	2064      	movs	r0, #100	; 0x64
 8002836:	f7fe f911 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f90e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002840:	207a      	movs	r0, #122	; 0x7a
 8002842:	f7fe f90b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f908 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800284c:	208b      	movs	r0, #139	; 0x8b
 800284e:	f7fe f905 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f902 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002858:	2099      	movs	r0, #153	; 0x99
 800285a:	f7fe f8ff 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f8fc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002864:	20a8      	movs	r0, #168	; 0xa8
 8002866:	f7fe f8f9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe f8f6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002870:	20b9      	movs	r0, #185	; 0xb9
 8002872:	f7fe f8f3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f8f0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800287c:	20c4      	movs	r0, #196	; 0xc4
 800287e:	f7fe f8ed 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f8ea 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002888:	20ca      	movs	r0, #202	; 0xca
 800288a:	f7fe f8e7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f8e4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002894:	20d2      	movs	r0, #210	; 0xd2
 8002896:	f7fe f8e1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f8de 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80028a0:	20d8      	movs	r0, #216	; 0xd8
 80028a2:	f7fe f8db 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe f8d8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80028ac:	20e0      	movs	r0, #224	; 0xe0
 80028ae:	f7fe f8d5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f8d2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80028b8:	20f3      	movs	r0, #243	; 0xf3
 80028ba:	f7fe f8cf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe f8cc 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80028c4:	20e2      	movs	r0, #226	; 0xe2
 80028c6:	f7fe f8a5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80028ca:	2005      	movs	r0, #5
 80028cc:	f7fe f8c6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe f8c3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80028d6:	200b      	movs	r0, #11
 80028d8:	f7fe f8c0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe f8bd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80028e2:	201b      	movs	r0, #27
 80028e4:	f7fe f8ba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe f8b7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80028ee:	2034      	movs	r0, #52	; 0x34
 80028f0:	f7fe f8b4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe f8b1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80028fa:	2044      	movs	r0, #68	; 0x44
 80028fc:	f7fe f8ae 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe f8ab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002906:	204f      	movs	r0, #79	; 0x4f
 8002908:	f7fe f8a8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f8a5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002912:	2061      	movs	r0, #97	; 0x61
 8002914:	f7fe f8a2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f89f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 800291e:	2079      	movs	r0, #121	; 0x79
 8002920:	f7fe f89c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe f899 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800292a:	2088      	movs	r0, #136	; 0x88
 800292c:	f7fe f896 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe f893 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002936:	2097      	movs	r0, #151	; 0x97
 8002938:	f7fe f890 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe f88d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002942:	20a6      	movs	r0, #166	; 0xa6
 8002944:	f7fe f88a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe f887 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800294e:	20b7      	movs	r0, #183	; 0xb7
 8002950:	f7fe f884 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe f881 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 800295a:	20c2      	movs	r0, #194	; 0xc2
 800295c:	f7fe f87e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe f87b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002966:	20c7      	movs	r0, #199	; 0xc7
 8002968:	f7fe f878 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe f875 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002972:	20d1      	movs	r0, #209	; 0xd1
 8002974:	f7fe f872 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe f86f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800297e:	20d6      	movs	r0, #214	; 0xd6
 8002980:	f7fe f86c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe f869 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800298a:	20dd      	movs	r0, #221	; 0xdd
 800298c:	f7fe f866 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe f863 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002996:	20f3      	movs	r0, #243	; 0xf3
 8002998:	f7fe f860 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe f85d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80029a2:	20e3      	movs	r0, #227	; 0xe3
 80029a4:	f7fe f836 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80029a8:	2005      	movs	r0, #5
 80029aa:	f7fe f857 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe f854 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 80029b4:	200a      	movs	r0, #10
 80029b6:	f7fe f851 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fe f84e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80029c0:	201c      	movs	r0, #28
 80029c2:	f7fe f84b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe f848 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80029cc:	2033      	movs	r0, #51	; 0x33
 80029ce:	f7fe f845 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fe f842 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80029d8:	2044      	movs	r0, #68	; 0x44
 80029da:	f7fe f83f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe f83c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80029e4:	2050      	movs	r0, #80	; 0x50
 80029e6:	f7fe f839 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe f836 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80029f0:	2062      	movs	r0, #98	; 0x62
 80029f2:	f7fe f833 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe f830 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80029fc:	2078      	movs	r0, #120	; 0x78
 80029fe:	f7fe f82d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe f82a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a08:	2088      	movs	r0, #136	; 0x88
 8002a0a:	f7fe f827 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe f824 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002a14:	2097      	movs	r0, #151	; 0x97
 8002a16:	f7fe f821 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe f81e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002a20:	20a6      	movs	r0, #166	; 0xa6
 8002a22:	f7fe f81b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe f818 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002a2c:	20b7      	movs	r0, #183	; 0xb7
 8002a2e:	f7fe f815 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f812 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002a38:	20c2      	movs	r0, #194	; 0xc2
 8002a3a:	f7fe f80f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe f80c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002a44:	20c7      	movs	r0, #199	; 0xc7
 8002a46:	f7fe f809 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe f806 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002a50:	20d1      	movs	r0, #209	; 0xd1
 8002a52:	f7fe f803 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe f800 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002a5c:	20d5      	movs	r0, #213	; 0xd5
 8002a5e:	f7fd fffd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd fffa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002a68:	20dd      	movs	r0, #221	; 0xdd
 8002a6a:	f7fd fff7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fd fff4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a74:	20f3      	movs	r0, #243	; 0xf3
 8002a76:	f7fd fff1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fd ffee 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002a80:	20e4      	movs	r0, #228	; 0xe4
 8002a82:	f7fd ffc7 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fd ffe8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd ffe5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7fd ffe2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fd ffdf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f7fd ffdc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fd ffd9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002aaa:	202a      	movs	r0, #42	; 0x2a
 8002aac:	f7fd ffd6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fd ffd3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ab6:	203c      	movs	r0, #60	; 0x3c
 8002ab8:	f7fd ffd0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fd ffcd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002ac2:	204b      	movs	r0, #75	; 0x4b
 8002ac4:	f7fd ffca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd ffc7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002ace:	205d      	movs	r0, #93	; 0x5d
 8002ad0:	f7fd ffc4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd ffc1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002ada:	2074      	movs	r0, #116	; 0x74
 8002adc:	f7fd ffbe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fd ffbb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002ae6:	2084      	movs	r0, #132	; 0x84
 8002ae8:	f7fd ffb8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd ffb5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002af2:	2093      	movs	r0, #147	; 0x93
 8002af4:	f7fd ffb2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd ffaf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002afe:	20a2      	movs	r0, #162	; 0xa2
 8002b00:	f7fd ffac 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd ffa9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002b0a:	20b3      	movs	r0, #179	; 0xb3
 8002b0c:	f7fd ffa6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd ffa3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002b16:	20be      	movs	r0, #190	; 0xbe
 8002b18:	f7fd ffa0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd ff9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b22:	20c4      	movs	r0, #196	; 0xc4
 8002b24:	f7fd ff9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd ff97 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002b2e:	20cd      	movs	r0, #205	; 0xcd
 8002b30:	f7fd ff94 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd ff91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002b3a:	20d3      	movs	r0, #211	; 0xd3
 8002b3c:	f7fd ff8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd ff8b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002b46:	20dd      	movs	r0, #221	; 0xdd
 8002b48:	f7fd ff88 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd ff85 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b52:	20f3      	movs	r0, #243	; 0xf3
 8002b54:	f7fd ff82 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd ff7f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002b5e:	20e5      	movs	r0, #229	; 0xe5
 8002b60:	f7fd ff58 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd ff79 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fd ff76 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd ff73 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fd ff70 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7fd ff6d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fd ff6a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b88:	2029      	movs	r0, #41	; 0x29
 8002b8a:	f7fd ff67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fd ff64 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b94:	203c      	movs	r0, #60	; 0x3c
 8002b96:	f7fd ff61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd ff5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002ba0:	204b      	movs	r0, #75	; 0x4b
 8002ba2:	f7fd ff5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd ff58 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002bac:	205d      	movs	r0, #93	; 0x5d
 8002bae:	f7fd ff55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd ff52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002bb8:	2074      	movs	r0, #116	; 0x74
 8002bba:	f7fd ff4f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fd ff4c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002bc4:	2084      	movs	r0, #132	; 0x84
 8002bc6:	f7fd ff49 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fd ff46 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002bd0:	2093      	movs	r0, #147	; 0x93
 8002bd2:	f7fd ff43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd ff40 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002bdc:	20a2      	movs	r0, #162	; 0xa2
 8002bde:	f7fd ff3d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd ff3a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002be8:	20b3      	movs	r0, #179	; 0xb3
 8002bea:	f7fd ff37 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd ff34 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002bf4:	20be      	movs	r0, #190	; 0xbe
 8002bf6:	f7fd ff31 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd ff2e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c00:	20c4      	movs	r0, #196	; 0xc4
 8002c02:	f7fd ff2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd ff28 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002c0c:	20cd      	movs	r0, #205	; 0xcd
 8002c0e:	f7fd ff25 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fd ff22 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002c18:	20d3      	movs	r0, #211	; 0xd3
 8002c1a:	f7fd ff1f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd ff1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002c24:	20dc      	movs	r0, #220	; 0xdc
 8002c26:	f7fd ff19 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd ff16 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c30:	20f3      	movs	r0, #243	; 0xf3
 8002c32:	f7fd ff13 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fd ff10 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002c3c:	20e6      	movs	r0, #230	; 0xe6
 8002c3e:	f7fd fee9 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002c42:	2011      	movs	r0, #17
 8002c44:	f7fd ff0a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd ff07 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002c4e:	2034      	movs	r0, #52	; 0x34
 8002c50:	f7fd ff04 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd ff01 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002c5a:	2056      	movs	r0, #86	; 0x56
 8002c5c:	f7fd fefe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd fefb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c66:	2076      	movs	r0, #118	; 0x76
 8002c68:	f7fd fef8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd fef5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002c72:	2077      	movs	r0, #119	; 0x77
 8002c74:	f7fd fef2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd feef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002c7e:	2066      	movs	r0, #102	; 0x66
 8002c80:	f7fd feec 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fee9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002c8a:	2088      	movs	r0, #136	; 0x88
 8002c8c:	f7fd fee6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fd fee3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c96:	2099      	movs	r0, #153	; 0x99
 8002c98:	f7fd fee0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd fedd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002ca2:	20bb      	movs	r0, #187	; 0xbb
 8002ca4:	f7fd feda 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd fed7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cae:	2099      	movs	r0, #153	; 0x99
 8002cb0:	f7fd fed4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fd fed1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002cba:	2066      	movs	r0, #102	; 0x66
 8002cbc:	f7fd fece 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fecb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002cc6:	2055      	movs	r0, #85	; 0x55
 8002cc8:	f7fd fec8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fec5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002cd2:	2055      	movs	r0, #85	; 0x55
 8002cd4:	f7fd fec2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd febf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002cde:	2045      	movs	r0, #69	; 0x45
 8002ce0:	f7fd febc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd feb9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002cea:	2043      	movs	r0, #67	; 0x43
 8002cec:	f7fd feb6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd feb3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cf6:	2044      	movs	r0, #68	; 0x44
 8002cf8:	f7fd feb0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fead 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002d02:	20e7      	movs	r0, #231	; 0xe7
 8002d04:	f7fd fe86 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002d08:	2032      	movs	r0, #50	; 0x32
 8002d0a:	f7fd fea7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd fea4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002d14:	2055      	movs	r0, #85	; 0x55
 8002d16:	f7fd fea1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd fe9e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002d20:	2076      	movs	r0, #118	; 0x76
 8002d22:	f7fd fe9b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd fe98 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d2c:	2066      	movs	r0, #102	; 0x66
 8002d2e:	f7fd fe95 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fd fe92 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002d38:	2067      	movs	r0, #103	; 0x67
 8002d3a:	f7fd fe8f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd fe8c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002d44:	2067      	movs	r0, #103	; 0x67
 8002d46:	f7fd fe89 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fd fe86 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002d50:	2087      	movs	r0, #135	; 0x87
 8002d52:	f7fd fe83 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd fe80 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d5c:	2099      	movs	r0, #153	; 0x99
 8002d5e:	f7fd fe7d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd fe7a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002d68:	20bb      	movs	r0, #187	; 0xbb
 8002d6a:	f7fd fe77 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fd fe74 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d74:	2099      	movs	r0, #153	; 0x99
 8002d76:	f7fd fe71 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd fe6e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002d80:	2077      	movs	r0, #119	; 0x77
 8002d82:	f7fd fe6b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd fe68 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d8c:	2044      	movs	r0, #68	; 0x44
 8002d8e:	f7fd fe65 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd fe62 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002d98:	2056      	movs	r0, #86	; 0x56
 8002d9a:	f7fd fe5f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fe5c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002da4:	2023      	movs	r0, #35	; 0x23
 8002da6:	f7fd fe59 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fe56 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002db0:	2033      	movs	r0, #51	; 0x33
 8002db2:	f7fd fe53 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fe50 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002dbc:	2045      	movs	r0, #69	; 0x45
 8002dbe:	f7fd fe4d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fe4a 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002dc8:	20e8      	movs	r0, #232	; 0xe8
 8002dca:	f7fd fe23 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fd fe44 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fd fe41 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002dda:	2099      	movs	r0, #153	; 0x99
 8002ddc:	f7fd fe3e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd fe3b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002de6:	2087      	movs	r0, #135	; 0x87
 8002de8:	f7fd fe38 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fd fe35 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002df2:	2088      	movs	r0, #136	; 0x88
 8002df4:	f7fd fe32 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fd fe2f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002dfe:	2077      	movs	r0, #119	; 0x77
 8002e00:	f7fd fe2c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fe29 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e0a:	2066      	movs	r0, #102	; 0x66
 8002e0c:	f7fd fe26 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd fe23 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e16:	2088      	movs	r0, #136	; 0x88
 8002e18:	f7fd fe20 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fe1d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002e22:	20aa      	movs	r0, #170	; 0xaa
 8002e24:	f7fd fe1a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd fe17 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002e2e:	20bb      	movs	r0, #187	; 0xbb
 8002e30:	f7fd fe14 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fd fe11 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e3a:	2099      	movs	r0, #153	; 0x99
 8002e3c:	f7fd fe0e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fd fe0b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e46:	2066      	movs	r0, #102	; 0x66
 8002e48:	f7fd fe08 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fd fe05 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e52:	2055      	movs	r0, #85	; 0x55
 8002e54:	f7fd fe02 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fdff 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e5e:	2055      	movs	r0, #85	; 0x55
 8002e60:	f7fd fdfc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fdf9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e6a:	2044      	movs	r0, #68	; 0x44
 8002e6c:	f7fd fdf6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fdf3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e76:	2044      	movs	r0, #68	; 0x44
 8002e78:	f7fd fdf0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fded 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e82:	2055      	movs	r0, #85	; 0x55
 8002e84:	f7fd fdea 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fde7 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002e8e:	20e9      	movs	r0, #233	; 0xe9
 8002e90:	f7fd fdc0 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002e94:	20aa      	movs	r0, #170	; 0xaa
 8002e96:	f7fd fde1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fdde 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fddb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fd fdd8 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fdb1 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002eb2:	20aa      	movs	r0, #170	; 0xaa
 8002eb4:	f7fd fdd2 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002eb8:	20cf      	movs	r0, #207	; 0xcf
 8002eba:	f7fd fdab 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fdcc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd fdc9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd fdc6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fdc3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fdc0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd fdbd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fd fdba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd fdb7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fdb4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd fdb1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fdae 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fdab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fda8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fda5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd fda2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fd9f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fd fd9c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8002f24:	20f0      	movs	r0, #240	; 0xf0
 8002f26:	f7fd fd75 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7fd fd96 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002f30:	2050      	movs	r0, #80	; 0x50
 8002f32:	f7fd fd93 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fd fd90 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd fd8d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fd8a 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8002f48:	20f3      	movs	r0, #243	; 0xf3
 8002f4a:	f7fd fd63 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fd84 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8002f54:	20f9      	movs	r0, #249	; 0xf9
 8002f56:	f7fd fd5d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8002f5a:	2006      	movs	r0, #6
 8002f5c:	f7fd fd7e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002f60:	2010      	movs	r0, #16
 8002f62:	f7fd fd7b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f66:	2029      	movs	r0, #41	; 0x29
 8002f68:	f7fd fd78 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fd fd75 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8002f72:	203a      	movs	r0, #58	; 0x3a
 8002f74:	f7fd fd4e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8002f78:	2055      	movs	r0, #85	; 0x55
 8002f7a:	f7fd fd6f 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8002f7e:	2011      	movs	r0, #17
 8002f80:	f7fd fd48 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
 8002f86:	f003 fbaf 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0x29);
 8002f8a:	2029      	movs	r0, #41	; 0x29
 8002f8c:	f7fd fd42 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002f90:	2035      	movs	r0, #53	; 0x35
 8002f92:	f7fd fd3f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd fd60 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8002f9c:	2051      	movs	r0, #81	; 0x51
 8002f9e:	f7fd fd39 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8002fa2:	20ff      	movs	r0, #255	; 0xff
 8002fa4:	f7fd fd5a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8002fa8:	2053      	movs	r0, #83	; 0x53
 8002faa:	f7fd fd33 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8002fae:	202c      	movs	r0, #44	; 0x2c
 8002fb0:	f7fd fd54 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8002fb4:	2055      	movs	r0, #85	; 0x55
 8002fb6:	f7fd fd2d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8002fba:	2082      	movs	r0, #130	; 0x82
 8002fbc:	f7fd fd4e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8002fc0:	202c      	movs	r0, #44	; 0x2c
 8002fc2:	f7fd fd27 	bl	8000a14 <LCD_WR_REG>
 8002fc6:	f002 bca1 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <LCD_Init+0x1504>)
 8002fcc:	889b      	ldrh	r3, [r3, #4]
 8002fce:	f245 5210 	movw	r2, #21776	; 0x5510
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f040 8782 	bne.w	8003edc <LCD_Init+0x2404>
 8002fd8:	e002      	b.n	8002fe0 <LCD_Init+0x1508>
 8002fda:	bf00      	nop
 8002fdc:	200001b4 	.word	0x200001b4
		LCD_WriteReg(0xF000, 0x55);
 8002fe0:	2155      	movs	r1, #85	; 0x55
 8002fe2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002fe6:	f7fd fda1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8002fea:	21aa      	movs	r1, #170	; 0xaa
 8002fec:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002ff0:	f7fd fd9c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8002ff4:	2152      	movs	r1, #82	; 0x52
 8002ff6:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002ffa:	f7fd fd97 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8002ffe:	2108      	movs	r1, #8
 8003000:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003004:	f7fd fd92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003008:	2101      	movs	r1, #1
 800300a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800300e:	f7fd fd8d 	bl	8000b2c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003012:	210d      	movs	r1, #13
 8003014:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003018:	f7fd fd88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800301c:	210d      	movs	r1, #13
 800301e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003022:	f7fd fd83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003026:	210d      	movs	r1, #13
 8003028:	f24b 0002 	movw	r0, #45058	; 0xb002
 800302c:	f7fd fd7e 	bl	8000b2c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003030:	2134      	movs	r1, #52	; 0x34
 8003032:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003036:	f7fd fd79 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800303a:	2134      	movs	r1, #52	; 0x34
 800303c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003040:	f7fd fd74 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003044:	2134      	movs	r1, #52	; 0x34
 8003046:	f24b 6002 	movw	r0, #46594	; 0xb602
 800304a:	f7fd fd6f 	bl	8000b2c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800304e:	210d      	movs	r1, #13
 8003050:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003054:	f7fd fd6a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003058:	210d      	movs	r1, #13
 800305a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800305e:	f7fd fd65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003062:	210d      	movs	r1, #13
 8003064:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003068:	f7fd fd60 	bl	8000b2c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800306c:	2134      	movs	r1, #52	; 0x34
 800306e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003072:	f7fd fd5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003076:	2134      	movs	r1, #52	; 0x34
 8003078:	f24b 7001 	movw	r0, #46849	; 0xb701
 800307c:	f7fd fd56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003080:	2134      	movs	r1, #52	; 0x34
 8003082:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003086:	f7fd fd51 	bl	8000b2c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800308a:	2100      	movs	r1, #0
 800308c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003090:	f7fd fd4c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003094:	2100      	movs	r1, #0
 8003096:	f24b 2001 	movw	r0, #45569	; 0xb201
 800309a:	f7fd fd47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800309e:	2100      	movs	r1, #0
 80030a0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80030a4:	f7fd fd42 	bl	8000b2c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80030a8:	2124      	movs	r1, #36	; 0x24
 80030aa:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80030ae:	f7fd fd3d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80030b2:	2124      	movs	r1, #36	; 0x24
 80030b4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80030b8:	f7fd fd38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80030bc:	2124      	movs	r1, #36	; 0x24
 80030be:	f64b 0002 	movw	r0, #47106	; 0xb802
 80030c2:	f7fd fd33 	bl	8000b2c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80030c6:	2101      	movs	r1, #1
 80030c8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80030cc:	f7fd fd2e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80030d0:	210f      	movs	r1, #15
 80030d2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80030d6:	f7fd fd29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80030da:	210f      	movs	r1, #15
 80030dc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80030e0:	f7fd fd24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80030e4:	210f      	movs	r1, #15
 80030e6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80030ea:	f7fd fd1f 	bl	8000b2c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80030ee:	2134      	movs	r1, #52	; 0x34
 80030f0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80030f4:	f7fd fd1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80030f8:	2134      	movs	r1, #52	; 0x34
 80030fa:	f64b 1001 	movw	r0, #47361	; 0xb901
 80030fe:	f7fd fd15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003102:	2134      	movs	r1, #52	; 0x34
 8003104:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003108:	f7fd fd10 	bl	8000b2c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800310c:	2108      	movs	r1, #8
 800310e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003112:	f7fd fd0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003116:	2108      	movs	r1, #8
 8003118:	f24b 5001 	movw	r0, #46337	; 0xb501
 800311c:	f7fd fd06 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003120:	2108      	movs	r1, #8
 8003122:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003126:	f7fd fd01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800312a:	2103      	movs	r1, #3
 800312c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003130:	f7fd fcfc 	bl	8000b2c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003134:	2124      	movs	r1, #36	; 0x24
 8003136:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800313a:	f7fd fcf7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800313e:	2124      	movs	r1, #36	; 0x24
 8003140:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003144:	f7fd fcf2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003148:	2124      	movs	r1, #36	; 0x24
 800314a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800314e:	f7fd fced 	bl	8000b2c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003152:	2100      	movs	r1, #0
 8003154:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003158:	f7fd fce8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800315c:	2178      	movs	r1, #120	; 0x78
 800315e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003162:	f7fd fce3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003166:	2100      	movs	r1, #0
 8003168:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800316c:	f7fd fcde 	bl	8000b2c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003170:	2100      	movs	r1, #0
 8003172:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003176:	f7fd fcd9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800317a:	2178      	movs	r1, #120	; 0x78
 800317c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003180:	f7fd fcd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003184:	2100      	movs	r1, #0
 8003186:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800318a:	f7fd fccf 	bl	8000b2c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800318e:	2100      	movs	r1, #0
 8003190:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003194:	f7fd fcca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003198:	2164      	movs	r1, #100	; 0x64
 800319a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800319e:	f7fd fcc5 	bl	8000b2c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80031a2:	2100      	movs	r1, #0
 80031a4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80031a8:	f7fd fcc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80031ac:	2133      	movs	r1, #51	; 0x33
 80031ae:	f24d 1001 	movw	r0, #53505	; 0xd101
 80031b2:	f7fd fcbb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80031b6:	2100      	movs	r1, #0
 80031b8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80031bc:	f7fd fcb6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80031c0:	2134      	movs	r1, #52	; 0x34
 80031c2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80031c6:	f7fd fcb1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80031ca:	2100      	movs	r1, #0
 80031cc:	f24d 1004 	movw	r0, #53508	; 0xd104
 80031d0:	f7fd fcac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80031d4:	213a      	movs	r1, #58	; 0x3a
 80031d6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80031da:	f7fd fca7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80031de:	2100      	movs	r1, #0
 80031e0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80031e4:	f7fd fca2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80031e8:	214a      	movs	r1, #74	; 0x4a
 80031ea:	f24d 1007 	movw	r0, #53511	; 0xd107
 80031ee:	f7fd fc9d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80031f2:	2100      	movs	r1, #0
 80031f4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80031f8:	f7fd fc98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80031fc:	215c      	movs	r1, #92	; 0x5c
 80031fe:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003202:	f7fd fc93 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003206:	2100      	movs	r1, #0
 8003208:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800320c:	f7fd fc8e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003210:	2181      	movs	r1, #129	; 0x81
 8003212:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003216:	f7fd fc89 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800321a:	2100      	movs	r1, #0
 800321c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003220:	f7fd fc84 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003224:	21a6      	movs	r1, #166	; 0xa6
 8003226:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800322a:	f7fd fc7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800322e:	2100      	movs	r1, #0
 8003230:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003234:	f7fd fc7a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003238:	21e5      	movs	r1, #229	; 0xe5
 800323a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800323e:	f7fd fc75 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003242:	2101      	movs	r1, #1
 8003244:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003248:	f7fd fc70 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800324c:	2113      	movs	r1, #19
 800324e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003252:	f7fd fc6b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003256:	2101      	movs	r1, #1
 8003258:	f24d 1012 	movw	r0, #53522	; 0xd112
 800325c:	f7fd fc66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003260:	2154      	movs	r1, #84	; 0x54
 8003262:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003266:	f7fd fc61 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800326a:	2101      	movs	r1, #1
 800326c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003270:	f7fd fc5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003274:	2182      	movs	r1, #130	; 0x82
 8003276:	f24d 1015 	movw	r0, #53525	; 0xd115
 800327a:	f7fd fc57 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800327e:	2101      	movs	r1, #1
 8003280:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003284:	f7fd fc52 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003288:	21ca      	movs	r1, #202	; 0xca
 800328a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800328e:	f7fd fc4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003292:	2102      	movs	r1, #2
 8003294:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003298:	f7fd fc48 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800329c:	2100      	movs	r1, #0
 800329e:	f24d 1019 	movw	r0, #53529	; 0xd119
 80032a2:	f7fd fc43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80032a6:	2102      	movs	r1, #2
 80032a8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80032ac:	f7fd fc3e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80032b0:	2101      	movs	r1, #1
 80032b2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80032b6:	f7fd fc39 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80032ba:	2102      	movs	r1, #2
 80032bc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80032c0:	f7fd fc34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80032c4:	2134      	movs	r1, #52	; 0x34
 80032c6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80032ca:	f7fd fc2f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80032ce:	2102      	movs	r1, #2
 80032d0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80032d4:	f7fd fc2a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80032d8:	2167      	movs	r1, #103	; 0x67
 80032da:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80032de:	f7fd fc25 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80032e2:	2102      	movs	r1, #2
 80032e4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80032e8:	f7fd fc20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80032ec:	2184      	movs	r1, #132	; 0x84
 80032ee:	f24d 1021 	movw	r0, #53537	; 0xd121
 80032f2:	f7fd fc1b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80032f6:	2102      	movs	r1, #2
 80032f8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80032fc:	f7fd fc16 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003300:	21a4      	movs	r1, #164	; 0xa4
 8003302:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003306:	f7fd fc11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800330a:	2102      	movs	r1, #2
 800330c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003310:	f7fd fc0c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003314:	21b7      	movs	r1, #183	; 0xb7
 8003316:	f24d 1025 	movw	r0, #53541	; 0xd125
 800331a:	f7fd fc07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800331e:	2102      	movs	r1, #2
 8003320:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003324:	f7fd fc02 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003328:	21cf      	movs	r1, #207	; 0xcf
 800332a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800332e:	f7fd fbfd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003332:	2102      	movs	r1, #2
 8003334:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003338:	f7fd fbf8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800333c:	21de      	movs	r1, #222	; 0xde
 800333e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003342:	f7fd fbf3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003346:	2102      	movs	r1, #2
 8003348:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800334c:	f7fd fbee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003350:	21f2      	movs	r1, #242	; 0xf2
 8003352:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003356:	f7fd fbe9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800335a:	2102      	movs	r1, #2
 800335c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003360:	f7fd fbe4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003364:	21fe      	movs	r1, #254	; 0xfe
 8003366:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800336a:	f7fd fbdf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800336e:	2103      	movs	r1, #3
 8003370:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003374:	f7fd fbda 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003378:	2110      	movs	r1, #16
 800337a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800337e:	f7fd fbd5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003382:	2103      	movs	r1, #3
 8003384:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003388:	f7fd fbd0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800338c:	2133      	movs	r1, #51	; 0x33
 800338e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003392:	f7fd fbcb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003396:	2103      	movs	r1, #3
 8003398:	f24d 1032 	movw	r0, #53554	; 0xd132
 800339c:	f7fd fbc6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80033a0:	216d      	movs	r1, #109	; 0x6d
 80033a2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80033a6:	f7fd fbc1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80033aa:	2100      	movs	r1, #0
 80033ac:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80033b0:	f7fd fbbc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80033b4:	2133      	movs	r1, #51	; 0x33
 80033b6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80033ba:	f7fd fbb7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80033be:	2100      	movs	r1, #0
 80033c0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80033c4:	f7fd fbb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80033c8:	2134      	movs	r1, #52	; 0x34
 80033ca:	f24d 2003 	movw	r0, #53763	; 0xd203
 80033ce:	f7fd fbad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80033d2:	2100      	movs	r1, #0
 80033d4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80033d8:	f7fd fba8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80033dc:	213a      	movs	r1, #58	; 0x3a
 80033de:	f24d 2005 	movw	r0, #53765	; 0xd205
 80033e2:	f7fd fba3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80033e6:	2100      	movs	r1, #0
 80033e8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80033ec:	f7fd fb9e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80033f0:	214a      	movs	r1, #74	; 0x4a
 80033f2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80033f6:	f7fd fb99 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80033fa:	2100      	movs	r1, #0
 80033fc:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003400:	f7fd fb94 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003404:	215c      	movs	r1, #92	; 0x5c
 8003406:	f24d 2009 	movw	r0, #53769	; 0xd209
 800340a:	f7fd fb8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800340e:	2100      	movs	r1, #0
 8003410:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003414:	f7fd fb8a 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003418:	2181      	movs	r1, #129	; 0x81
 800341a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800341e:	f7fd fb85 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003422:	2100      	movs	r1, #0
 8003424:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003428:	f7fd fb80 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800342c:	21a6      	movs	r1, #166	; 0xa6
 800342e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003432:	f7fd fb7b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003436:	2100      	movs	r1, #0
 8003438:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800343c:	f7fd fb76 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003440:	21e5      	movs	r1, #229	; 0xe5
 8003442:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003446:	f7fd fb71 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800344a:	2101      	movs	r1, #1
 800344c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003450:	f7fd fb6c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003454:	2113      	movs	r1, #19
 8003456:	f24d 2011 	movw	r0, #53777	; 0xd211
 800345a:	f7fd fb67 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800345e:	2101      	movs	r1, #1
 8003460:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003464:	f7fd fb62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003468:	2154      	movs	r1, #84	; 0x54
 800346a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800346e:	f7fd fb5d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003472:	2101      	movs	r1, #1
 8003474:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003478:	f7fd fb58 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800347c:	2182      	movs	r1, #130	; 0x82
 800347e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003482:	f7fd fb53 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003486:	2101      	movs	r1, #1
 8003488:	f24d 2016 	movw	r0, #53782	; 0xd216
 800348c:	f7fd fb4e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003490:	21ca      	movs	r1, #202	; 0xca
 8003492:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003496:	f7fd fb49 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800349a:	2102      	movs	r1, #2
 800349c:	f24d 2018 	movw	r0, #53784	; 0xd218
 80034a0:	f7fd fb44 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80034a4:	2100      	movs	r1, #0
 80034a6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80034aa:	f7fd fb3f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80034ae:	2102      	movs	r1, #2
 80034b0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80034b4:	f7fd fb3a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80034b8:	2101      	movs	r1, #1
 80034ba:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80034be:	f7fd fb35 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80034c2:	2102      	movs	r1, #2
 80034c4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80034c8:	f7fd fb30 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80034cc:	2134      	movs	r1, #52	; 0x34
 80034ce:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80034d2:	f7fd fb2b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80034d6:	2102      	movs	r1, #2
 80034d8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80034dc:	f7fd fb26 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80034e0:	2167      	movs	r1, #103	; 0x67
 80034e2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80034e6:	f7fd fb21 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80034ea:	2102      	movs	r1, #2
 80034ec:	f24d 2020 	movw	r0, #53792	; 0xd220
 80034f0:	f7fd fb1c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80034f4:	2184      	movs	r1, #132	; 0x84
 80034f6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80034fa:	f7fd fb17 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80034fe:	2102      	movs	r1, #2
 8003500:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003504:	f7fd fb12 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003508:	21a4      	movs	r1, #164	; 0xa4
 800350a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800350e:	f7fd fb0d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003512:	2102      	movs	r1, #2
 8003514:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003518:	f7fd fb08 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800351c:	21b7      	movs	r1, #183	; 0xb7
 800351e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003522:	f7fd fb03 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003526:	2102      	movs	r1, #2
 8003528:	f24d 2026 	movw	r0, #53798	; 0xd226
 800352c:	f7fd fafe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003530:	21cf      	movs	r1, #207	; 0xcf
 8003532:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003536:	f7fd faf9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800353a:	2102      	movs	r1, #2
 800353c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003540:	f7fd faf4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003544:	21de      	movs	r1, #222	; 0xde
 8003546:	f24d 2029 	movw	r0, #53801	; 0xd229
 800354a:	f7fd faef 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800354e:	2102      	movs	r1, #2
 8003550:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003554:	f7fd faea 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003558:	21f2      	movs	r1, #242	; 0xf2
 800355a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800355e:	f7fd fae5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003562:	2102      	movs	r1, #2
 8003564:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003568:	f7fd fae0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800356c:	21fe      	movs	r1, #254	; 0xfe
 800356e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003572:	f7fd fadb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003576:	2103      	movs	r1, #3
 8003578:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800357c:	f7fd fad6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003580:	2110      	movs	r1, #16
 8003582:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003586:	f7fd fad1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800358a:	2103      	movs	r1, #3
 800358c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003590:	f7fd facc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003594:	2133      	movs	r1, #51	; 0x33
 8003596:	f24d 2031 	movw	r0, #53809	; 0xd231
 800359a:	f7fd fac7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800359e:	2103      	movs	r1, #3
 80035a0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80035a4:	f7fd fac2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80035a8:	216d      	movs	r1, #109	; 0x6d
 80035aa:	f24d 2033 	movw	r0, #53811	; 0xd233
 80035ae:	f7fd fabd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80035b2:	2100      	movs	r1, #0
 80035b4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80035b8:	f7fd fab8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80035bc:	2133      	movs	r1, #51	; 0x33
 80035be:	f24d 3001 	movw	r0, #54017	; 0xd301
 80035c2:	f7fd fab3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80035c6:	2100      	movs	r1, #0
 80035c8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80035cc:	f7fd faae 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80035d0:	2134      	movs	r1, #52	; 0x34
 80035d2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80035d6:	f7fd faa9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80035da:	2100      	movs	r1, #0
 80035dc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80035e0:	f7fd faa4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80035e4:	213a      	movs	r1, #58	; 0x3a
 80035e6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80035ea:	f7fd fa9f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80035ee:	2100      	movs	r1, #0
 80035f0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80035f4:	f7fd fa9a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80035f8:	214a      	movs	r1, #74	; 0x4a
 80035fa:	f24d 3007 	movw	r0, #54023	; 0xd307
 80035fe:	f7fd fa95 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003602:	2100      	movs	r1, #0
 8003604:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003608:	f7fd fa90 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800360c:	215c      	movs	r1, #92	; 0x5c
 800360e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003612:	f7fd fa8b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003616:	2100      	movs	r1, #0
 8003618:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800361c:	f7fd fa86 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003620:	2181      	movs	r1, #129	; 0x81
 8003622:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003626:	f7fd fa81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003630:	f7fd fa7c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003634:	21a6      	movs	r1, #166	; 0xa6
 8003636:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800363a:	f7fd fa77 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800363e:	2100      	movs	r1, #0
 8003640:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003644:	f7fd fa72 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003648:	21e5      	movs	r1, #229	; 0xe5
 800364a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800364e:	f7fd fa6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003652:	2101      	movs	r1, #1
 8003654:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003658:	f7fd fa68 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800365c:	2113      	movs	r1, #19
 800365e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003662:	f7fd fa63 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003666:	2101      	movs	r1, #1
 8003668:	f24d 3012 	movw	r0, #54034	; 0xd312
 800366c:	f7fd fa5e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003670:	2154      	movs	r1, #84	; 0x54
 8003672:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003676:	f7fd fa59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800367a:	2101      	movs	r1, #1
 800367c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003680:	f7fd fa54 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003684:	2182      	movs	r1, #130	; 0x82
 8003686:	f24d 3015 	movw	r0, #54037	; 0xd315
 800368a:	f7fd fa4f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800368e:	2101      	movs	r1, #1
 8003690:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003694:	f7fd fa4a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003698:	21ca      	movs	r1, #202	; 0xca
 800369a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800369e:	f7fd fa45 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80036a2:	2102      	movs	r1, #2
 80036a4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80036a8:	f7fd fa40 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80036ac:	2100      	movs	r1, #0
 80036ae:	f24d 3019 	movw	r0, #54041	; 0xd319
 80036b2:	f7fd fa3b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80036b6:	2102      	movs	r1, #2
 80036b8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80036bc:	f7fd fa36 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80036c0:	2101      	movs	r1, #1
 80036c2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80036c6:	f7fd fa31 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80036ca:	2102      	movs	r1, #2
 80036cc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80036d0:	f7fd fa2c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80036d4:	2134      	movs	r1, #52	; 0x34
 80036d6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80036da:	f7fd fa27 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80036de:	2102      	movs	r1, #2
 80036e0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80036e4:	f7fd fa22 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80036e8:	2167      	movs	r1, #103	; 0x67
 80036ea:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80036ee:	f7fd fa1d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80036f2:	2102      	movs	r1, #2
 80036f4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80036f8:	f7fd fa18 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80036fc:	2184      	movs	r1, #132	; 0x84
 80036fe:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003702:	f7fd fa13 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003706:	2102      	movs	r1, #2
 8003708:	f24d 3022 	movw	r0, #54050	; 0xd322
 800370c:	f7fd fa0e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003710:	21a4      	movs	r1, #164	; 0xa4
 8003712:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003716:	f7fd fa09 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 800371a:	2102      	movs	r1, #2
 800371c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003720:	f7fd fa04 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003724:	21b7      	movs	r1, #183	; 0xb7
 8003726:	f24d 3025 	movw	r0, #54053	; 0xd325
 800372a:	f7fd f9ff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800372e:	2102      	movs	r1, #2
 8003730:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003734:	f7fd f9fa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003738:	21cf      	movs	r1, #207	; 0xcf
 800373a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800373e:	f7fd f9f5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003742:	2102      	movs	r1, #2
 8003744:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003748:	f7fd f9f0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800374c:	21de      	movs	r1, #222	; 0xde
 800374e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003752:	f7fd f9eb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003756:	2102      	movs	r1, #2
 8003758:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800375c:	f7fd f9e6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003760:	21f2      	movs	r1, #242	; 0xf2
 8003762:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003766:	f7fd f9e1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800376a:	2102      	movs	r1, #2
 800376c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003770:	f7fd f9dc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003774:	21fe      	movs	r1, #254	; 0xfe
 8003776:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800377a:	f7fd f9d7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800377e:	2103      	movs	r1, #3
 8003780:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003784:	f7fd f9d2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003788:	2110      	movs	r1, #16
 800378a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800378e:	f7fd f9cd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003792:	2103      	movs	r1, #3
 8003794:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003798:	f7fd f9c8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800379c:	2133      	movs	r1, #51	; 0x33
 800379e:	f24d 3031 	movw	r0, #54065	; 0xd331
 80037a2:	f7fd f9c3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 80037a6:	2103      	movs	r1, #3
 80037a8:	f24d 3032 	movw	r0, #54066	; 0xd332
 80037ac:	f7fd f9be 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 80037b0:	216d      	movs	r1, #109	; 0x6d
 80037b2:	f24d 3033 	movw	r0, #54067	; 0xd333
 80037b6:	f7fd f9b9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 80037ba:	2100      	movs	r1, #0
 80037bc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80037c0:	f7fd f9b4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80037c4:	2133      	movs	r1, #51	; 0x33
 80037c6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80037ca:	f7fd f9af 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80037ce:	2100      	movs	r1, #0
 80037d0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80037d4:	f7fd f9aa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80037d8:	2134      	movs	r1, #52	; 0x34
 80037da:	f24d 4003 	movw	r0, #54275	; 0xd403
 80037de:	f7fd f9a5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80037e2:	2100      	movs	r1, #0
 80037e4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80037e8:	f7fd f9a0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80037ec:	213a      	movs	r1, #58	; 0x3a
 80037ee:	f24d 4005 	movw	r0, #54277	; 0xd405
 80037f2:	f7fd f99b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80037f6:	2100      	movs	r1, #0
 80037f8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80037fc:	f7fd f996 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003800:	214a      	movs	r1, #74	; 0x4a
 8003802:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003806:	f7fd f991 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 800380a:	2100      	movs	r1, #0
 800380c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003810:	f7fd f98c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003814:	215c      	movs	r1, #92	; 0x5c
 8003816:	f24d 4009 	movw	r0, #54281	; 0xd409
 800381a:	f7fd f987 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003824:	f7fd f982 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003828:	2181      	movs	r1, #129	; 0x81
 800382a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800382e:	f7fd f97d 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003832:	2100      	movs	r1, #0
 8003834:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003838:	f7fd f978 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800383c:	21a6      	movs	r1, #166	; 0xa6
 800383e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003842:	f7fd f973 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800384c:	f7fd f96e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003850:	21e5      	movs	r1, #229	; 0xe5
 8003852:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003856:	f7fd f969 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 800385a:	2101      	movs	r1, #1
 800385c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003860:	f7fd f964 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003864:	2113      	movs	r1, #19
 8003866:	f24d 4011 	movw	r0, #54289	; 0xd411
 800386a:	f7fd f95f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 800386e:	2101      	movs	r1, #1
 8003870:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003874:	f7fd f95a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003878:	2154      	movs	r1, #84	; 0x54
 800387a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800387e:	f7fd f955 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003882:	2101      	movs	r1, #1
 8003884:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003888:	f7fd f950 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 800388c:	2182      	movs	r1, #130	; 0x82
 800388e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003892:	f7fd f94b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003896:	2101      	movs	r1, #1
 8003898:	f24d 4016 	movw	r0, #54294	; 0xd416
 800389c:	f7fd f946 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 80038a0:	21ca      	movs	r1, #202	; 0xca
 80038a2:	f24d 4017 	movw	r0, #54295	; 0xd417
 80038a6:	f7fd f941 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 80038aa:	2102      	movs	r1, #2
 80038ac:	f24d 4018 	movw	r0, #54296	; 0xd418
 80038b0:	f7fd f93c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 80038b4:	2100      	movs	r1, #0
 80038b6:	f24d 4019 	movw	r0, #54297	; 0xd419
 80038ba:	f7fd f937 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 80038be:	2102      	movs	r1, #2
 80038c0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80038c4:	f7fd f932 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80038c8:	2101      	movs	r1, #1
 80038ca:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80038ce:	f7fd f92d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80038d2:	2102      	movs	r1, #2
 80038d4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80038d8:	f7fd f928 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80038dc:	2134      	movs	r1, #52	; 0x34
 80038de:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80038e2:	f7fd f923 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 80038e6:	2102      	movs	r1, #2
 80038e8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80038ec:	f7fd f91e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80038f0:	2167      	movs	r1, #103	; 0x67
 80038f2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80038f6:	f7fd f919 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80038fa:	2102      	movs	r1, #2
 80038fc:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003900:	f7fd f914 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003904:	2184      	movs	r1, #132	; 0x84
 8003906:	f24d 4021 	movw	r0, #54305	; 0xd421
 800390a:	f7fd f90f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 800390e:	2102      	movs	r1, #2
 8003910:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003914:	f7fd f90a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003918:	21a4      	movs	r1, #164	; 0xa4
 800391a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800391e:	f7fd f905 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003922:	2102      	movs	r1, #2
 8003924:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003928:	f7fd f900 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800392c:	21b7      	movs	r1, #183	; 0xb7
 800392e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003932:	f7fd f8fb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003936:	2102      	movs	r1, #2
 8003938:	f24d 4026 	movw	r0, #54310	; 0xd426
 800393c:	f7fd f8f6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003940:	21cf      	movs	r1, #207	; 0xcf
 8003942:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003946:	f7fd f8f1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003950:	f7fd f8ec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003954:	21de      	movs	r1, #222	; 0xde
 8003956:	f24d 4029 	movw	r0, #54313	; 0xd429
 800395a:	f7fd f8e7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003964:	f7fd f8e2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003968:	21f2      	movs	r1, #242	; 0xf2
 800396a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800396e:	f7fd f8dd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003978:	f7fd f8d8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800397c:	21fe      	movs	r1, #254	; 0xfe
 800397e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003982:	f7fd f8d3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003986:	2103      	movs	r1, #3
 8003988:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800398c:	f7fd f8ce 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003990:	2110      	movs	r1, #16
 8003992:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003996:	f7fd f8c9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800399a:	2103      	movs	r1, #3
 800399c:	f24d 4030 	movw	r0, #54320	; 0xd430
 80039a0:	f7fd f8c4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 80039a4:	2133      	movs	r1, #51	; 0x33
 80039a6:	f24d 4031 	movw	r0, #54321	; 0xd431
 80039aa:	f7fd f8bf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 80039ae:	2103      	movs	r1, #3
 80039b0:	f24d 4032 	movw	r0, #54322	; 0xd432
 80039b4:	f7fd f8ba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 80039b8:	216d      	movs	r1, #109	; 0x6d
 80039ba:	f24d 4033 	movw	r0, #54323	; 0xd433
 80039be:	f7fd f8b5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80039c2:	2100      	movs	r1, #0
 80039c4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80039c8:	f7fd f8b0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80039cc:	2133      	movs	r1, #51	; 0x33
 80039ce:	f24d 5001 	movw	r0, #54529	; 0xd501
 80039d2:	f7fd f8ab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80039d6:	2100      	movs	r1, #0
 80039d8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80039dc:	f7fd f8a6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 80039e0:	2134      	movs	r1, #52	; 0x34
 80039e2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80039e6:	f7fd f8a1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80039ea:	2100      	movs	r1, #0
 80039ec:	f24d 5004 	movw	r0, #54532	; 0xd504
 80039f0:	f7fd f89c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80039f4:	213a      	movs	r1, #58	; 0x3a
 80039f6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80039fa:	f7fd f897 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80039fe:	2100      	movs	r1, #0
 8003a00:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003a04:	f7fd f892 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003a08:	214a      	movs	r1, #74	; 0x4a
 8003a0a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003a0e:	f7fd f88d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003a12:	2100      	movs	r1, #0
 8003a14:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003a18:	f7fd f888 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003a1c:	215c      	movs	r1, #92	; 0x5c
 8003a1e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003a22:	f7fd f883 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003a26:	2100      	movs	r1, #0
 8003a28:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003a2c:	f7fd f87e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003a30:	2181      	movs	r1, #129	; 0x81
 8003a32:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003a36:	f7fd f879 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003a40:	f7fd f874 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003a44:	21a6      	movs	r1, #166	; 0xa6
 8003a46:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003a4a:	f7fd f86f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003a54:	f7fd f86a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003a58:	21e5      	movs	r1, #229	; 0xe5
 8003a5a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003a5e:	f7fd f865 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003a62:	2101      	movs	r1, #1
 8003a64:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003a68:	f7fd f860 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003a6c:	2113      	movs	r1, #19
 8003a6e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003a72:	f7fd f85b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003a76:	2101      	movs	r1, #1
 8003a78:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003a7c:	f7fd f856 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003a80:	2154      	movs	r1, #84	; 0x54
 8003a82:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003a86:	f7fd f851 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003a90:	f7fd f84c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003a94:	2182      	movs	r1, #130	; 0x82
 8003a96:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003a9a:	f7fd f847 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003aa4:	f7fd f842 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003aa8:	21ca      	movs	r1, #202	; 0xca
 8003aaa:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003aae:	f7fd f83d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003ab8:	f7fd f838 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003abc:	2100      	movs	r1, #0
 8003abe:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003ac2:	f7fd f833 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003acc:	f7fd f82e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ad6:	f7fd f829 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003ada:	2102      	movs	r1, #2
 8003adc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003ae0:	f7fd f824 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003ae4:	2134      	movs	r1, #52	; 0x34
 8003ae6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003aea:	f7fd f81f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003aee:	2102      	movs	r1, #2
 8003af0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003af4:	f7fd f81a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003af8:	2167      	movs	r1, #103	; 0x67
 8003afa:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003afe:	f7fd f815 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003b02:	2102      	movs	r1, #2
 8003b04:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003b08:	f7fd f810 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003b0c:	2184      	movs	r1, #132	; 0x84
 8003b0e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003b12:	f7fd f80b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003b16:	2102      	movs	r1, #2
 8003b18:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003b1c:	f7fd f806 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003b20:	21a4      	movs	r1, #164	; 0xa4
 8003b22:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003b26:	f7fd f801 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003b30:	f7fc fffc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003b34:	21b7      	movs	r1, #183	; 0xb7
 8003b36:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003b3a:	f7fc fff7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003b3e:	2102      	movs	r1, #2
 8003b40:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003b44:	f7fc fff2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003b48:	21cf      	movs	r1, #207	; 0xcf
 8003b4a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003b4e:	f7fc ffed 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003b58:	f7fc ffe8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003b5c:	21de      	movs	r1, #222	; 0xde
 8003b5e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003b62:	f7fc ffe3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003b6c:	f7fc ffde 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003b70:	21f2      	movs	r1, #242	; 0xf2
 8003b72:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003b76:	f7fc ffd9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003b80:	f7fc ffd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003b84:	21fe      	movs	r1, #254	; 0xfe
 8003b86:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003b8a:	f7fc ffcf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003b8e:	2103      	movs	r1, #3
 8003b90:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003b94:	f7fc ffca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003b98:	2110      	movs	r1, #16
 8003b9a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003b9e:	f7fc ffc5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003ba8:	f7fc ffc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003bac:	2133      	movs	r1, #51	; 0x33
 8003bae:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003bb2:	f7fc ffbb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003bbc:	f7fc ffb6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003bc0:	216d      	movs	r1, #109	; 0x6d
 8003bc2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003bc6:	f7fc ffb1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003bd0:	f7fc ffac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003bd4:	2133      	movs	r1, #51	; 0x33
 8003bd6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003bda:	f7fc ffa7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003bde:	2100      	movs	r1, #0
 8003be0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003be4:	f7fc ffa2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003be8:	2134      	movs	r1, #52	; 0x34
 8003bea:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003bee:	f7fc ff9d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003bf8:	f7fc ff98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003bfc:	213a      	movs	r1, #58	; 0x3a
 8003bfe:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003c02:	f7fc ff93 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003c06:	2100      	movs	r1, #0
 8003c08:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003c0c:	f7fc ff8e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003c10:	214a      	movs	r1, #74	; 0x4a
 8003c12:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003c16:	f7fc ff89 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003c20:	f7fc ff84 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003c24:	215c      	movs	r1, #92	; 0x5c
 8003c26:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003c2a:	f7fc ff7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003c34:	f7fc ff7a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003c38:	2181      	movs	r1, #129	; 0x81
 8003c3a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003c3e:	f7fc ff75 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003c42:	2100      	movs	r1, #0
 8003c44:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003c48:	f7fc ff70 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003c4c:	21a6      	movs	r1, #166	; 0xa6
 8003c4e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003c52:	f7fc ff6b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003c56:	2100      	movs	r1, #0
 8003c58:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003c5c:	f7fc ff66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003c60:	21e5      	movs	r1, #229	; 0xe5
 8003c62:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003c66:	f7fc ff61 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003c70:	f7fc ff5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003c74:	2113      	movs	r1, #19
 8003c76:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003c7a:	f7fc ff57 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003c84:	f7fc ff52 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003c88:	2154      	movs	r1, #84	; 0x54
 8003c8a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003c8e:	f7fc ff4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003c92:	2101      	movs	r1, #1
 8003c94:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003c98:	f7fc ff48 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003c9c:	2182      	movs	r1, #130	; 0x82
 8003c9e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003ca2:	f7fc ff43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003cac:	f7fc ff3e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003cb0:	21ca      	movs	r1, #202	; 0xca
 8003cb2:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003cb6:	f7fc ff39 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003cba:	2102      	movs	r1, #2
 8003cbc:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003cc0:	f7fc ff34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003cca:	f7fc ff2f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003cce:	2102      	movs	r1, #2
 8003cd0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003cd4:	f7fc ff2a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003cd8:	2101      	movs	r1, #1
 8003cda:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003cde:	f7fc ff25 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003ce8:	f7fc ff20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003cec:	2134      	movs	r1, #52	; 0x34
 8003cee:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003cf2:	f7fc ff1b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003cfc:	f7fc ff16 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003d00:	2167      	movs	r1, #103	; 0x67
 8003d02:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003d06:	f7fc ff11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003d10:	f7fc ff0c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003d14:	2184      	movs	r1, #132	; 0x84
 8003d16:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003d1a:	f7fc ff07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003d1e:	2102      	movs	r1, #2
 8003d20:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003d24:	f7fc ff02 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003d28:	21a4      	movs	r1, #164	; 0xa4
 8003d2a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003d2e:	f7fc fefd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003d32:	2102      	movs	r1, #2
 8003d34:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003d38:	f7fc fef8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003d3c:	21b7      	movs	r1, #183	; 0xb7
 8003d3e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003d42:	f7fc fef3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003d46:	2102      	movs	r1, #2
 8003d48:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003d4c:	f7fc feee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003d50:	21cf      	movs	r1, #207	; 0xcf
 8003d52:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003d56:	f7fc fee9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003d60:	f7fc fee4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003d64:	21de      	movs	r1, #222	; 0xde
 8003d66:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003d6a:	f7fc fedf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003d74:	f7fc feda 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003d78:	21f2      	movs	r1, #242	; 0xf2
 8003d7a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003d7e:	f7fc fed5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003d88:	f7fc fed0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003d8c:	21fe      	movs	r1, #254	; 0xfe
 8003d8e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003d92:	f7fc fecb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003d96:	2103      	movs	r1, #3
 8003d98:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003d9c:	f7fc fec6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003da0:	2110      	movs	r1, #16
 8003da2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003da6:	f7fc fec1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003daa:	2103      	movs	r1, #3
 8003dac:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003db0:	f7fc febc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003db4:	2133      	movs	r1, #51	; 0x33
 8003db6:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003dba:	f7fc feb7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003dc4:	f7fc feb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003dc8:	216d      	movs	r1, #109	; 0x6d
 8003dca:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003dce:	f7fc fead 	bl	8000b2c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003dd2:	2155      	movs	r1, #85	; 0x55
 8003dd4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003dd8:	f7fc fea8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003ddc:	21aa      	movs	r1, #170	; 0xaa
 8003dde:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003de2:	f7fc fea3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003de6:	2152      	movs	r1, #82	; 0x52
 8003de8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003dec:	f7fc fe9e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003df0:	2108      	movs	r1, #8
 8003df2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003df6:	f7fc fe99 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003e00:	f7fc fe94 	bl	8000b2c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003e04:	21cc      	movs	r1, #204	; 0xcc
 8003e06:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003e0a:	f7fc fe8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003e14:	f7fc fe8a 	bl	8000b2c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003e18:	2105      	movs	r1, #5
 8003e1a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003e1e:	f7fc fe85 	bl	8000b2c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003e22:	2170      	movs	r1, #112	; 0x70
 8003e24:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003e28:	f7fc fe80 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003e2c:	2170      	movs	r1, #112	; 0x70
 8003e2e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003e32:	f7fc fe7b 	bl	8000b2c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003e36:	2101      	movs	r1, #1
 8003e38:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003e3c:	f7fc fe76 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003e40:	2103      	movs	r1, #3
 8003e42:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003e46:	f7fc fe71 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003e50:	f7fc fe6c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003e54:	2103      	movs	r1, #3
 8003e56:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003e5a:	f7fc fe67 	bl	8000b2c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003e5e:	2102      	movs	r1, #2
 8003e60:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003e64:	f7fc fe62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003e6e:	f7fc fe5d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003e72:	2100      	movs	r1, #0
 8003e74:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003e78:	f7fc fe58 	bl	8000b2c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003e7c:	21d0      	movs	r1, #208	; 0xd0
 8003e7e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003e82:	f7fc fe53 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003e86:	2102      	movs	r1, #2
 8003e88:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003e8c:	f7fc fe4e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003e90:	2150      	movs	r1, #80	; 0x50
 8003e92:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003e96:	f7fc fe49 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003e9a:	2150      	movs	r1, #80	; 0x50
 8003e9c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003ea0:	f7fc fe44 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003ea4:	2150      	movs	r1, #80	; 0x50
 8003ea6:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003eaa:	f7fc fe3f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003eb4:	f7fc fe3a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003eb8:	2155      	movs	r1, #85	; 0x55
 8003eba:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003ebe:	f7fc fe35 	bl	8000b2c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003ec2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003ec6:	f7fc fda5 	bl	8000a14 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f002 fc0c 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8003ed0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003ed4:	f7fc fd9e 	bl	8000a14 <LCD_WR_REG>
 8003ed8:	f001 bd18 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8003edc:	4bec      	ldr	r3, [pc, #944]	; (8004290 <LCD_Init+0x27b8>)
 8003ede:	889b      	ldrh	r3, [r3, #4]
 8003ee0:	f249 3225 	movw	r2, #37669	; 0x9325
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f040 80d7 	bne.w	8004098 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8003eea:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003eee:	20e5      	movs	r0, #229	; 0xe5
 8003ef0:	f7fc fe1c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8003ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7fc fe17 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8003efe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003f02:	2002      	movs	r0, #2
 8003f04:	f7fc fe12 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8003f08:	f241 0130 	movw	r1, #4144	; 0x1030
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f7fc fe0d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8003f12:	2100      	movs	r1, #0
 8003f14:	2004      	movs	r0, #4
 8003f16:	f7fc fe09 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8003f1a:	f240 2102 	movw	r1, #514	; 0x202
 8003f1e:	2008      	movs	r0, #8
 8003f20:	f7fc fe04 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8003f24:	2100      	movs	r1, #0
 8003f26:	2009      	movs	r0, #9
 8003f28:	f7fc fe00 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	200a      	movs	r0, #10
 8003f30:	f7fc fdfc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8003f34:	2100      	movs	r1, #0
 8003f36:	200c      	movs	r0, #12
 8003f38:	f7fc fdf8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	200d      	movs	r0, #13
 8003f40:	f7fc fdf4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8003f44:	2100      	movs	r1, #0
 8003f46:	200f      	movs	r0, #15
 8003f48:	f7fc fdf0 	bl	8000b2c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	2010      	movs	r0, #16
 8003f50:	f7fc fdec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8003f54:	2107      	movs	r1, #7
 8003f56:	2011      	movs	r0, #17
 8003f58:	f7fc fde8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	2012      	movs	r0, #18
 8003f60:	f7fc fde4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8003f64:	2100      	movs	r1, #0
 8003f66:	2013      	movs	r0, #19
 8003f68:	f7fc fde0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	2007      	movs	r0, #7
 8003f70:	f7fc fddc 	bl	8000b2c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8003f74:	f241 6190 	movw	r1, #5776	; 0x1690
 8003f78:	2010      	movs	r0, #16
 8003f7a:	f7fc fdd7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8003f7e:	f240 2127 	movw	r1, #551	; 0x227
 8003f82:	2011      	movs	r0, #17
 8003f84:	f7fc fdd2 	bl	8000b2c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8003f88:	219d      	movs	r1, #157	; 0x9d
 8003f8a:	2012      	movs	r0, #18
 8003f8c:	f7fc fdce 	bl	8000b2c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8003f90:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8003f94:	2013      	movs	r0, #19
 8003f96:	f7fc fdc9 	bl	8000b2c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8003f9a:	2125      	movs	r1, #37	; 0x25
 8003f9c:	2029      	movs	r0, #41	; 0x29
 8003f9e:	f7fc fdc5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8003fa2:	210d      	movs	r1, #13
 8003fa4:	202b      	movs	r0, #43	; 0x2b
 8003fa6:	f7fc fdc1 	bl	8000b2c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8003faa:	2107      	movs	r1, #7
 8003fac:	2030      	movs	r0, #48	; 0x30
 8003fae:	f7fc fdbd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8003fb2:	f240 3103 	movw	r1, #771	; 0x303
 8003fb6:	2031      	movs	r0, #49	; 0x31
 8003fb8:	f7fc fdb8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8003fbc:	2103      	movs	r1, #3
 8003fbe:	2032      	movs	r0, #50	; 0x32
 8003fc0:	f7fc fdb4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8003fc4:	f240 2106 	movw	r1, #518	; 0x206
 8003fc8:	2035      	movs	r0, #53	; 0x35
 8003fca:	f7fc fdaf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8003fce:	2108      	movs	r1, #8
 8003fd0:	2036      	movs	r0, #54	; 0x36
 8003fd2:	f7fc fdab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8003fd6:	f240 4106 	movw	r1, #1030	; 0x406
 8003fda:	2037      	movs	r0, #55	; 0x37
 8003fdc:	f7fc fda6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8003fe0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003fe4:	2038      	movs	r0, #56	; 0x38
 8003fe6:	f7fc fda1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8003fea:	2107      	movs	r1, #7
 8003fec:	2039      	movs	r0, #57	; 0x39
 8003fee:	f7fc fd9d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8003ff2:	f240 6102 	movw	r1, #1538	; 0x602
 8003ff6:	203c      	movs	r0, #60	; 0x3c
 8003ff8:	f7fc fd98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8003ffc:	2108      	movs	r1, #8
 8003ffe:	203d      	movs	r0, #61	; 0x3d
 8004000:	f7fc fd94 	bl	8000b2c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004004:	2100      	movs	r1, #0
 8004006:	2050      	movs	r0, #80	; 0x50
 8004008:	f7fc fd90 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800400c:	21ef      	movs	r1, #239	; 0xef
 800400e:	2051      	movs	r0, #81	; 0x51
 8004010:	f7fc fd8c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004014:	2100      	movs	r1, #0
 8004016:	2052      	movs	r0, #82	; 0x52
 8004018:	f7fc fd88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800401c:	f240 113f 	movw	r1, #319	; 0x13f
 8004020:	2053      	movs	r0, #83	; 0x53
 8004022:	f7fc fd83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004026:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800402a:	2060      	movs	r0, #96	; 0x60
 800402c:	f7fc fd7e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004030:	2101      	movs	r1, #1
 8004032:	2061      	movs	r0, #97	; 0x61
 8004034:	f7fc fd7a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004038:	2100      	movs	r1, #0
 800403a:	206a      	movs	r0, #106	; 0x6a
 800403c:	f7fc fd76 	bl	8000b2c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004040:	2100      	movs	r1, #0
 8004042:	2080      	movs	r0, #128	; 0x80
 8004044:	f7fc fd72 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004048:	2100      	movs	r1, #0
 800404a:	2081      	movs	r0, #129	; 0x81
 800404c:	f7fc fd6e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004050:	2100      	movs	r1, #0
 8004052:	2082      	movs	r0, #130	; 0x82
 8004054:	f7fc fd6a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004058:	2100      	movs	r1, #0
 800405a:	2083      	movs	r0, #131	; 0x83
 800405c:	f7fc fd66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004060:	2100      	movs	r1, #0
 8004062:	2084      	movs	r0, #132	; 0x84
 8004064:	f7fc fd62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004068:	2100      	movs	r1, #0
 800406a:	2085      	movs	r0, #133	; 0x85
 800406c:	f7fc fd5e 	bl	8000b2c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004070:	2110      	movs	r1, #16
 8004072:	2090      	movs	r0, #144	; 0x90
 8004074:	f7fc fd5a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004078:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800407c:	2092      	movs	r0, #146	; 0x92
 800407e:	f7fc fd55 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004082:	f240 1133 	movw	r1, #307	; 0x133
 8004086:	2007      	movs	r0, #7
 8004088:	f7fc fd50 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800408c:	2122      	movs	r1, #34	; 0x22
 800408e:	2000      	movs	r0, #0
 8004090:	f7fc fd4c 	bl	8000b2c <LCD_WriteReg>
 8004094:	f001 bc3a 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004098:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <LCD_Init+0x27b8>)
 800409a:	889b      	ldrh	r3, [r3, #4]
 800409c:	f249 3228 	movw	r2, #37672	; 0x9328
 80040a0:	4293      	cmp	r3, r2
 80040a2:	f040 80f7 	bne.w	8004294 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80040a6:	f241 018f 	movw	r1, #4239	; 0x108f
 80040aa:	20ec      	movs	r0, #236	; 0xec
 80040ac:	f7fc fd3e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80040b0:	f241 2134 	movw	r1, #4660	; 0x1234
 80040b4:	20ef      	movs	r0, #239	; 0xef
 80040b6:	f7fc fd39 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80040ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040be:	2001      	movs	r0, #1
 80040c0:	f7fc fd34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80040c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80040c8:	2002      	movs	r0, #2
 80040ca:	f7fc fd2f 	bl	8000b2c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80040ce:	f241 0130 	movw	r1, #4144	; 0x1030
 80040d2:	2003      	movs	r0, #3
 80040d4:	f7fc fd2a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80040d8:	2100      	movs	r1, #0
 80040da:	2004      	movs	r0, #4
 80040dc:	f7fc fd26 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80040e0:	f240 2102 	movw	r1, #514	; 0x202
 80040e4:	2008      	movs	r0, #8
 80040e6:	f7fc fd21 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80040ea:	2100      	movs	r1, #0
 80040ec:	2009      	movs	r0, #9
 80040ee:	f7fc fd1d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80040f2:	2100      	movs	r1, #0
 80040f4:	200a      	movs	r0, #10
 80040f6:	f7fc fd19 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80040fa:	2101      	movs	r1, #1
 80040fc:	200c      	movs	r0, #12
 80040fe:	f7fc fd15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004102:	2100      	movs	r1, #0
 8004104:	200d      	movs	r0, #13
 8004106:	f7fc fd11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800410a:	2100      	movs	r1, #0
 800410c:	200f      	movs	r0, #15
 800410e:	f7fc fd0d 	bl	8000b2c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004112:	2100      	movs	r1, #0
 8004114:	2010      	movs	r0, #16
 8004116:	f7fc fd09 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800411a:	2107      	movs	r1, #7
 800411c:	2011      	movs	r0, #17
 800411e:	f7fc fd05 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004122:	2100      	movs	r1, #0
 8004124:	2012      	movs	r0, #18
 8004126:	f7fc fd01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800412a:	2100      	movs	r1, #0
 800412c:	2013      	movs	r0, #19
 800412e:	f7fc fcfd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004132:	2101      	movs	r1, #1
 8004134:	2007      	movs	r0, #7
 8004136:	f7fc fcf9 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800413a:	2032      	movs	r0, #50	; 0x32
 800413c:	f002 fad4 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004140:	f241 4190 	movw	r1, #5264	; 0x1490
 8004144:	2010      	movs	r0, #16
 8004146:	f7fc fcf1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800414a:	f240 2127 	movw	r1, #551	; 0x227
 800414e:	2011      	movs	r0, #17
 8004150:	f7fc fcec 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004154:	2032      	movs	r0, #50	; 0x32
 8004156:	f002 fac7 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800415a:	218a      	movs	r1, #138	; 0x8a
 800415c:	2012      	movs	r0, #18
 800415e:	f7fc fce5 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004162:	2032      	movs	r0, #50	; 0x32
 8004164:	f002 fac0 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004168:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800416c:	2013      	movs	r0, #19
 800416e:	f7fc fcdd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004172:	2106      	movs	r1, #6
 8004174:	2029      	movs	r0, #41	; 0x29
 8004176:	f7fc fcd9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800417a:	210d      	movs	r1, #13
 800417c:	202b      	movs	r0, #43	; 0x2b
 800417e:	f7fc fcd5 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004182:	2032      	movs	r0, #50	; 0x32
 8004184:	f002 fab0 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004188:	2100      	movs	r1, #0
 800418a:	2020      	movs	r0, #32
 800418c:	f7fc fcce 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004190:	2100      	movs	r1, #0
 8004192:	2021      	movs	r0, #33	; 0x21
 8004194:	f7fc fcca 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004198:	2032      	movs	r0, #50	; 0x32
 800419a:	f002 faa5 	bl	80066e8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800419e:	2100      	movs	r1, #0
 80041a0:	2030      	movs	r0, #48	; 0x30
 80041a2:	f7fc fcc3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80041a6:	f240 6104 	movw	r1, #1540	; 0x604
 80041aa:	2031      	movs	r0, #49	; 0x31
 80041ac:	f7fc fcbe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80041b0:	f240 3105 	movw	r1, #773	; 0x305
 80041b4:	2032      	movs	r0, #50	; 0x32
 80041b6:	f7fc fcb9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80041ba:	2100      	movs	r1, #0
 80041bc:	2035      	movs	r0, #53	; 0x35
 80041be:	f7fc fcb5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80041c2:	f640 4109 	movw	r1, #3081	; 0xc09
 80041c6:	2036      	movs	r0, #54	; 0x36
 80041c8:	f7fc fcb0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80041cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80041d0:	2037      	movs	r0, #55	; 0x37
 80041d2:	f7fc fcab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80041d6:	f240 3101 	movw	r1, #769	; 0x301
 80041da:	2038      	movs	r0, #56	; 0x38
 80041dc:	f7fc fca6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80041e0:	f240 7107 	movw	r1, #1799	; 0x707
 80041e4:	2039      	movs	r0, #57	; 0x39
 80041e6:	f7fc fca1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80041ea:	2100      	movs	r1, #0
 80041ec:	203c      	movs	r0, #60	; 0x3c
 80041ee:	f7fc fc9d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80041f2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80041f6:	203d      	movs	r0, #61	; 0x3d
 80041f8:	f7fc fc98 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 80041fc:	2032      	movs	r0, #50	; 0x32
 80041fe:	f002 fa73 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004202:	2100      	movs	r1, #0
 8004204:	2050      	movs	r0, #80	; 0x50
 8004206:	f7fc fc91 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800420a:	21ef      	movs	r1, #239	; 0xef
 800420c:	2051      	movs	r0, #81	; 0x51
 800420e:	f7fc fc8d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004212:	2100      	movs	r1, #0
 8004214:	2052      	movs	r0, #82	; 0x52
 8004216:	f7fc fc89 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800421a:	f240 113f 	movw	r1, #319	; 0x13f
 800421e:	2053      	movs	r0, #83	; 0x53
 8004220:	f7fc fc84 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004224:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004228:	2060      	movs	r0, #96	; 0x60
 800422a:	f7fc fc7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800422e:	2101      	movs	r1, #1
 8004230:	2061      	movs	r0, #97	; 0x61
 8004232:	f7fc fc7b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004236:	2100      	movs	r1, #0
 8004238:	206a      	movs	r0, #106	; 0x6a
 800423a:	f7fc fc77 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800423e:	2100      	movs	r1, #0
 8004240:	2080      	movs	r0, #128	; 0x80
 8004242:	f7fc fc73 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004246:	2100      	movs	r1, #0
 8004248:	2081      	movs	r0, #129	; 0x81
 800424a:	f7fc fc6f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800424e:	2100      	movs	r1, #0
 8004250:	2082      	movs	r0, #130	; 0x82
 8004252:	f7fc fc6b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004256:	2100      	movs	r1, #0
 8004258:	2083      	movs	r0, #131	; 0x83
 800425a:	f7fc fc67 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800425e:	2100      	movs	r1, #0
 8004260:	2084      	movs	r0, #132	; 0x84
 8004262:	f7fc fc63 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004266:	2100      	movs	r1, #0
 8004268:	2085      	movs	r0, #133	; 0x85
 800426a:	f7fc fc5f 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800426e:	2110      	movs	r1, #16
 8004270:	2090      	movs	r0, #144	; 0x90
 8004272:	f7fc fc5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004276:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800427a:	2092      	movs	r0, #146	; 0x92
 800427c:	f7fc fc56 	bl	8000b2c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004280:	f240 1133 	movw	r1, #307	; 0x133
 8004284:	2007      	movs	r0, #7
 8004286:	f7fc fc51 	bl	8000b2c <LCD_WriteReg>
 800428a:	f001 bb3f 	b.w	800590c <LCD_Init+0x3e34>
 800428e:	bf00      	nop
 8004290:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0x9320) //测试OK.
 8004294:	4bce      	ldr	r3, [pc, #824]	; (80045d0 <LCD_Init+0x2af8>)
 8004296:	889b      	ldrh	r3, [r3, #4]
 8004298:	f249 3220 	movw	r2, #37664	; 0x9320
 800429c:	4293      	cmp	r3, r2
 800429e:	f040 80ad 	bne.w	80043fc <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80042a2:	2100      	movs	r1, #0
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7fc fc41 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80042aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7fc fc3c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80042b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042b8:	2002      	movs	r0, #2
 80042ba:	f7fc fc37 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80042be:	f241 0130 	movw	r1, #4144	; 0x1030
 80042c2:	2003      	movs	r0, #3
 80042c4:	f7fc fc32 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80042c8:	2100      	movs	r1, #0
 80042ca:	2004      	movs	r0, #4
 80042cc:	f7fc fc2e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80042d0:	f240 2102 	movw	r1, #514	; 0x202
 80042d4:	2008      	movs	r0, #8
 80042d6:	f7fc fc29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80042da:	2100      	movs	r1, #0
 80042dc:	2009      	movs	r0, #9
 80042de:	f7fc fc25 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80042e2:	2100      	movs	r1, #0
 80042e4:	200a      	movs	r0, #10
 80042e6:	f7fc fc21 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80042ea:	2101      	movs	r1, #1
 80042ec:	200c      	movs	r0, #12
 80042ee:	f7fc fc1d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80042f2:	2100      	movs	r1, #0
 80042f4:	200d      	movs	r0, #13
 80042f6:	f7fc fc19 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80042fa:	2100      	movs	r1, #0
 80042fc:	200f      	movs	r0, #15
 80042fe:	f7fc fc15 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004302:	2032      	movs	r0, #50	; 0x32
 8004304:	f002 f9f0 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004308:	f240 1101 	movw	r1, #257	; 0x101
 800430c:	2007      	movs	r0, #7
 800430e:	f7fc fc0d 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004312:	2032      	movs	r0, #50	; 0x32
 8004314:	f002 f9e8 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004318:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800431c:	2010      	movs	r0, #16
 800431e:	f7fc fc05 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004322:	2107      	movs	r1, #7
 8004324:	2011      	movs	r0, #17
 8004326:	f7fc fc01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800432a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800432e:	2012      	movs	r0, #18
 8004330:	f7fc fbfc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004334:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004338:	2013      	movs	r0, #19
 800433a:	f7fc fbf7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800433e:	2100      	movs	r1, #0
 8004340:	2029      	movs	r0, #41	; 0x29
 8004342:	f7fc fbf3 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004346:	f244 0110 	movw	r1, #16400	; 0x4010
 800434a:	202b      	movs	r0, #43	; 0x2b
 800434c:	f7fc fbee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004350:	2100      	movs	r1, #0
 8004352:	2050      	movs	r0, #80	; 0x50
 8004354:	f7fc fbea 	bl	8000b2c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004358:	21ef      	movs	r1, #239	; 0xef
 800435a:	2051      	movs	r0, #81	; 0x51
 800435c:	f7fc fbe6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004360:	2100      	movs	r1, #0
 8004362:	2052      	movs	r0, #82	; 0x52
 8004364:	f7fc fbe2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004368:	f240 113f 	movw	r1, #319	; 0x13f
 800436c:	2053      	movs	r0, #83	; 0x53
 800436e:	f7fc fbdd 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004372:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004376:	2060      	movs	r0, #96	; 0x60
 8004378:	f7fc fbd8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800437c:	2101      	movs	r1, #1
 800437e:	2061      	movs	r0, #97	; 0x61
 8004380:	f7fc fbd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004384:	2100      	movs	r1, #0
 8004386:	206a      	movs	r0, #106	; 0x6a
 8004388:	f7fc fbd0 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800438c:	2100      	movs	r1, #0
 800438e:	2080      	movs	r0, #128	; 0x80
 8004390:	f7fc fbcc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004394:	2100      	movs	r1, #0
 8004396:	2081      	movs	r0, #129	; 0x81
 8004398:	f7fc fbc8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800439c:	2100      	movs	r1, #0
 800439e:	2082      	movs	r0, #130	; 0x82
 80043a0:	f7fc fbc4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80043a4:	2100      	movs	r1, #0
 80043a6:	2083      	movs	r0, #131	; 0x83
 80043a8:	f7fc fbc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80043ac:	2100      	movs	r1, #0
 80043ae:	2084      	movs	r0, #132	; 0x84
 80043b0:	f7fc fbbc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80043b4:	2100      	movs	r1, #0
 80043b6:	2085      	movs	r0, #133	; 0x85
 80043b8:	f7fc fbb8 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80043bc:	2110      	movs	r1, #16
 80043be:	2090      	movs	r0, #144	; 0x90
 80043c0:	f7fc fbb4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80043c4:	2100      	movs	r1, #0
 80043c6:	2092      	movs	r0, #146	; 0x92
 80043c8:	f7fc fbb0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80043cc:	2101      	movs	r1, #1
 80043ce:	2093      	movs	r0, #147	; 0x93
 80043d0:	f7fc fbac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80043d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80043d8:	2095      	movs	r0, #149	; 0x95
 80043da:	f7fc fba7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80043de:	2100      	movs	r1, #0
 80043e0:	2097      	movs	r0, #151	; 0x97
 80043e2:	f7fc fba3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80043e6:	2100      	movs	r1, #0
 80043e8:	2098      	movs	r0, #152	; 0x98
 80043ea:	f7fc fb9f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80043ee:	f240 1173 	movw	r1, #371	; 0x173
 80043f2:	2007      	movs	r0, #7
 80043f4:	f7fc fb9a 	bl	8000b2c <LCD_WriteReg>
 80043f8:	f001 ba88 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80043fc:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <LCD_Init+0x2af8>)
 80043fe:	889b      	ldrh	r3, [r3, #4]
 8004400:	f249 3231 	movw	r2, #37681	; 0x9331
 8004404:	4293      	cmp	r3, r2
 8004406:	f040 80e5 	bne.w	80045d4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800440a:	f241 0114 	movw	r1, #4116	; 0x1014
 800440e:	20e7      	movs	r0, #231	; 0xe7
 8004410:	f7fc fb8c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004418:	2001      	movs	r0, #1
 800441a:	f7fc fb87 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800441e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004422:	2002      	movs	r0, #2
 8004424:	f7fc fb82 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004428:	f241 0138 	movw	r1, #4152	; 0x1038
 800442c:	2003      	movs	r0, #3
 800442e:	f7fc fb7d 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004432:	f240 2102 	movw	r1, #514	; 0x202
 8004436:	2008      	movs	r0, #8
 8004438:	f7fc fb78 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800443c:	2100      	movs	r1, #0
 800443e:	2009      	movs	r0, #9
 8004440:	f7fc fb74 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004444:	2100      	movs	r1, #0
 8004446:	200a      	movs	r0, #10
 8004448:	f7fc fb70 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800444c:	2100      	movs	r1, #0
 800444e:	200c      	movs	r0, #12
 8004450:	f7fc fb6c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004454:	2100      	movs	r1, #0
 8004456:	200d      	movs	r0, #13
 8004458:	f7fc fb68 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800445c:	2100      	movs	r1, #0
 800445e:	200f      	movs	r0, #15
 8004460:	f7fc fb64 	bl	8000b2c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004464:	2100      	movs	r1, #0
 8004466:	2010      	movs	r0, #16
 8004468:	f7fc fb60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800446c:	2107      	movs	r1, #7
 800446e:	2011      	movs	r0, #17
 8004470:	f7fc fb5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004474:	2100      	movs	r1, #0
 8004476:	2012      	movs	r0, #18
 8004478:	f7fc fb58 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800447c:	2100      	movs	r1, #0
 800447e:	2013      	movs	r0, #19
 8004480:	f7fc fb54 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004484:	20c8      	movs	r0, #200	; 0xc8
 8004486:	f002 f92f 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800448a:	f241 6190 	movw	r1, #5776	; 0x1690
 800448e:	2010      	movs	r0, #16
 8004490:	f7fc fb4c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004494:	f240 2127 	movw	r1, #551	; 0x227
 8004498:	2011      	movs	r0, #17
 800449a:	f7fc fb47 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800449e:	2032      	movs	r0, #50	; 0x32
 80044a0:	f002 f922 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80044a4:	210c      	movs	r1, #12
 80044a6:	2012      	movs	r0, #18
 80044a8:	f7fc fb40 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80044ac:	2032      	movs	r0, #50	; 0x32
 80044ae:	f002 f91b 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80044b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044b6:	2013      	movs	r0, #19
 80044b8:	f7fc fb38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80044bc:	2111      	movs	r1, #17
 80044be:	2029      	movs	r0, #41	; 0x29
 80044c0:	f7fc fb34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80044c4:	210b      	movs	r1, #11
 80044c6:	202b      	movs	r0, #43	; 0x2b
 80044c8:	f7fc fb30 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80044cc:	2032      	movs	r0, #50	; 0x32
 80044ce:	f002 f90b 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80044d2:	2100      	movs	r1, #0
 80044d4:	2020      	movs	r0, #32
 80044d6:	f7fc fb29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80044da:	f240 113f 	movw	r1, #319	; 0x13f
 80044de:	2021      	movs	r0, #33	; 0x21
 80044e0:	f7fc fb24 	bl	8000b2c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80044e4:	2100      	movs	r1, #0
 80044e6:	2030      	movs	r0, #48	; 0x30
 80044e8:	f7fc fb20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80044ec:	f44f 7183 	mov.w	r1, #262	; 0x106
 80044f0:	2031      	movs	r0, #49	; 0x31
 80044f2:	f7fc fb1b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80044f6:	2100      	movs	r1, #0
 80044f8:	2032      	movs	r0, #50	; 0x32
 80044fa:	f7fc fb17 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80044fe:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004502:	2035      	movs	r0, #53	; 0x35
 8004504:	f7fc fb12 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004508:	f241 610a 	movw	r1, #5642	; 0x160a
 800450c:	2036      	movs	r0, #54	; 0x36
 800450e:	f7fc fb0d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004512:	f240 7107 	movw	r1, #1799	; 0x707
 8004516:	2037      	movs	r0, #55	; 0x37
 8004518:	f7fc fb08 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800451c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004520:	2038      	movs	r0, #56	; 0x38
 8004522:	f7fc fb03 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004526:	f240 7107 	movw	r1, #1799	; 0x707
 800452a:	2039      	movs	r0, #57	; 0x39
 800452c:	f7fc fafe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004530:	f240 4102 	movw	r1, #1026	; 0x402
 8004534:	203c      	movs	r0, #60	; 0x3c
 8004536:	f7fc faf9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800453a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800453e:	203d      	movs	r0, #61	; 0x3d
 8004540:	f7fc faf4 	bl	8000b2c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004544:	2100      	movs	r1, #0
 8004546:	2050      	movs	r0, #80	; 0x50
 8004548:	f7fc faf0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800454c:	21ef      	movs	r1, #239	; 0xef
 800454e:	2051      	movs	r0, #81	; 0x51
 8004550:	f7fc faec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004554:	2100      	movs	r1, #0
 8004556:	2052      	movs	r0, #82	; 0x52
 8004558:	f7fc fae8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800455c:	f240 113f 	movw	r1, #319	; 0x13f
 8004560:	2053      	movs	r0, #83	; 0x53
 8004562:	f7fc fae3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004566:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800456a:	2060      	movs	r0, #96	; 0x60
 800456c:	f7fc fade 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004570:	2101      	movs	r1, #1
 8004572:	2061      	movs	r0, #97	; 0x61
 8004574:	f7fc fada 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004578:	2100      	movs	r1, #0
 800457a:	206a      	movs	r0, #106	; 0x6a
 800457c:	f7fc fad6 	bl	8000b2c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004580:	2100      	movs	r1, #0
 8004582:	2080      	movs	r0, #128	; 0x80
 8004584:	f7fc fad2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004588:	2100      	movs	r1, #0
 800458a:	2081      	movs	r0, #129	; 0x81
 800458c:	f7fc face 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004590:	2100      	movs	r1, #0
 8004592:	2082      	movs	r0, #130	; 0x82
 8004594:	f7fc faca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004598:	2100      	movs	r1, #0
 800459a:	2083      	movs	r0, #131	; 0x83
 800459c:	f7fc fac6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045a0:	2100      	movs	r1, #0
 80045a2:	2084      	movs	r0, #132	; 0x84
 80045a4:	f7fc fac2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045a8:	2100      	movs	r1, #0
 80045aa:	2085      	movs	r0, #133	; 0x85
 80045ac:	f7fc fabe 	bl	8000b2c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80045b0:	2110      	movs	r1, #16
 80045b2:	2090      	movs	r0, #144	; 0x90
 80045b4:	f7fc faba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80045b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045bc:	2092      	movs	r0, #146	; 0x92
 80045be:	f7fc fab5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80045c2:	f240 1133 	movw	r1, #307	; 0x133
 80045c6:	2007      	movs	r0, #7
 80045c8:	f7fc fab0 	bl	8000b2c <LCD_WriteReg>
 80045cc:	f001 b99e 	b.w	800590c <LCD_Init+0x3e34>
 80045d0:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0x5408) {
 80045d4:	4be2      	ldr	r3, [pc, #904]	; (8004960 <LCD_Init+0x2e88>)
 80045d6:	889b      	ldrh	r3, [r3, #4]
 80045d8:	f245 4208 	movw	r2, #21512	; 0x5408
 80045dc:	4293      	cmp	r3, r2
 80045de:	f040 80a3 	bne.w	8004728 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80045e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fc faa0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80045ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045f0:	2002      	movs	r0, #2
 80045f2:	f7fc fa9b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80045f6:	f241 0130 	movw	r1, #4144	; 0x1030
 80045fa:	2003      	movs	r0, #3
 80045fc:	f7fc fa96 	bl	8000b2c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004600:	2100      	movs	r1, #0
 8004602:	2004      	movs	r0, #4
 8004604:	f7fc fa92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004608:	f240 2107 	movw	r1, #519	; 0x207
 800460c:	2008      	movs	r0, #8
 800460e:	f7fc fa8d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004612:	2100      	movs	r1, #0
 8004614:	2009      	movs	r0, #9
 8004616:	f7fc fa89 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800461a:	2100      	movs	r1, #0
 800461c:	200a      	movs	r0, #10
 800461e:	f7fc fa85 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004622:	2100      	movs	r1, #0
 8004624:	200c      	movs	r0, #12
 8004626:	f7fc fa81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800462a:	2100      	movs	r1, #0
 800462c:	200d      	movs	r0, #13
 800462e:	f7fc fa7d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004632:	2100      	movs	r1, #0
 8004634:	200f      	movs	r0, #15
 8004636:	f7fc fa79 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 800463a:	2014      	movs	r0, #20
 800463c:	f002 f854 	bl	80066e8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004640:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004644:	2010      	movs	r0, #16
 8004646:	f7fc fa71 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800464a:	2101      	movs	r1, #1
 800464c:	2011      	movs	r0, #17
 800464e:	f7fc fa6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004652:	2101      	movs	r1, #1
 8004654:	2017      	movs	r0, #23
 8004656:	f7fc fa69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800465a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800465e:	2012      	movs	r0, #18
 8004660:	f7fc fa64 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004668:	2013      	movs	r0, #19
 800466a:	f7fc fa5f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800466e:	2109      	movs	r1, #9
 8004670:	2029      	movs	r0, #41	; 0x29
 8004672:	f7fc fa5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004676:	2109      	movs	r1, #9
 8004678:	202a      	movs	r0, #42	; 0x2a
 800467a:	f7fc fa57 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800467e:	2100      	movs	r1, #0
 8004680:	20a4      	movs	r0, #164	; 0xa4
 8004682:	f7fc fa53 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004686:	2100      	movs	r1, #0
 8004688:	2050      	movs	r0, #80	; 0x50
 800468a:	f7fc fa4f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800468e:	21ef      	movs	r1, #239	; 0xef
 8004690:	2051      	movs	r0, #81	; 0x51
 8004692:	f7fc fa4b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004696:	2100      	movs	r1, #0
 8004698:	2052      	movs	r0, #82	; 0x52
 800469a:	f7fc fa47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800469e:	f240 113f 	movw	r1, #319	; 0x13f
 80046a2:	2053      	movs	r0, #83	; 0x53
 80046a4:	f7fc fa42 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80046a8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80046ac:	2060      	movs	r0, #96	; 0x60
 80046ae:	f7fc fa3d 	bl	8000b2c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80046b2:	2101      	movs	r1, #1
 80046b4:	2061      	movs	r0, #97	; 0x61
 80046b6:	f7fc fa39 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80046ba:	2100      	movs	r1, #0
 80046bc:	206a      	movs	r0, #106	; 0x6a
 80046be:	f7fc fa35 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80046c2:	2100      	movs	r1, #0
 80046c4:	2080      	movs	r0, #128	; 0x80
 80046c6:	f7fc fa31 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80046ca:	2100      	movs	r1, #0
 80046cc:	2081      	movs	r0, #129	; 0x81
 80046ce:	f7fc fa2d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80046d2:	2100      	movs	r1, #0
 80046d4:	2082      	movs	r0, #130	; 0x82
 80046d6:	f7fc fa29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80046da:	2100      	movs	r1, #0
 80046dc:	2083      	movs	r0, #131	; 0x83
 80046de:	f7fc fa25 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80046e2:	2100      	movs	r1, #0
 80046e4:	2084      	movs	r0, #132	; 0x84
 80046e6:	f7fc fa21 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80046ea:	2100      	movs	r1, #0
 80046ec:	2085      	movs	r0, #133	; 0x85
 80046ee:	f7fc fa1d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80046f2:	2113      	movs	r1, #19
 80046f4:	2090      	movs	r0, #144	; 0x90
 80046f6:	f7fc fa19 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80046fa:	2100      	movs	r1, #0
 80046fc:	2092      	movs	r0, #146	; 0x92
 80046fe:	f7fc fa15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004702:	2103      	movs	r1, #3
 8004704:	2093      	movs	r0, #147	; 0x93
 8004706:	f7fc fa11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 800470a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800470e:	2095      	movs	r0, #149	; 0x95
 8004710:	f7fc fa0c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004714:	f240 1173 	movw	r1, #371	; 0x173
 8004718:	2007      	movs	r0, #7
 800471a:	f7fc fa07 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800471e:	2032      	movs	r0, #50	; 0x32
 8004720:	f001 ffe2 	bl	80066e8 <HAL_Delay>
 8004724:	f001 b8f2 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004728:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <LCD_Init+0x2e88>)
 800472a:	889b      	ldrh	r3, [r3, #4]
 800472c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004730:	4293      	cmp	r3, r2
 8004732:	f040 8117 	bne.w	8004964 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004736:	2100      	movs	r1, #0
 8004738:	2007      	movs	r0, #7
 800473a:	f7fc f9f7 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800473e:	2032      	movs	r0, #50	; 0x32
 8004740:	f001 ffd2 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004744:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004748:	2012      	movs	r0, #18
 800474a:	f7fc f9ef 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800474e:	2101      	movs	r1, #1
 8004750:	20a4      	movs	r0, #164	; 0xa4
 8004752:	f7fc f9eb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004756:	210f      	movs	r1, #15
 8004758:	2008      	movs	r0, #8
 800475a:	f7fc f9e7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800475e:	2108      	movs	r1, #8
 8004760:	200a      	movs	r0, #10
 8004762:	f7fc f9e3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004766:	2108      	movs	r1, #8
 8004768:	200d      	movs	r0, #13
 800476a:	f7fc f9df 	bl	8000b2c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800476e:	f240 7107 	movw	r1, #1799	; 0x707
 8004772:	2030      	movs	r0, #48	; 0x30
 8004774:	f7fc f9da 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004778:	2107      	movs	r1, #7
 800477a:	2031      	movs	r0, #49	; 0x31
 800477c:	f7fc f9d6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004780:	f240 6103 	movw	r1, #1539	; 0x603
 8004784:	2032      	movs	r0, #50	; 0x32
 8004786:	f7fc f9d1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800478a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800478e:	2033      	movs	r0, #51	; 0x33
 8004790:	f7fc f9cc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004794:	f240 2102 	movw	r1, #514	; 0x202
 8004798:	2034      	movs	r0, #52	; 0x34
 800479a:	f7fc f9c7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800479e:	2102      	movs	r1, #2
 80047a0:	2035      	movs	r0, #53	; 0x35
 80047a2:	f7fc f9c3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 80047a6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80047aa:	2036      	movs	r0, #54	; 0x36
 80047ac:	f7fc f9be 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 80047b0:	f240 7107 	movw	r1, #1799	; 0x707
 80047b4:	2037      	movs	r0, #55	; 0x37
 80047b6:	f7fc f9b9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 80047ba:	2100      	movs	r1, #0
 80047bc:	2038      	movs	r0, #56	; 0x38
 80047be:	f7fc f9b5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80047c2:	2100      	movs	r1, #0
 80047c4:	2039      	movs	r0, #57	; 0x39
 80047c6:	f7fc f9b1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80047ca:	f240 7107 	movw	r1, #1799	; 0x707
 80047ce:	203a      	movs	r0, #58	; 0x3a
 80047d0:	f7fc f9ac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80047d4:	2100      	movs	r1, #0
 80047d6:	203b      	movs	r0, #59	; 0x3b
 80047d8:	f7fc f9a8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80047dc:	2107      	movs	r1, #7
 80047de:	203c      	movs	r0, #60	; 0x3c
 80047e0:	f7fc f9a4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80047e4:	2100      	movs	r1, #0
 80047e6:	203d      	movs	r0, #61	; 0x3d
 80047e8:	f7fc f9a0 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 80047ec:	2032      	movs	r0, #50	; 0x32
 80047ee:	f001 ff7b 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80047f2:	2101      	movs	r1, #1
 80047f4:	2007      	movs	r0, #7
 80047f6:	f7fc f999 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80047fa:	2101      	movs	r1, #1
 80047fc:	2017      	movs	r0, #23
 80047fe:	f7fc f995 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004802:	2032      	movs	r0, #50	; 0x32
 8004804:	f001 ff70 	bl	80066e8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004808:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800480c:	2010      	movs	r0, #16
 800480e:	f7fc f98d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004812:	f240 2117 	movw	r1, #535	; 0x217
 8004816:	2011      	movs	r0, #17
 8004818:	f7fc f988 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800481c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004820:	2012      	movs	r0, #18
 8004822:	f7fc f983 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004826:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800482a:	2013      	movs	r0, #19
 800482c:	f7fc f97e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004830:	2100      	movs	r1, #0
 8004832:	202a      	movs	r0, #42	; 0x2a
 8004834:	f7fc f97a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004838:	210a      	movs	r1, #10
 800483a:	2029      	movs	r0, #41	; 0x29
 800483c:	f7fc f976 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004840:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004844:	2012      	movs	r0, #18
 8004846:	f7fc f971 	bl	8000b2c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800484a:	2100      	movs	r1, #0
 800484c:	2050      	movs	r0, #80	; 0x50
 800484e:	f7fc f96d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004852:	21ef      	movs	r1, #239	; 0xef
 8004854:	2051      	movs	r0, #81	; 0x51
 8004856:	f7fc f969 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800485a:	2100      	movs	r1, #0
 800485c:	2052      	movs	r0, #82	; 0x52
 800485e:	f7fc f965 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004862:	f240 113f 	movw	r1, #319	; 0x13f
 8004866:	2053      	movs	r0, #83	; 0x53
 8004868:	f7fc f960 	bl	8000b2c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 800486c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004870:	2060      	movs	r0, #96	; 0x60
 8004872:	f7fc f95b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004876:	2101      	movs	r1, #1
 8004878:	2061      	movs	r0, #97	; 0x61
 800487a:	f7fc f957 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800487e:	2100      	movs	r1, #0
 8004880:	206a      	movs	r0, #106	; 0x6a
 8004882:	f7fc f953 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2080      	movs	r0, #128	; 0x80
 800488a:	f7fc f94f 	bl	8000b2c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 800488e:	2100      	movs	r1, #0
 8004890:	2081      	movs	r0, #129	; 0x81
 8004892:	f7fc f94b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004896:	2100      	movs	r1, #0
 8004898:	2082      	movs	r0, #130	; 0x82
 800489a:	f7fc f947 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800489e:	2100      	movs	r1, #0
 80048a0:	2083      	movs	r0, #131	; 0x83
 80048a2:	f7fc f943 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048a6:	2100      	movs	r1, #0
 80048a8:	2084      	movs	r0, #132	; 0x84
 80048aa:	f7fc f93f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80048ae:	2100      	movs	r1, #0
 80048b0:	2085      	movs	r0, #133	; 0x85
 80048b2:	f7fc f93b 	bl	8000b2c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 80048b6:	2113      	movs	r1, #19
 80048b8:	2090      	movs	r0, #144	; 0x90
 80048ba:	f7fc f937 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80048be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80048c2:	2092      	movs	r0, #146	; 0x92
 80048c4:	f7fc f932 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80048c8:	2105      	movs	r1, #5
 80048ca:	2093      	movs	r0, #147	; 0x93
 80048cc:	f7fc f92e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80048d0:	2100      	movs	r1, #0
 80048d2:	2095      	movs	r0, #149	; 0x95
 80048d4:	f7fc f92a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80048d8:	2100      	movs	r1, #0
 80048da:	2097      	movs	r0, #151	; 0x97
 80048dc:	f7fc f926 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 80048e0:	2100      	movs	r1, #0
 80048e2:	2098      	movs	r0, #152	; 0x98
 80048e4:	f7fc f922 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80048e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ec:	2001      	movs	r0, #1
 80048ee:	f7fc f91d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80048f2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048f6:	2002      	movs	r0, #2
 80048f8:	f7fc f918 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80048fc:	f241 0138 	movw	r1, #4152	; 0x1038
 8004900:	2003      	movs	r0, #3
 8004902:	f7fc f913 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2004      	movs	r0, #4
 800490a:	f7fc f90f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800490e:	2100      	movs	r1, #0
 8004910:	200c      	movs	r0, #12
 8004912:	f7fc f90b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004916:	2100      	movs	r1, #0
 8004918:	200f      	movs	r0, #15
 800491a:	f7fc f907 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 800491e:	2100      	movs	r1, #0
 8004920:	2020      	movs	r0, #32
 8004922:	f7fc f903 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004926:	2100      	movs	r1, #0
 8004928:	2021      	movs	r0, #33	; 0x21
 800492a:	f7fc f8ff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800492e:	2121      	movs	r1, #33	; 0x21
 8004930:	2007      	movs	r0, #7
 8004932:	f7fc f8fb 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004936:	2014      	movs	r0, #20
 8004938:	f001 fed6 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800493c:	2161      	movs	r1, #97	; 0x61
 800493e:	2007      	movs	r0, #7
 8004940:	f7fc f8f4 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004944:	2014      	movs	r0, #20
 8004946:	f001 fecf 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 800494a:	f240 1173 	movw	r1, #371	; 0x173
 800494e:	2007      	movs	r0, #7
 8004950:	f7fc f8ec 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004954:	2014      	movs	r0, #20
 8004956:	f001 fec7 	bl	80066e8 <HAL_Delay>
 800495a:	f000 bfd7 	b.w	800590c <LCD_Init+0x3e34>
 800495e:	bf00      	nop
 8004960:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0xB505) {
 8004964:	4bf0      	ldr	r3, [pc, #960]	; (8004d28 <LCD_Init+0x3250>)
 8004966:	889b      	ldrh	r3, [r3, #4]
 8004968:	f24b 5205 	movw	r2, #46341	; 0xb505
 800496c:	4293      	cmp	r3, r2
 800496e:	f040 8103 	bne.w	8004b78 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004972:	2100      	movs	r1, #0
 8004974:	2000      	movs	r0, #0
 8004976:	f7fc f8d9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800497a:	2100      	movs	r1, #0
 800497c:	2000      	movs	r0, #0
 800497e:	f7fc f8d5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004982:	2100      	movs	r1, #0
 8004984:	2000      	movs	r0, #0
 8004986:	f7fc f8d1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800498a:	2100      	movs	r1, #0
 800498c:	2000      	movs	r0, #0
 800498e:	f7fc f8cd 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004992:	2101      	movs	r1, #1
 8004994:	20a4      	movs	r0, #164	; 0xa4
 8004996:	f7fc f8c9 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 800499a:	2014      	movs	r0, #20
 800499c:	f001 fea4 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80049a0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049a4:	2060      	movs	r0, #96	; 0x60
 80049a6:	f7fc f8c1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80049aa:	f240 2102 	movw	r1, #514	; 0x202
 80049ae:	2008      	movs	r0, #8
 80049b0:	f7fc f8bc 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 80049b4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80049b8:	2030      	movs	r0, #48	; 0x30
 80049ba:	f7fc f8b7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 80049be:	f243 7115 	movw	r1, #14101	; 0x3715
 80049c2:	2031      	movs	r0, #49	; 0x31
 80049c4:	f7fc f8b2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80049c8:	f240 6104 	movw	r1, #1540	; 0x604
 80049cc:	2032      	movs	r0, #50	; 0x32
 80049ce:	f7fc f8ad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80049d2:	f640 6116 	movw	r1, #3606	; 0xe16
 80049d6:	2033      	movs	r0, #51	; 0x33
 80049d8:	f7fc f8a8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80049dc:	f242 2111 	movw	r1, #8721	; 0x2211
 80049e0:	2034      	movs	r0, #52	; 0x34
 80049e2:	f7fc f8a3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 80049e6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80049ea:	2035      	movs	r0, #53	; 0x35
 80049ec:	f7fc f89e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80049f0:	f248 5107 	movw	r1, #34055	; 0x8507
 80049f4:	2036      	movs	r0, #54	; 0x36
 80049f6:	f7fc f899 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80049fa:	f241 4107 	movw	r1, #5127	; 0x1407
 80049fe:	2037      	movs	r0, #55	; 0x37
 8004a00:	f7fc f894 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004a04:	f241 4103 	movw	r1, #5123	; 0x1403
 8004a08:	2038      	movs	r0, #56	; 0x38
 8004a0a:	f7fc f88f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004a0e:	2120      	movs	r1, #32
 8004a10:	2039      	movs	r0, #57	; 0x39
 8004a12:	f7fc f88b 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004a16:	211a      	movs	r1, #26
 8004a18:	2090      	movs	r0, #144	; 0x90
 8004a1a:	f7fc f887 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2010      	movs	r0, #16
 8004a22:	f7fc f883 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004a26:	2107      	movs	r1, #7
 8004a28:	2011      	movs	r0, #17
 8004a2a:	f7fc f87f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2012      	movs	r0, #18
 8004a32:	f7fc f87b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004a36:	2100      	movs	r1, #0
 8004a38:	2013      	movs	r0, #19
 8004a3a:	f7fc f877 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004a3e:	2014      	movs	r0, #20
 8004a40:	f001 fe52 	bl	80066e8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004a44:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f7fc f86f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004a4e:	f240 1137 	movw	r1, #311	; 0x137
 8004a52:	2011      	movs	r0, #17
 8004a54:	f7fc f86a 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004a58:	2014      	movs	r0, #20
 8004a5a:	f001 fe45 	bl	80066e8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004a5e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004a62:	2012      	movs	r0, #18
 8004a64:	f7fc f862 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004a68:	2014      	movs	r0, #20
 8004a6a:	f001 fe3d 	bl	80066e8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004a6e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004a72:	2013      	movs	r0, #19
 8004a74:	f7fc f85a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	202a      	movs	r0, #42	; 0x2a
 8004a7c:	f7fc f856 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004a80:	2148      	movs	r1, #72	; 0x48
 8004a82:	2029      	movs	r0, #41	; 0x29
 8004a84:	f7fc f852 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004a88:	2014      	movs	r0, #20
 8004a8a:	f001 fe2d 	bl	80066e8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fc f84a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004a98:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f7fc f845 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004aa2:	f241 0138 	movw	r1, #4152	; 0x1038
 8004aa6:	2003      	movs	r0, #3
 8004aa8:	f7fc f840 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004aac:	f240 2102 	movw	r1, #514	; 0x202
 8004ab0:	2008      	movs	r0, #8
 8004ab2:	f7fc f83b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	200a      	movs	r0, #10
 8004aba:	f7fc f837 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004abe:	2100      	movs	r1, #0
 8004ac0:	200c      	movs	r0, #12
 8004ac2:	f7fc f833 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	200d      	movs	r0, #13
 8004aca:	f7fc f82f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004ace:	2130      	movs	r1, #48	; 0x30
 8004ad0:	200e      	movs	r0, #14
 8004ad2:	f7fc f82b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2050      	movs	r0, #80	; 0x50
 8004ada:	f7fc f827 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004ade:	21ef      	movs	r1, #239	; 0xef
 8004ae0:	2051      	movs	r0, #81	; 0x51
 8004ae2:	f7fc f823 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2052      	movs	r0, #82	; 0x52
 8004aea:	f7fc f81f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004aee:	f240 113f 	movw	r1, #319	; 0x13f
 8004af2:	2053      	movs	r0, #83	; 0x53
 8004af4:	f7fc f81a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004af8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004afc:	2060      	movs	r0, #96	; 0x60
 8004afe:	f7fc f815 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004b02:	2101      	movs	r1, #1
 8004b04:	2061      	movs	r0, #97	; 0x61
 8004b06:	f7fc f811 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	206a      	movs	r0, #106	; 0x6a
 8004b0e:	f7fc f80d 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004b12:	2111      	movs	r1, #17
 8004b14:	2090      	movs	r0, #144	; 0x90
 8004b16:	f7fc f809 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004b1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b1e:	2092      	movs	r0, #146	; 0x92
 8004b20:	f7fc f804 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004b24:	f240 4102 	movw	r1, #1026	; 0x402
 8004b28:	2093      	movs	r0, #147	; 0x93
 8004b2a:	f7fb ffff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004b2e:	2102      	movs	r1, #2
 8004b30:	2094      	movs	r0, #148	; 0x94
 8004b32:	f7fb fffb 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004b36:	2014      	movs	r0, #20
 8004b38:	f001 fdd6 	bl	80066e8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	2007      	movs	r0, #7
 8004b40:	f7fb fff4 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004b44:	2014      	movs	r0, #20
 8004b46:	f001 fdcf 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004b4a:	2161      	movs	r1, #97	; 0x61
 8004b4c:	2007      	movs	r0, #7
 8004b4e:	f7fb ffed 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004b52:	f240 1173 	movw	r1, #371	; 0x173
 8004b56:	2007      	movs	r0, #7
 8004b58:	f7fb ffe8 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	2020      	movs	r0, #32
 8004b60:	f7fb ffe4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004b64:	2100      	movs	r1, #0
 8004b66:	2021      	movs	r0, #33	; 0x21
 8004b68:	f7fb ffe0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004b6c:	2122      	movs	r1, #34	; 0x22
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fb ffdc 	bl	8000b2c <LCD_WriteReg>
 8004b74:	f000 beca 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004b78:	4b6b      	ldr	r3, [pc, #428]	; (8004d28 <LCD_Init+0x3250>)
 8004b7a:	889b      	ldrh	r3, [r3, #4]
 8004b7c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004b80:	4293      	cmp	r3, r2
 8004b82:	f040 80d3 	bne.w	8004d2c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004b86:	2100      	movs	r1, #0
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7fb ffcf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7fb ffcb 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004b96:	2014      	movs	r0, #20
 8004b98:	f001 fda6 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7fb ffc4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fb ffc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bac:	2100      	movs	r1, #0
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7fb ffbc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fb ffb8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	20a4      	movs	r0, #164	; 0xa4
 8004bc0:	f7fb ffb4 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004bc4:	2014      	movs	r0, #20
 8004bc6:	f001 fd8f 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004bca:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bce:	2060      	movs	r0, #96	; 0x60
 8004bd0:	f7fb ffac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004bd4:	f640 0106 	movw	r1, #2054	; 0x806
 8004bd8:	2008      	movs	r0, #8
 8004bda:	f7fb ffa7 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004bde:	f240 7103 	movw	r1, #1795	; 0x703
 8004be2:	2030      	movs	r0, #48	; 0x30
 8004be4:	f7fb ffa2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004be8:	2101      	movs	r1, #1
 8004bea:	2031      	movs	r0, #49	; 0x31
 8004bec:	f7fb ff9e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	2032      	movs	r0, #50	; 0x32
 8004bf4:	f7fb ff9a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004bf8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004bfc:	2033      	movs	r0, #51	; 0x33
 8004bfe:	f7fb ff95 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004c02:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c06:	2034      	movs	r0, #52	; 0x34
 8004c08:	f7fb ff90 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004c0c:	f240 1103 	movw	r1, #259	; 0x103
 8004c10:	2035      	movs	r0, #53	; 0x35
 8004c12:	f7fb ff8b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004c16:	211f      	movs	r1, #31
 8004c18:	2036      	movs	r0, #54	; 0x36
 8004c1a:	f7fb ff87 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004c1e:	f240 7103 	movw	r1, #1795	; 0x703
 8004c22:	2037      	movs	r0, #55	; 0x37
 8004c24:	f7fb ff82 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2038      	movs	r0, #56	; 0x38
 8004c2c:	f7fb ff7e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004c30:	2104      	movs	r1, #4
 8004c32:	2039      	movs	r0, #57	; 0x39
 8004c34:	f7fb ff7a 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004c38:	2115      	movs	r1, #21
 8004c3a:	2090      	movs	r0, #144	; 0x90
 8004c3c:	f7fb ff76 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004c40:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004c44:	2010      	movs	r0, #16
 8004c46:	f7fb ff71 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004c4a:	f240 2147 	movw	r1, #583	; 0x247
 8004c4e:	2011      	movs	r0, #17
 8004c50:	f7fb ff6c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004c54:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004c58:	2012      	movs	r0, #18
 8004c5a:	f7fb ff67 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004c5e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004c62:	2013      	movs	r0, #19
 8004c64:	f7fb ff62 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(120);
 8004c68:	2078      	movs	r0, #120	; 0x78
 8004c6a:	f001 fd3d 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c72:	2001      	movs	r0, #1
 8004c74:	f7fb ff5a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fb ff55 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004c82:	f241 0130 	movw	r1, #4144	; 0x1030
 8004c86:	2003      	movs	r0, #3
 8004c88:	f7fb ff50 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004c8c:	2108      	movs	r1, #8
 8004c8e:	200a      	movs	r0, #10
 8004c90:	f7fb ff4c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c94:	2100      	movs	r1, #0
 8004c96:	200c      	movs	r0, #12
 8004c98:	f7fb ff48 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	200e      	movs	r0, #14
 8004ca0:	f7fb ff44 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	200f      	movs	r0, #15
 8004ca8:	f7fb ff40 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004cac:	2100      	movs	r1, #0
 8004cae:	2020      	movs	r0, #32
 8004cb0:	f7fb ff3c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2021      	movs	r0, #33	; 0x21
 8004cb8:	f7fb ff38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004cbc:	213d      	movs	r1, #61	; 0x3d
 8004cbe:	202a      	movs	r0, #42	; 0x2a
 8004cc0:	f7fb ff34 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004cc4:	2014      	movs	r0, #20
 8004cc6:	f001 fd0f 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004cca:	212d      	movs	r1, #45	; 0x2d
 8004ccc:	2029      	movs	r0, #41	; 0x29
 8004cce:	f7fb ff2d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2050      	movs	r0, #80	; 0x50
 8004cd6:	f7fb ff29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004cda:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004cde:	2051      	movs	r0, #81	; 0x51
 8004ce0:	f7fb ff24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2052      	movs	r0, #82	; 0x52
 8004ce8:	f7fb ff20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004cec:	f240 113f 	movw	r1, #319	; 0x13f
 8004cf0:	2053      	movs	r0, #83	; 0x53
 8004cf2:	f7fb ff1b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2061      	movs	r0, #97	; 0x61
 8004cfa:	f7fb ff17 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	206a      	movs	r0, #106	; 0x6a
 8004d02:	f7fb ff13 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d0a:	2092      	movs	r0, #146	; 0x92
 8004d0c:	f7fb ff0e 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004d10:	2105      	movs	r1, #5
 8004d12:	2093      	movs	r0, #147	; 0x93
 8004d14:	f7fb ff0a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d1c:	2007      	movs	r0, #7
 8004d1e:	f7fb ff05 	bl	8000b2c <LCD_WriteReg>
 8004d22:	f000 bdf3 	b.w	800590c <LCD_Init+0x3e34>
 8004d26:	bf00      	nop
 8004d28:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004d2c:	4bc2      	ldr	r3, [pc, #776]	; (8005038 <LCD_Init+0x3560>)
 8004d2e:	889b      	ldrh	r3, [r3, #4]
 8004d30:	f648 1289 	movw	r2, #35209	; 0x8989
 8004d34:	4293      	cmp	r3, r2
 8004d36:	f040 80bc 	bne.w	8004eb2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f7fb fef5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004d42:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004d46:	2003      	movs	r0, #3
 8004d48:	f7fb fef0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	200c      	movs	r0, #12
 8004d50:	f7fb feec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004d54:	f640 010c 	movw	r1, #2060	; 0x80c
 8004d58:	200d      	movs	r0, #13
 8004d5a:	f7fb fee7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004d5e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004d62:	200e      	movs	r0, #14
 8004d64:	f7fb fee2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004d68:	21b0      	movs	r1, #176	; 0xb0
 8004d6a:	201e      	movs	r0, #30
 8004d6c:	f7fb fede 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004d70:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7fb fed9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004d7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d7e:	2002      	movs	r0, #2
 8004d80:	f7fb fed4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004d84:	2100      	movs	r1, #0
 8004d86:	2010      	movs	r0, #16
 8004d88:	f7fb fed0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004d8c:	f246 0178 	movw	r1, #24696	; 0x6078
 8004d90:	2011      	movs	r0, #17
 8004d92:	f7fb fecb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004d96:	2100      	movs	r1, #0
 8004d98:	2005      	movs	r0, #5
 8004d9a:	f7fb fec7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2006      	movs	r0, #6
 8004da2:	f7fb fec3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004da6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004daa:	2016      	movs	r0, #22
 8004dac:	f7fb febe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004db0:	2103      	movs	r1, #3
 8004db2:	2017      	movs	r0, #23
 8004db4:	f7fb feba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004db8:	f240 2133 	movw	r1, #563	; 0x233
 8004dbc:	2007      	movs	r0, #7
 8004dbe:	f7fb feb5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	200b      	movs	r0, #11
 8004dc6:	f7fb feb1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004dca:	2100      	movs	r1, #0
 8004dcc:	200f      	movs	r0, #15
 8004dce:	f7fb fead 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2041      	movs	r0, #65	; 0x41
 8004dd6:	f7fb fea9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	2042      	movs	r0, #66	; 0x42
 8004dde:	f7fb fea5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004de2:	2100      	movs	r1, #0
 8004de4:	2048      	movs	r0, #72	; 0x48
 8004de6:	f7fb fea1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004dea:	f240 113f 	movw	r1, #319	; 0x13f
 8004dee:	2049      	movs	r0, #73	; 0x49
 8004df0:	f7fb fe9c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004df4:	2100      	movs	r1, #0
 8004df6:	204a      	movs	r0, #74	; 0x4a
 8004df8:	f7fb fe98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	204b      	movs	r0, #75	; 0x4b
 8004e00:	f7fb fe94 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004e04:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004e08:	2044      	movs	r0, #68	; 0x44
 8004e0a:	f7fb fe8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2045      	movs	r0, #69	; 0x45
 8004e12:	f7fb fe8b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004e16:	f240 113f 	movw	r1, #319	; 0x13f
 8004e1a:	2046      	movs	r0, #70	; 0x46
 8004e1c:	f7fb fe86 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004e20:	f240 7107 	movw	r1, #1799	; 0x707
 8004e24:	2030      	movs	r0, #48	; 0x30
 8004e26:	f7fb fe81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004e2a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e2e:	2031      	movs	r0, #49	; 0x31
 8004e30:	f7fb fe7c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004e34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e38:	2032      	movs	r0, #50	; 0x32
 8004e3a:	f7fb fe77 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004e3e:	f240 5102 	movw	r1, #1282	; 0x502
 8004e42:	2033      	movs	r0, #51	; 0x33
 8004e44:	f7fb fe72 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004e48:	f240 5107 	movw	r1, #1287	; 0x507
 8004e4c:	2034      	movs	r0, #52	; 0x34
 8004e4e:	f7fb fe6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004e52:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e56:	2035      	movs	r0, #53	; 0x35
 8004e58:	f7fb fe68 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004e5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e60:	2036      	movs	r0, #54	; 0x36
 8004e62:	f7fb fe63 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004e66:	f240 5102 	movw	r1, #1282	; 0x502
 8004e6a:	2037      	movs	r0, #55	; 0x37
 8004e6c:	f7fb fe5e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004e70:	f240 3102 	movw	r1, #770	; 0x302
 8004e74:	203a      	movs	r0, #58	; 0x3a
 8004e76:	f7fb fe59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004e7a:	f240 3102 	movw	r1, #770	; 0x302
 8004e7e:	203b      	movs	r0, #59	; 0x3b
 8004e80:	f7fb fe54 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004e84:	2100      	movs	r1, #0
 8004e86:	2023      	movs	r0, #35	; 0x23
 8004e88:	f7fb fe50 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	2024      	movs	r0, #36	; 0x24
 8004e90:	f7fb fe4c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e98:	2025      	movs	r0, #37	; 0x25
 8004e9a:	f7fb fe47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	204f      	movs	r0, #79	; 0x4f
 8004ea2:	f7fb fe43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	204e      	movs	r0, #78	; 0x4e
 8004eaa:	f7fb fe3f 	bl	8000b2c <LCD_WriteReg>
 8004eae:	f000 bd2d 	b.w	800590c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004eb2:	4b61      	ldr	r3, [pc, #388]	; (8005038 <LCD_Init+0x3560>)
 8004eb4:	889b      	ldrh	r3, [r3, #4]
 8004eb6:	f244 5231 	movw	r2, #17713	; 0x4531
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	f040 80be 	bne.w	800503c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fb fe32 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8004ec8:	200a      	movs	r0, #10
 8004eca:	f001 fc0d 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8004ece:	f241 6128 	movw	r1, #5672	; 0x1628
 8004ed2:	2010      	movs	r0, #16
 8004ed4:	f7fb fe2a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8004ed8:	210e      	movs	r1, #14
 8004eda:	2012      	movs	r0, #18
 8004edc:	f7fb fe26 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8004ee0:	f640 2139 	movw	r1, #2617	; 0xa39
 8004ee4:	2013      	movs	r0, #19
 8004ee6:	f7fb fe21 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8004eea:	200a      	movs	r0, #10
 8004eec:	f001 fbfc 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	2011      	movs	r0, #17
 8004ef4:	f7fb fe1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8004ef8:	2150      	movs	r1, #80	; 0x50
 8004efa:	2015      	movs	r0, #21
 8004efc:	f7fb fe16 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8004f00:	200a      	movs	r0, #10
 8004f02:	f001 fbf1 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8004f06:	211e      	movs	r1, #30
 8004f08:	2012      	movs	r0, #18
 8004f0a:	f7fb fe0f 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8004f0e:	200a      	movs	r0, #10
 8004f10:	f001 fbea 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8004f14:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004f18:	2010      	movs	r0, #16
 8004f1a:	f7fb fe07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8004f1e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004f22:	2013      	movs	r0, #19
 8004f24:	f7fb fe02 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8004f28:	200a      	movs	r0, #10
 8004f2a:	f001 fbdd 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8004f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fb fdfa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8004f38:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fb fdf5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8004f42:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7fb fdf0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8004f4c:	f240 2102 	movw	r1, #514	; 0x202
 8004f50:	2008      	movs	r0, #8
 8004f52:	f7fb fdeb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8004f56:	2108      	movs	r1, #8
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fb fde7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2030      	movs	r0, #48	; 0x30
 8004f62:	f7fb fde3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8004f66:	f240 4102 	movw	r1, #1026	; 0x402
 8004f6a:	2031      	movs	r0, #49	; 0x31
 8004f6c:	f7fb fdde 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8004f70:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004f74:	2032      	movs	r0, #50	; 0x32
 8004f76:	f7fb fdd9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8004f7a:	f240 5103 	movw	r1, #1283	; 0x503
 8004f7e:	2033      	movs	r0, #51	; 0x33
 8004f80:	f7fb fdd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8004f84:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004f88:	2034      	movs	r0, #52	; 0x34
 8004f8a:	f7fb fdcf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8004f8e:	f240 3101 	movw	r1, #769	; 0x301
 8004f92:	2035      	movs	r0, #53	; 0x35
 8004f94:	f7fb fdca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8004f98:	f240 7107 	movw	r1, #1799	; 0x707
 8004f9c:	2036      	movs	r0, #54	; 0x36
 8004f9e:	f7fb fdc5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8004fa2:	f240 3105 	movw	r1, #773	; 0x305
 8004fa6:	2037      	movs	r0, #55	; 0x37
 8004fa8:	f7fb fdc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8004fac:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004fb0:	2038      	movs	r0, #56	; 0x38
 8004fb2:	f7fb fdbb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8004fb6:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004fba:	2039      	movs	r0, #57	; 0x39
 8004fbc:	f7fb fdb6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	2041      	movs	r0, #65	; 0x41
 8004fc4:	f7fb fdb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8004fc8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fcc:	2060      	movs	r0, #96	; 0x60
 8004fce:	f7fb fdad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	2061      	movs	r0, #97	; 0x61
 8004fd6:	f7fb fda9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8004fda:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004fde:	2090      	movs	r0, #144	; 0x90
 8004fe0:	f7fb fda4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8004fe4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004fe8:	2092      	movs	r0, #146	; 0x92
 8004fea:	f7fb fd9f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8004fee:	2104      	movs	r1, #4
 8004ff0:	2093      	movs	r0, #147	; 0x93
 8004ff2:	f7fb fd9b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8004ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ffa:	20a0      	movs	r0, #160	; 0xa0
 8004ffc:	f7fb fd96 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005000:	2101      	movs	r1, #1
 8005002:	2007      	movs	r0, #7
 8005004:	f7fb fd92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005008:	2121      	movs	r1, #33	; 0x21
 800500a:	2007      	movs	r0, #7
 800500c:	f7fb fd8e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005010:	2123      	movs	r1, #35	; 0x23
 8005012:	2007      	movs	r0, #7
 8005014:	f7fb fd8a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005018:	2133      	movs	r1, #51	; 0x33
 800501a:	2007      	movs	r0, #7
 800501c:	f7fb fd86 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005020:	f240 1133 	movw	r1, #307	; 0x133
 8005024:	2007      	movs	r0, #7
 8005026:	f7fb fd81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800502a:	2100      	movs	r1, #0
 800502c:	20a0      	movs	r0, #160	; 0xa0
 800502e:	f7fb fd7d 	bl	8000b2c <LCD_WriteReg>
 8005032:	f000 bc6b 	b.w	800590c <LCD_Init+0x3e34>
 8005036:	bf00      	nop
 8005038:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0x4535) {
 800503c:	4b5b      	ldr	r3, [pc, #364]	; (80051ac <LCD_Init+0x36d4>)
 800503e:	889b      	ldrh	r3, [r3, #4]
 8005040:	f244 5235 	movw	r2, #17717	; 0x4535
 8005044:	4293      	cmp	r3, r2
 8005046:	f040 80b3 	bne.w	80051b0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800504a:	2130      	movs	r1, #48	; 0x30
 800504c:	2015      	movs	r0, #21
 800504e:	f7fb fd6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005052:	2110      	movs	r1, #16
 8005054:	209a      	movs	r0, #154	; 0x9a
 8005056:	f7fb fd69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800505a:	2120      	movs	r1, #32
 800505c:	2011      	movs	r0, #17
 800505e:	f7fb fd65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005062:	f243 4128 	movw	r1, #13352	; 0x3428
 8005066:	2010      	movs	r0, #16
 8005068:	f7fb fd60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800506c:	2102      	movs	r1, #2
 800506e:	2012      	movs	r0, #18
 8005070:	f7fb fd5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005074:	f241 0138 	movw	r1, #4152	; 0x1038
 8005078:	2013      	movs	r0, #19
 800507a:	f7fb fd57 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(40);
 800507e:	2028      	movs	r0, #40	; 0x28
 8005080:	f001 fb32 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005084:	2112      	movs	r1, #18
 8005086:	2012      	movs	r0, #18
 8005088:	f7fb fd50 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(40);
 800508c:	2028      	movs	r0, #40	; 0x28
 800508e:	f001 fb2b 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005092:	f243 4120 	movw	r1, #13344	; 0x3420
 8005096:	2010      	movs	r0, #16
 8005098:	f7fb fd48 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800509c:	f243 0138 	movw	r1, #12344	; 0x3038
 80050a0:	2013      	movs	r0, #19
 80050a2:	f7fb fd43 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(70);
 80050a6:	2046      	movs	r0, #70	; 0x46
 80050a8:	f001 fb1e 	bl	80066e8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80050ac:	2100      	movs	r1, #0
 80050ae:	2030      	movs	r0, #48	; 0x30
 80050b0:	f7fb fd3c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80050b4:	f240 4102 	movw	r1, #1026	; 0x402
 80050b8:	2031      	movs	r0, #49	; 0x31
 80050ba:	f7fb fd37 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80050be:	f240 3107 	movw	r1, #775	; 0x307
 80050c2:	2032      	movs	r0, #50	; 0x32
 80050c4:	f7fb fd32 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80050c8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80050cc:	2033      	movs	r0, #51	; 0x33
 80050ce:	f7fb fd2d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80050d2:	2104      	movs	r1, #4
 80050d4:	2034      	movs	r0, #52	; 0x34
 80050d6:	f7fb fd29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80050da:	f240 4101 	movw	r1, #1025	; 0x401
 80050de:	2035      	movs	r0, #53	; 0x35
 80050e0:	f7fb fd24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80050e4:	f240 7107 	movw	r1, #1799	; 0x707
 80050e8:	2036      	movs	r0, #54	; 0x36
 80050ea:	f7fb fd1f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80050ee:	f240 3105 	movw	r1, #773	; 0x305
 80050f2:	2037      	movs	r0, #55	; 0x37
 80050f4:	f7fb fd1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80050f8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80050fc:	2038      	movs	r0, #56	; 0x38
 80050fe:	f7fb fd15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005102:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005106:	2039      	movs	r0, #57	; 0x39
 8005108:	f7fb fd10 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800510c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005110:	2001      	movs	r0, #1
 8005112:	f7fb fd0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005116:	f44f 7140 	mov.w	r1, #768	; 0x300
 800511a:	2002      	movs	r0, #2
 800511c:	f7fb fd06 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005120:	f241 0130 	movw	r1, #4144	; 0x1030
 8005124:	2003      	movs	r0, #3
 8005126:	f7fb fd01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800512a:	f640 0108 	movw	r1, #2056	; 0x808
 800512e:	2008      	movs	r0, #8
 8005130:	f7fb fcfc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005134:	2108      	movs	r1, #8
 8005136:	200a      	movs	r0, #10
 8005138:	f7fb fcf8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800513c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005140:	2060      	movs	r0, #96	; 0x60
 8005142:	f7fb fcf3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005146:	2101      	movs	r1, #1
 8005148:	2061      	movs	r0, #97	; 0x61
 800514a:	f7fb fcef 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800514e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005152:	2090      	movs	r0, #144	; 0x90
 8005154:	f7fb fcea 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800515c:	2092      	movs	r0, #146	; 0x92
 800515e:	f7fb fce5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005166:	2093      	movs	r0, #147	; 0x93
 8005168:	f7fb fce0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800516c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005170:	20a0      	movs	r0, #160	; 0xa0
 8005172:	f7fb fcdb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005176:	2110      	movs	r1, #16
 8005178:	20a3      	movs	r0, #163	; 0xa3
 800517a:	f7fb fcd7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800517e:	2101      	movs	r1, #1
 8005180:	2007      	movs	r0, #7
 8005182:	f7fb fcd3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005186:	2121      	movs	r1, #33	; 0x21
 8005188:	2007      	movs	r0, #7
 800518a:	f7fb fccf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800518e:	2123      	movs	r1, #35	; 0x23
 8005190:	2007      	movs	r0, #7
 8005192:	f7fb fccb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005196:	2133      	movs	r1, #51	; 0x33
 8005198:	2007      	movs	r0, #7
 800519a:	f7fb fcc7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800519e:	f240 1133 	movw	r1, #307	; 0x133
 80051a2:	2007      	movs	r0, #7
 80051a4:	f7fb fcc2 	bl	8000b2c <LCD_WriteReg>
 80051a8:	e3b0      	b.n	800590c <LCD_Init+0x3e34>
 80051aa:	bf00      	nop
 80051ac:	200001b4 	.word	0x200001b4
	} else if (lcddev.id == 0X1963) {
 80051b0:	4ba8      	ldr	r3, [pc, #672]	; (8005454 <LCD_Init+0x397c>)
 80051b2:	889b      	ldrh	r3, [r3, #4]
 80051b4:	f641 1263 	movw	r2, #6499	; 0x1963
 80051b8:	4293      	cmp	r3, r2
 80051ba:	f040 83a7 	bne.w	800590c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80051be:	20e2      	movs	r0, #226	; 0xe2
 80051c0:	f7fb fc28 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80051c4:	4ba4      	ldr	r3, [pc, #656]	; (8005458 <LCD_Init+0x3980>)
 80051c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ca:	611a      	str	r2, [r3, #16]
 80051cc:	4ba2      	ldr	r3, [pc, #648]	; (8005458 <LCD_Init+0x3980>)
 80051ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d2:	615a      	str	r2, [r3, #20]
 80051d4:	4ba1      	ldr	r3, [pc, #644]	; (800545c <LCD_Init+0x3984>)
 80051d6:	221d      	movs	r2, #29
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	4b9f      	ldr	r3, [pc, #636]	; (8005458 <LCD_Init+0x3980>)
 80051dc:	2280      	movs	r2, #128	; 0x80
 80051de:	615a      	str	r2, [r3, #20]
 80051e0:	4b9d      	ldr	r3, [pc, #628]	; (8005458 <LCD_Init+0x3980>)
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	611a      	str	r2, [r3, #16]
 80051e6:	4b9c      	ldr	r3, [pc, #624]	; (8005458 <LCD_Init+0x3980>)
 80051e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80051ee:	4b9a      	ldr	r3, [pc, #616]	; (8005458 <LCD_Init+0x3980>)
 80051f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	4b98      	ldr	r3, [pc, #608]	; (8005458 <LCD_Init+0x3980>)
 80051f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fc:	615a      	str	r2, [r3, #20]
 80051fe:	4b97      	ldr	r3, [pc, #604]	; (800545c <LCD_Init+0x3984>)
 8005200:	2202      	movs	r2, #2
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	4b94      	ldr	r3, [pc, #592]	; (8005458 <LCD_Init+0x3980>)
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	615a      	str	r2, [r3, #20]
 800520a:	4b93      	ldr	r3, [pc, #588]	; (8005458 <LCD_Init+0x3980>)
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	611a      	str	r2, [r3, #16]
 8005210:	4b91      	ldr	r3, [pc, #580]	; (8005458 <LCD_Init+0x3980>)
 8005212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005216:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005218:	4b8f      	ldr	r3, [pc, #572]	; (8005458 <LCD_Init+0x3980>)
 800521a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521e:	611a      	str	r2, [r3, #16]
 8005220:	4b8d      	ldr	r3, [pc, #564]	; (8005458 <LCD_Init+0x3980>)
 8005222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005226:	615a      	str	r2, [r3, #20]
 8005228:	4b8c      	ldr	r3, [pc, #560]	; (800545c <LCD_Init+0x3984>)
 800522a:	2204      	movs	r2, #4
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	4b8a      	ldr	r3, [pc, #552]	; (8005458 <LCD_Init+0x3980>)
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	615a      	str	r2, [r3, #20]
 8005234:	4b88      	ldr	r3, [pc, #544]	; (8005458 <LCD_Init+0x3980>)
 8005236:	2280      	movs	r2, #128	; 0x80
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	4b87      	ldr	r3, [pc, #540]	; (8005458 <LCD_Init+0x3980>)
 800523c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005240:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005242:	2001      	movs	r0, #1
 8005244:	f001 fa50 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005248:	20e0      	movs	r0, #224	; 0xe0
 800524a:	f7fb fbe3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800524e:	4b82      	ldr	r3, [pc, #520]	; (8005458 <LCD_Init+0x3980>)
 8005250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	4b80      	ldr	r3, [pc, #512]	; (8005458 <LCD_Init+0x3980>)
 8005258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525c:	615a      	str	r2, [r3, #20]
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <LCD_Init+0x3984>)
 8005260:	2201      	movs	r2, #1
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	4b7c      	ldr	r3, [pc, #496]	; (8005458 <LCD_Init+0x3980>)
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	615a      	str	r2, [r3, #20]
 800526a:	4b7b      	ldr	r3, [pc, #492]	; (8005458 <LCD_Init+0x3980>)
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	611a      	str	r2, [r3, #16]
 8005270:	4b79      	ldr	r3, [pc, #484]	; (8005458 <LCD_Init+0x3980>)
 8005272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005276:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005278:	200a      	movs	r0, #10
 800527a:	f001 fa35 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800527e:	20e0      	movs	r0, #224	; 0xe0
 8005280:	f7fb fbc8 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005284:	4b74      	ldr	r3, [pc, #464]	; (8005458 <LCD_Init+0x3980>)
 8005286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800528a:	611a      	str	r2, [r3, #16]
 800528c:	4b72      	ldr	r3, [pc, #456]	; (8005458 <LCD_Init+0x3980>)
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	615a      	str	r2, [r3, #20]
 8005294:	4b71      	ldr	r3, [pc, #452]	; (800545c <LCD_Init+0x3984>)
 8005296:	2203      	movs	r2, #3
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	4b6f      	ldr	r3, [pc, #444]	; (8005458 <LCD_Init+0x3980>)
 800529c:	2280      	movs	r2, #128	; 0x80
 800529e:	615a      	str	r2, [r3, #20]
 80052a0:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <LCD_Init+0x3980>)
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	611a      	str	r2, [r3, #16]
 80052a6:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <LCD_Init+0x3980>)
 80052a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ac:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80052ae:	200c      	movs	r0, #12
 80052b0:	f001 fa1a 	bl	80066e8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80052b4:	2001      	movs	r0, #1
 80052b6:	f7fb fbad 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(10);
 80052ba:	200a      	movs	r0, #10
 80052bc:	f001 fa14 	bl	80066e8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80052c0:	20e6      	movs	r0, #230	; 0xe6
 80052c2:	f7fb fba7 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80052c6:	4b64      	ldr	r3, [pc, #400]	; (8005458 <LCD_Init+0x3980>)
 80052c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	4b62      	ldr	r3, [pc, #392]	; (8005458 <LCD_Init+0x3980>)
 80052d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d4:	615a      	str	r2, [r3, #20]
 80052d6:	4b61      	ldr	r3, [pc, #388]	; (800545c <LCD_Init+0x3984>)
 80052d8:	222f      	movs	r2, #47	; 0x2f
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	4b5e      	ldr	r3, [pc, #376]	; (8005458 <LCD_Init+0x3980>)
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	615a      	str	r2, [r3, #20]
 80052e2:	4b5d      	ldr	r3, [pc, #372]	; (8005458 <LCD_Init+0x3980>)
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	611a      	str	r2, [r3, #16]
 80052e8:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <LCD_Init+0x3980>)
 80052ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80052f0:	4b59      	ldr	r3, [pc, #356]	; (8005458 <LCD_Init+0x3980>)
 80052f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f6:	611a      	str	r2, [r3, #16]
 80052f8:	4b57      	ldr	r3, [pc, #348]	; (8005458 <LCD_Init+0x3980>)
 80052fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fe:	615a      	str	r2, [r3, #20]
 8005300:	4b56      	ldr	r3, [pc, #344]	; (800545c <LCD_Init+0x3984>)
 8005302:	22ff      	movs	r2, #255	; 0xff
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	4b54      	ldr	r3, [pc, #336]	; (8005458 <LCD_Init+0x3980>)
 8005308:	2280      	movs	r2, #128	; 0x80
 800530a:	615a      	str	r2, [r3, #20]
 800530c:	4b52      	ldr	r3, [pc, #328]	; (8005458 <LCD_Init+0x3980>)
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	611a      	str	r2, [r3, #16]
 8005312:	4b51      	ldr	r3, [pc, #324]	; (8005458 <LCD_Init+0x3980>)
 8005314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005318:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800531a:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <LCD_Init+0x3980>)
 800531c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005320:	611a      	str	r2, [r3, #16]
 8005322:	4b4d      	ldr	r3, [pc, #308]	; (8005458 <LCD_Init+0x3980>)
 8005324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005328:	615a      	str	r2, [r3, #20]
 800532a:	4b4c      	ldr	r3, [pc, #304]	; (800545c <LCD_Init+0x3984>)
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	4b49      	ldr	r3, [pc, #292]	; (8005458 <LCD_Init+0x3980>)
 8005332:	2280      	movs	r2, #128	; 0x80
 8005334:	615a      	str	r2, [r3, #20]
 8005336:	4b48      	ldr	r3, [pc, #288]	; (8005458 <LCD_Init+0x3980>)
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	611a      	str	r2, [r3, #16]
 800533c:	4b46      	ldr	r3, [pc, #280]	; (8005458 <LCD_Init+0x3980>)
 800533e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005342:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005344:	20b0      	movs	r0, #176	; 0xb0
 8005346:	f7fb fb65 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800534a:	4b43      	ldr	r3, [pc, #268]	; (8005458 <LCD_Init+0x3980>)
 800534c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005350:	611a      	str	r2, [r3, #16]
 8005352:	4b41      	ldr	r3, [pc, #260]	; (8005458 <LCD_Init+0x3980>)
 8005354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005358:	615a      	str	r2, [r3, #20]
 800535a:	4b40      	ldr	r3, [pc, #256]	; (800545c <LCD_Init+0x3984>)
 800535c:	2220      	movs	r2, #32
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <LCD_Init+0x3980>)
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	615a      	str	r2, [r3, #20]
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <LCD_Init+0x3980>)
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	611a      	str	r2, [r3, #16]
 800536c:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <LCD_Init+0x3980>)
 800536e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005372:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <LCD_Init+0x3980>)
 8005376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537a:	611a      	str	r2, [r3, #16]
 800537c:	4b36      	ldr	r3, [pc, #216]	; (8005458 <LCD_Init+0x3980>)
 800537e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005382:	615a      	str	r2, [r3, #20]
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <LCD_Init+0x3984>)
 8005386:	2200      	movs	r2, #0
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	4b33      	ldr	r3, [pc, #204]	; (8005458 <LCD_Init+0x3980>)
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	615a      	str	r2, [r3, #20]
 8005390:	4b31      	ldr	r3, [pc, #196]	; (8005458 <LCD_Init+0x3980>)
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <LCD_Init+0x3980>)
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <LCD_Init+0x3980>)
 80053a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <LCD_Init+0x3980>)
 80053a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ac:	615a      	str	r2, [r3, #20]
 80053ae:	4b2b      	ldr	r3, [pc, #172]	; (800545c <LCD_Init+0x3984>)
 80053b0:	2203      	movs	r2, #3
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	4b28      	ldr	r3, [pc, #160]	; (8005458 <LCD_Init+0x3980>)
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	615a      	str	r2, [r3, #20]
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <LCD_Init+0x3980>)
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	611a      	str	r2, [r3, #16]
 80053c0:	4b25      	ldr	r3, [pc, #148]	; (8005458 <LCD_Init+0x3980>)
 80053c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <LCD_Init+0x3980>)
 80053ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ce:	611a      	str	r2, [r3, #16]
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <LCD_Init+0x3980>)
 80053d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d6:	615a      	str	r2, [r3, #20]
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <LCD_Init+0x3984>)
 80053da:	f240 321f 	movw	r2, #799	; 0x31f
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <LCD_Init+0x3980>)
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	615a      	str	r2, [r3, #20]
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <LCD_Init+0x3980>)
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	611a      	str	r2, [r3, #16]
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <LCD_Init+0x3980>)
 80053ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <LCD_Init+0x3980>)
 80053f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <LCD_Init+0x3980>)
 80053fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005402:	615a      	str	r2, [r3, #20]
 8005404:	4b15      	ldr	r3, [pc, #84]	; (800545c <LCD_Init+0x3984>)
 8005406:	2201      	movs	r2, #1
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <LCD_Init+0x3980>)
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	615a      	str	r2, [r3, #20]
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <LCD_Init+0x3980>)
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	611a      	str	r2, [r3, #16]
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <LCD_Init+0x3980>)
 8005418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <LCD_Init+0x3980>)
 8005420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <LCD_Init+0x3980>)
 8005428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542c:	615a      	str	r2, [r3, #20]
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <LCD_Init+0x3984>)
 8005430:	f240 12df 	movw	r2, #479	; 0x1df
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <LCD_Init+0x3980>)
 8005438:	2280      	movs	r2, #128	; 0x80
 800543a:	615a      	str	r2, [r3, #20]
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <LCD_Init+0x3980>)
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	611a      	str	r2, [r3, #16]
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <LCD_Init+0x3980>)
 8005444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005448:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800544a:	4b03      	ldr	r3, [pc, #12]	; (8005458 <LCD_Init+0x3980>)
 800544c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005450:	e006      	b.n	8005460 <LCD_Init+0x3988>
 8005452:	bf00      	nop
 8005454:	200001b4 	.word	0x200001b4
 8005458:	40011000 	.word	0x40011000
 800545c:	40010c00 	.word	0x40010c00
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	4ba3      	ldr	r3, [pc, #652]	; (80056f0 <LCD_Init+0x3c18>)
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	615a      	str	r2, [r3, #20]
 800546a:	4ba2      	ldr	r3, [pc, #648]	; (80056f4 <LCD_Init+0x3c1c>)
 800546c:	2200      	movs	r2, #0
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	4b9f      	ldr	r3, [pc, #636]	; (80056f0 <LCD_Init+0x3c18>)
 8005472:	2280      	movs	r2, #128	; 0x80
 8005474:	615a      	str	r2, [r3, #20]
 8005476:	4b9e      	ldr	r3, [pc, #632]	; (80056f0 <LCD_Init+0x3c18>)
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	4b9c      	ldr	r3, [pc, #624]	; (80056f0 <LCD_Init+0x3c18>)
 800547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005482:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005484:	20b4      	movs	r0, #180	; 0xb4
 8005486:	f7fb fac5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800548a:	4b99      	ldr	r3, [pc, #612]	; (80056f0 <LCD_Init+0x3c18>)
 800548c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	4b97      	ldr	r3, [pc, #604]	; (80056f0 <LCD_Init+0x3c18>)
 8005494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005498:	615a      	str	r2, [r3, #20]
 800549a:	4b96      	ldr	r3, [pc, #600]	; (80056f4 <LCD_Init+0x3c1c>)
 800549c:	2204      	movs	r2, #4
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	4b93      	ldr	r3, [pc, #588]	; (80056f0 <LCD_Init+0x3c18>)
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	615a      	str	r2, [r3, #20]
 80054a6:	4b92      	ldr	r3, [pc, #584]	; (80056f0 <LCD_Init+0x3c18>)
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	611a      	str	r2, [r3, #16]
 80054ac:	4b90      	ldr	r3, [pc, #576]	; (80056f0 <LCD_Init+0x3c18>)
 80054ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80054b4:	4b8e      	ldr	r3, [pc, #568]	; (80056f0 <LCD_Init+0x3c18>)
 80054b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ba:	611a      	str	r2, [r3, #16]
 80054bc:	4b8c      	ldr	r3, [pc, #560]	; (80056f0 <LCD_Init+0x3c18>)
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	615a      	str	r2, [r3, #20]
 80054c4:	4b8b      	ldr	r3, [pc, #556]	; (80056f4 <LCD_Init+0x3c1c>)
 80054c6:	f240 421f 	movw	r2, #1055	; 0x41f
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	4b88      	ldr	r3, [pc, #544]	; (80056f0 <LCD_Init+0x3c18>)
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	615a      	str	r2, [r3, #20]
 80054d2:	4b87      	ldr	r3, [pc, #540]	; (80056f0 <LCD_Init+0x3c18>)
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	611a      	str	r2, [r3, #16]
 80054d8:	4b85      	ldr	r3, [pc, #532]	; (80056f0 <LCD_Init+0x3c18>)
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80054e0:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <LCD_Init+0x3c18>)
 80054e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e6:	611a      	str	r2, [r3, #16]
 80054e8:	4b81      	ldr	r3, [pc, #516]	; (80056f0 <LCD_Init+0x3c18>)
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	4b80      	ldr	r3, [pc, #512]	; (80056f4 <LCD_Init+0x3c1c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	4b7e      	ldr	r3, [pc, #504]	; (80056f0 <LCD_Init+0x3c18>)
 80054f8:	2280      	movs	r2, #128	; 0x80
 80054fa:	615a      	str	r2, [r3, #20]
 80054fc:	4b7c      	ldr	r3, [pc, #496]	; (80056f0 <LCD_Init+0x3c18>)
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	611a      	str	r2, [r3, #16]
 8005502:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <LCD_Init+0x3c18>)
 8005504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005508:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800550a:	4b79      	ldr	r3, [pc, #484]	; (80056f0 <LCD_Init+0x3c18>)
 800550c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	4b77      	ldr	r3, [pc, #476]	; (80056f0 <LCD_Init+0x3c18>)
 8005514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005518:	615a      	str	r2, [r3, #20]
 800551a:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <LCD_Init+0x3c1c>)
 800551c:	222e      	movs	r2, #46	; 0x2e
 800551e:	60da      	str	r2, [r3, #12]
 8005520:	4b73      	ldr	r3, [pc, #460]	; (80056f0 <LCD_Init+0x3c18>)
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	615a      	str	r2, [r3, #20]
 8005526:	4b72      	ldr	r3, [pc, #456]	; (80056f0 <LCD_Init+0x3c18>)
 8005528:	2280      	movs	r2, #128	; 0x80
 800552a:	611a      	str	r2, [r3, #16]
 800552c:	4b70      	ldr	r3, [pc, #448]	; (80056f0 <LCD_Init+0x3c18>)
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005534:	4b6e      	ldr	r3, [pc, #440]	; (80056f0 <LCD_Init+0x3c18>)
 8005536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553a:	611a      	str	r2, [r3, #16]
 800553c:	4b6c      	ldr	r3, [pc, #432]	; (80056f0 <LCD_Init+0x3c18>)
 800553e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005542:	615a      	str	r2, [r3, #20]
 8005544:	4b6b      	ldr	r3, [pc, #428]	; (80056f4 <LCD_Init+0x3c1c>)
 8005546:	2200      	movs	r2, #0
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <LCD_Init+0x3c18>)
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	615a      	str	r2, [r3, #20]
 8005550:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <LCD_Init+0x3c18>)
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	4b66      	ldr	r3, [pc, #408]	; (80056f0 <LCD_Init+0x3c18>)
 8005558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800555e:	4b64      	ldr	r3, [pc, #400]	; (80056f0 <LCD_Init+0x3c18>)
 8005560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005564:	611a      	str	r2, [r3, #16]
 8005566:	4b62      	ldr	r3, [pc, #392]	; (80056f0 <LCD_Init+0x3c18>)
 8005568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556c:	615a      	str	r2, [r3, #20]
 800556e:	4b61      	ldr	r3, [pc, #388]	; (80056f4 <LCD_Init+0x3c1c>)
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <LCD_Init+0x3c18>)
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <LCD_Init+0x3c18>)
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <LCD_Init+0x3c18>)
 8005582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005586:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <LCD_Init+0x3c18>)
 800558a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800558e:	611a      	str	r2, [r3, #16]
 8005590:	4b57      	ldr	r3, [pc, #348]	; (80056f0 <LCD_Init+0x3c18>)
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <LCD_Init+0x3c1c>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	4b54      	ldr	r3, [pc, #336]	; (80056f0 <LCD_Init+0x3c18>)
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4b52      	ldr	r3, [pc, #328]	; (80056f0 <LCD_Init+0x3c18>)
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	611a      	str	r2, [r3, #16]
 80055aa:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <LCD_Init+0x3c18>)
 80055ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80055b2:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <LCD_Init+0x3c18>)
 80055b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b8:	611a      	str	r2, [r3, #16]
 80055ba:	4b4d      	ldr	r3, [pc, #308]	; (80056f0 <LCD_Init+0x3c18>)
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	615a      	str	r2, [r3, #20]
 80055c2:	4b4c      	ldr	r3, [pc, #304]	; (80056f4 <LCD_Init+0x3c1c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <LCD_Init+0x3c18>)
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	615a      	str	r2, [r3, #20]
 80055ce:	4b48      	ldr	r3, [pc, #288]	; (80056f0 <LCD_Init+0x3c18>)
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	4b46      	ldr	r3, [pc, #280]	; (80056f0 <LCD_Init+0x3c18>)
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80055dc:	20b6      	movs	r0, #182	; 0xb6
 80055de:	f7fb fa19 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80055e2:	4b43      	ldr	r3, [pc, #268]	; (80056f0 <LCD_Init+0x3c18>)
 80055e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	4b41      	ldr	r3, [pc, #260]	; (80056f0 <LCD_Init+0x3c18>)
 80055ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f0:	615a      	str	r2, [r3, #20]
 80055f2:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <LCD_Init+0x3c1c>)
 80055f4:	2202      	movs	r2, #2
 80055f6:	60da      	str	r2, [r3, #12]
 80055f8:	4b3d      	ldr	r3, [pc, #244]	; (80056f0 <LCD_Init+0x3c18>)
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	615a      	str	r2, [r3, #20]
 80055fe:	4b3c      	ldr	r3, [pc, #240]	; (80056f0 <LCD_Init+0x3c18>)
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	611a      	str	r2, [r3, #16]
 8005604:	4b3a      	ldr	r3, [pc, #232]	; (80056f0 <LCD_Init+0x3c18>)
 8005606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800560c:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <LCD_Init+0x3c18>)
 800560e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005612:	611a      	str	r2, [r3, #16]
 8005614:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <LCD_Init+0x3c18>)
 8005616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561a:	615a      	str	r2, [r3, #20]
 800561c:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <LCD_Init+0x3c1c>)
 800561e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <LCD_Init+0x3c18>)
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	615a      	str	r2, [r3, #20]
 800562a:	4b31      	ldr	r3, [pc, #196]	; (80056f0 <LCD_Init+0x3c18>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	611a      	str	r2, [r3, #16]
 8005630:	4b2f      	ldr	r3, [pc, #188]	; (80056f0 <LCD_Init+0x3c18>)
 8005632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005636:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005638:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <LCD_Init+0x3c18>)
 800563a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <LCD_Init+0x3c18>)
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	615a      	str	r2, [r3, #20]
 8005648:	4b2a      	ldr	r3, [pc, #168]	; (80056f4 <LCD_Init+0x3c1c>)
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <LCD_Init+0x3c18>)
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	615a      	str	r2, [r3, #20]
 8005654:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <LCD_Init+0x3c18>)
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <LCD_Init+0x3c18>)
 800565c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005660:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005662:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <LCD_Init+0x3c18>)
 8005664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <LCD_Init+0x3c18>)
 800566c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005670:	615a      	str	r2, [r3, #20]
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <LCD_Init+0x3c1c>)
 8005674:	2217      	movs	r2, #23
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <LCD_Init+0x3c18>)
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	615a      	str	r2, [r3, #20]
 800567e:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <LCD_Init+0x3c18>)
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	611a      	str	r2, [r3, #16]
 8005684:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <LCD_Init+0x3c18>)
 8005686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800568c:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <LCD_Init+0x3c18>)
 800568e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005692:	611a      	str	r2, [r3, #16]
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <LCD_Init+0x3c18>)
 8005696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <LCD_Init+0x3c1c>)
 800569e:	2215      	movs	r2, #21
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <LCD_Init+0x3c18>)
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	615a      	str	r2, [r3, #20]
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <LCD_Init+0x3c18>)
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	611a      	str	r2, [r3, #16]
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <LCD_Init+0x3c18>)
 80056b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <LCD_Init+0x3c18>)
 80056b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <LCD_Init+0x3c18>)
 80056c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c4:	615a      	str	r2, [r3, #20]
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <LCD_Init+0x3c1c>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <LCD_Init+0x3c18>)
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	615a      	str	r2, [r3, #20]
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <LCD_Init+0x3c18>)
 80056d4:	2280      	movs	r2, #128	; 0x80
 80056d6:	611a      	str	r2, [r3, #16]
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <LCD_Init+0x3c18>)
 80056da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056de:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <LCD_Init+0x3c18>)
 80056e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e6:	611a      	str	r2, [r3, #16]
 80056e8:	4b01      	ldr	r3, [pc, #4]	; (80056f0 <LCD_Init+0x3c18>)
 80056ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ee:	e003      	b.n	80056f8 <LCD_Init+0x3c20>
 80056f0:	40011000 	.word	0x40011000
 80056f4:	40010c00 	.word	0x40010c00
 80056f8:	615a      	str	r2, [r3, #20]
 80056fa:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <LCD_Init+0x3e50>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	4b8a      	ldr	r3, [pc, #552]	; (800592c <LCD_Init+0x3e54>)
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	615a      	str	r2, [r3, #20]
 8005706:	4b89      	ldr	r3, [pc, #548]	; (800592c <LCD_Init+0x3e54>)
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	4b87      	ldr	r3, [pc, #540]	; (800592c <LCD_Init+0x3e54>)
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005714:	20f0      	movs	r0, #240	; 0xf0
 8005716:	f7fb f97d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800571a:	4b84      	ldr	r3, [pc, #528]	; (800592c <LCD_Init+0x3e54>)
 800571c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	4b82      	ldr	r3, [pc, #520]	; (800592c <LCD_Init+0x3e54>)
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	615a      	str	r2, [r3, #20]
 800572a:	4b7f      	ldr	r3, [pc, #508]	; (8005928 <LCD_Init+0x3e50>)
 800572c:	2203      	movs	r2, #3
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	4b7e      	ldr	r3, [pc, #504]	; (800592c <LCD_Init+0x3e54>)
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	615a      	str	r2, [r3, #20]
 8005736:	4b7d      	ldr	r3, [pc, #500]	; (800592c <LCD_Init+0x3e54>)
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	611a      	str	r2, [r3, #16]
 800573c:	4b7b      	ldr	r3, [pc, #492]	; (800592c <LCD_Init+0x3e54>)
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005744:	2029      	movs	r0, #41	; 0x29
 8005746:	f7fb f965 	bl	8000a14 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800574a:	20d0      	movs	r0, #208	; 0xd0
 800574c:	f7fb f962 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005750:	4b76      	ldr	r3, [pc, #472]	; (800592c <LCD_Init+0x3e54>)
 8005752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005756:	611a      	str	r2, [r3, #16]
 8005758:	4b74      	ldr	r3, [pc, #464]	; (800592c <LCD_Init+0x3e54>)
 800575a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575e:	615a      	str	r2, [r3, #20]
 8005760:	4b71      	ldr	r3, [pc, #452]	; (8005928 <LCD_Init+0x3e50>)
 8005762:	2200      	movs	r2, #0
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	4b71      	ldr	r3, [pc, #452]	; (800592c <LCD_Init+0x3e54>)
 8005768:	2280      	movs	r2, #128	; 0x80
 800576a:	615a      	str	r2, [r3, #20]
 800576c:	4b6f      	ldr	r3, [pc, #444]	; (800592c <LCD_Init+0x3e54>)
 800576e:	2280      	movs	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
 8005772:	4b6e      	ldr	r3, [pc, #440]	; (800592c <LCD_Init+0x3e54>)
 8005774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005778:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800577a:	20be      	movs	r0, #190	; 0xbe
 800577c:	f7fb f94a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005780:	4b6a      	ldr	r3, [pc, #424]	; (800592c <LCD_Init+0x3e54>)
 8005782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	4b68      	ldr	r3, [pc, #416]	; (800592c <LCD_Init+0x3e54>)
 800578a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578e:	615a      	str	r2, [r3, #20]
 8005790:	4b65      	ldr	r3, [pc, #404]	; (8005928 <LCD_Init+0x3e50>)
 8005792:	2205      	movs	r2, #5
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	4b65      	ldr	r3, [pc, #404]	; (800592c <LCD_Init+0x3e54>)
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	615a      	str	r2, [r3, #20]
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <LCD_Init+0x3e54>)
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	611a      	str	r2, [r3, #16]
 80057a2:	4b62      	ldr	r3, [pc, #392]	; (800592c <LCD_Init+0x3e54>)
 80057a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80057aa:	4b60      	ldr	r3, [pc, #384]	; (800592c <LCD_Init+0x3e54>)
 80057ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b5e      	ldr	r3, [pc, #376]	; (800592c <LCD_Init+0x3e54>)
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	615a      	str	r2, [r3, #20]
 80057ba:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <LCD_Init+0x3e50>)
 80057bc:	22fe      	movs	r2, #254	; 0xfe
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	4b5a      	ldr	r3, [pc, #360]	; (800592c <LCD_Init+0x3e54>)
 80057c2:	2280      	movs	r2, #128	; 0x80
 80057c4:	615a      	str	r2, [r3, #20]
 80057c6:	4b59      	ldr	r3, [pc, #356]	; (800592c <LCD_Init+0x3e54>)
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	611a      	str	r2, [r3, #16]
 80057cc:	4b57      	ldr	r3, [pc, #348]	; (800592c <LCD_Init+0x3e54>)
 80057ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80057d4:	4b55      	ldr	r3, [pc, #340]	; (800592c <LCD_Init+0x3e54>)
 80057d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <LCD_Init+0x3e54>)
 80057de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e2:	615a      	str	r2, [r3, #20]
 80057e4:	4b50      	ldr	r3, [pc, #320]	; (8005928 <LCD_Init+0x3e50>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	4b50      	ldr	r3, [pc, #320]	; (800592c <LCD_Init+0x3e54>)
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	615a      	str	r2, [r3, #20]
 80057f0:	4b4e      	ldr	r3, [pc, #312]	; (800592c <LCD_Init+0x3e54>)
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	611a      	str	r2, [r3, #16]
 80057f6:	4b4d      	ldr	r3, [pc, #308]	; (800592c <LCD_Init+0x3e54>)
 80057f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80057fe:	4b4b      	ldr	r3, [pc, #300]	; (800592c <LCD_Init+0x3e54>)
 8005800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	4b49      	ldr	r3, [pc, #292]	; (800592c <LCD_Init+0x3e54>)
 8005808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580c:	615a      	str	r2, [r3, #20]
 800580e:	4b46      	ldr	r3, [pc, #280]	; (8005928 <LCD_Init+0x3e50>)
 8005810:	2200      	movs	r2, #0
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	4b45      	ldr	r3, [pc, #276]	; (800592c <LCD_Init+0x3e54>)
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	615a      	str	r2, [r3, #20]
 800581a:	4b44      	ldr	r3, [pc, #272]	; (800592c <LCD_Init+0x3e54>)
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <LCD_Init+0x3e54>)
 8005822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005826:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <LCD_Init+0x3e54>)
 800582a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582e:	611a      	str	r2, [r3, #16]
 8005830:	4b3e      	ldr	r3, [pc, #248]	; (800592c <LCD_Init+0x3e54>)
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	615a      	str	r2, [r3, #20]
 8005838:	4b3b      	ldr	r3, [pc, #236]	; (8005928 <LCD_Init+0x3e50>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <LCD_Init+0x3e54>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	615a      	str	r2, [r3, #20]
 8005844:	4b39      	ldr	r3, [pc, #228]	; (800592c <LCD_Init+0x3e54>)
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	4b38      	ldr	r3, [pc, #224]	; (800592c <LCD_Init+0x3e54>)
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005852:	4b36      	ldr	r3, [pc, #216]	; (800592c <LCD_Init+0x3e54>)
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	4b34      	ldr	r3, [pc, #208]	; (800592c <LCD_Init+0x3e54>)
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <LCD_Init+0x3e50>)
 8005864:	2200      	movs	r2, #0
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	4b30      	ldr	r3, [pc, #192]	; (800592c <LCD_Init+0x3e54>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <LCD_Init+0x3e54>)
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	4b2d      	ldr	r3, [pc, #180]	; (800592c <LCD_Init+0x3e54>)
 8005876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800587c:	20b8      	movs	r0, #184	; 0xb8
 800587e:	f7fb f8c9 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <LCD_Init+0x3e54>)
 8005884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005888:	611a      	str	r2, [r3, #16]
 800588a:	4b28      	ldr	r3, [pc, #160]	; (800592c <LCD_Init+0x3e54>)
 800588c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005890:	615a      	str	r2, [r3, #20]
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <LCD_Init+0x3e50>)
 8005894:	2203      	movs	r2, #3
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <LCD_Init+0x3e54>)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	615a      	str	r2, [r3, #20]
 800589e:	4b23      	ldr	r3, [pc, #140]	; (800592c <LCD_Init+0x3e54>)
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	611a      	str	r2, [r3, #16]
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <LCD_Init+0x3e54>)
 80058a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 80058ac:	4b1f      	ldr	r3, [pc, #124]	; (800592c <LCD_Init+0x3e54>)
 80058ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b2:	611a      	str	r2, [r3, #16]
 80058b4:	4b1d      	ldr	r3, [pc, #116]	; (800592c <LCD_Init+0x3e54>)
 80058b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ba:	615a      	str	r2, [r3, #20]
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <LCD_Init+0x3e50>)
 80058be:	2201      	movs	r2, #1
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <LCD_Init+0x3e54>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	615a      	str	r2, [r3, #20]
 80058c8:	4b18      	ldr	r3, [pc, #96]	; (800592c <LCD_Init+0x3e54>)
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	611a      	str	r2, [r3, #16]
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <LCD_Init+0x3e54>)
 80058d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80058d6:	20ba      	movs	r0, #186	; 0xba
 80058d8:	f7fb f89c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <LCD_Init+0x3e54>)
 80058de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e2:	611a      	str	r2, [r3, #16]
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <LCD_Init+0x3e54>)
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <LCD_Init+0x3e50>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <LCD_Init+0x3e54>)
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	615a      	str	r2, [r3, #20]
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <LCD_Init+0x3e54>)
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <LCD_Init+0x3e54>)
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005906:	2064      	movs	r0, #100	; 0x64
 8005908:	f7fb ff36 	bl	8001778 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 800590c:	2000      	movs	r0, #0
 800590e:	f7fb ffd7 	bl	80018c0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005912:	4b07      	ldr	r3, [pc, #28]	; (8005930 <LCD_Init+0x3e58>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005918:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800591c:	f000 f80a 	bl	8005934 <LCD_Clear>
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40010c00 	.word	0x40010c00
 800592c:	40011000 	.word	0x40011000
 8005930:	422201a8 	.word	0x422201a8

08005934 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <LCD_Clear+0xb8>)
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005948:	4b28      	ldr	r3, [pc, #160]	; (80059ec <LCD_Clear+0xb8>)
 800594a:	885b      	ldrh	r3, [r3, #2]
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005956:	4b25      	ldr	r3, [pc, #148]	; (80059ec <LCD_Clear+0xb8>)
 8005958:	889b      	ldrh	r3, [r3, #4]
 800595a:	f646 0204 	movw	r2, #26628	; 0x6804
 800595e:	4293      	cmp	r3, r2
 8005960:	d11a      	bne.n	8005998 <LCD_Clear+0x64>
 8005962:	4b22      	ldr	r3, [pc, #136]	; (80059ec <LCD_Clear+0xb8>)
 8005964:	799b      	ldrb	r3, [r3, #6]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d116      	bne.n	8005998 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <LCD_Clear+0xb8>)
 800596c:	2200      	movs	r2, #0
 800596e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <LCD_Clear+0xb8>)
 8005972:	222a      	movs	r2, #42	; 0x2a
 8005974:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <LCD_Clear+0xb8>)
 8005978:	222b      	movs	r2, #43	; 0x2b
 800597a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800597c:	2100      	movs	r1, #0
 800597e:	2000      	movs	r0, #0
 8005980:	f7fb f91a 	bl	8000bb8 <LCD_SetCursor>
		lcddev.dir = 1;
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <LCD_Clear+0xb8>)
 8005986:	2201      	movs	r2, #1
 8005988:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <LCD_Clear+0xb8>)
 800598c:	222b      	movs	r2, #43	; 0x2b
 800598e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <LCD_Clear+0xb8>)
 8005992:	222a      	movs	r2, #42	; 0x2a
 8005994:	819a      	strh	r2, [r3, #12]
 8005996:	e003      	b.n	80059a0 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005998:	2100      	movs	r1, #0
 800599a:	2000      	movs	r0, #0
 800599c:	f7fb f90c 	bl	8000bb8 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 80059a0:	f7fb f8fe 	bl	8000ba0 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e017      	b.n	80059da <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <LCD_Clear+0xbc>)
 80059ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <LCD_Clear+0xbc>)
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <LCD_Clear+0xc0>)
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	60d3      	str	r3, [r2, #12]
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <LCD_Clear+0xbc>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <LCD_Clear+0xbc>)
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <LCD_Clear+0xbc>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3e3      	bcc.n	80059aa <LCD_Clear+0x76>
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200001b4 	.word	0x200001b4
 80059f0:	40011000 	.word	0x40011000
 80059f4:	40010c00 	.word	0x40010c00

080059f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059fc:	f000 fe12 	bl	8006624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a00:	f000 f838 	bl	8005a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a04:	f000 f91e 	bl	8005c44 <MX_GPIO_Init>
  MX_TIM3_Init();
 8005a08:	f000 f87a 	bl	8005b00 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8005a0c:	f000 f8f0 	bl	8005bf0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8005a10:	f000 f8c4 	bl	8005b9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8005a14:	4810      	ldr	r0, [pc, #64]	; (8005a58 <main+0x60>)
 8005a16:	f001 fed5 	bl	80077c4 <HAL_TIM_Base_Start_IT>
  LCD_Init();
 8005a1a:	f7fc f85d 	bl	8001ad8 <LCD_Init>
  HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <main+0x64>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	b291      	uxth	r1, r2
 8005a26:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <main+0x64>)
 8005a28:	8011      	strh	r1, [r2, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <main+0x68>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	2201      	movs	r2, #1
 8005a32:	4619      	mov	r1, r3
 8005a34:	480b      	ldr	r0, [pc, #44]	; (8005a64 <main+0x6c>)
 8005a36:	f002 fb76 	bl	8008126 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <main+0x70>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	b291      	uxth	r1, r2
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <main+0x70>)
 8005a44:	8011      	strh	r1, [r2, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <main+0x74>)
 8005a4a:	4413      	add	r3, r2
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4807      	ldr	r0, [pc, #28]	; (8005a70 <main+0x78>)
 8005a52:	f002 fb68 	bl	8008126 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005a56:	e7fe      	b.n	8005a56 <main+0x5e>
 8005a58:	20000994 	.word	0x20000994
 8005a5c:	200001a0 	.word	0x200001a0
 8005a60:	20001de4 	.word	0x20001de4
 8005a64:	20001d64 	.word	0x20001d64
 8005a68:	200001a2 	.word	0x200001a2
 8005a6c:	200009dc 	.word	0x200009dc
 8005a70:	20001da4 	.word	0x20001da4

08005a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b090      	sub	sp, #64	; 0x40
 8005a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	2228      	movs	r2, #40	; 0x28
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fed0 	bl	8008828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ab2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ab8:	f107 0318 	add.w	r3, r7, #24
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fa15 	bl	8006eec <HAL_RCC_OscConfig>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005ac8:	f000 fc02 	bl	80062d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005acc:	230f      	movs	r3, #15
 8005ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 fc80 	bl	80073ec <HAL_RCC_ClockConfig>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005af2:	f000 fbed 	bl	80062d0 <Error_Handler>
  }
}
 8005af6:	bf00      	nop
 8005af8:	3740      	adds	r7, #64	; 0x40
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	609a      	str	r2, [r3, #8]
 8005b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b14:	463b      	mov	r3, r7
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <MX_TIM3_Init+0x98>)
 8005b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b24:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b32:	f242 720f 	movw	r2, #9999	; 0x270f
 8005b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b38:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005b44:	4813      	ldr	r0, [pc, #76]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b46:	f001 fded 	bl	8007724 <HAL_TIM_Base_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005b50:	f000 fbbe 	bl	80062d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b5a:	f107 0308 	add.w	r3, r7, #8
 8005b5e:	4619      	mov	r1, r3
 8005b60:	480c      	ldr	r0, [pc, #48]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b62:	f001 ff97 	bl	8007a94 <HAL_TIM_ConfigClockSource>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005b6c:	f000 fbb0 	bl	80062d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b78:	463b      	mov	r3, r7
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4805      	ldr	r0, [pc, #20]	; (8005b94 <MX_TIM3_Init+0x94>)
 8005b7e:	f002 f975 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005b88:	f000 fba2 	bl	80062d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b8c:	bf00      	nop
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000994 	.word	0x20000994
 8005b98:	40000400 	.word	0x40000400

08005b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <MX_USART1_UART_Init+0x50>)
 8005ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005bc0:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005bd2:	4805      	ldr	r0, [pc, #20]	; (8005be8 <MX_USART1_UART_Init+0x4c>)
 8005bd4:	f002 f9c8 	bl	8007f68 <HAL_UART_Init>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005bde:	f000 fb77 	bl	80062d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20001d64 	.word	0x20001d64
 8005bec:	40013800 	.word	0x40013800

08005bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <MX_USART2_UART_Init+0x50>)
 8005bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c16:	220c      	movs	r2, #12
 8005c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c26:	4805      	ldr	r0, [pc, #20]	; (8005c3c <MX_USART2_UART_Init+0x4c>)
 8005c28:	f002 f99e 	bl	8007f68 <HAL_UART_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005c32:	f000 fb4d 	bl	80062d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001da4 	.word	0x20001da4
 8005c40:	40004400 	.word	0x40004400

08005c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4a:	f107 0310 	add.w	r3, r7, #16
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c58:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	4a45      	ldr	r2, [pc, #276]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	6193      	str	r3, [r2, #24]
 8005c64:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c70:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	6193      	str	r3, [r2, #24]
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c88:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	4a39      	ldr	r2, [pc, #228]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c8e:	f043 0310 	orr.w	r3, r3, #16
 8005c92:	6193      	str	r3, [r2, #24]
 8005c94:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <MX_GPIO_Init+0x130>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ca6:	4834      	ldr	r0, [pc, #208]	; (8005d78 <MX_GPIO_Init+0x134>)
 8005ca8:	f001 f8d7 	bl	8006e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4832      	ldr	r0, [pc, #200]	; (8005d7c <MX_GPIO_Init+0x138>)
 8005cb2:	f001 f8d2 	bl	8006e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cba:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <MX_GPIO_Init+0x13c>)
 8005cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	482b      	ldr	r0, [pc, #172]	; (8005d78 <MX_GPIO_Init+0x134>)
 8005cca:	f000 ff45 	bl	8006b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8005cce:	2320      	movs	r3, #32
 8005cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cd2:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <MX_GPIO_Init+0x13c>)
 8005cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8005cda:	f107 0310 	add.w	r3, r7, #16
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4828      	ldr	r0, [pc, #160]	; (8005d84 <MX_GPIO_Init+0x140>)
 8005ce2:	f000 ff39 	bl	8006b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8005ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cec:	2301      	movs	r3, #1
 8005cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	481e      	ldr	r0, [pc, #120]	; (8005d78 <MX_GPIO_Init+0x134>)
 8005d00:	f000 ff2a 	bl	8006b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8005d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <MX_GPIO_Init+0x13c>)
 8005d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	4619      	mov	r1, r3
 8005d18:	4817      	ldr	r0, [pc, #92]	; (8005d78 <MX_GPIO_Init+0x134>)
 8005d1a:	f000 ff1d 	bl	8006b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8005d2e:	f107 0310 	add.w	r3, r7, #16
 8005d32:	4619      	mov	r1, r3
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <MX_GPIO_Init+0x138>)
 8005d36:	f000 ff0f 	bl	8006b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	2006      	movs	r0, #6
 8005d40:	f000 fdcb 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005d44:	2006      	movs	r0, #6
 8005d46:	f000 fde4 	bl	8006912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	2017      	movs	r0, #23
 8005d50:	f000 fdc3 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d54:	2017      	movs	r0, #23
 8005d56:	f000 fddc 	bl	8006912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	2028      	movs	r0, #40	; 0x28
 8005d60:	f000 fdbb 	bl	80068da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d64:	2028      	movs	r0, #40	; 0x28
 8005d66:	f000 fdd4 	bl	8006912 <HAL_NVIC_EnableIRQ>

}
 8005d6a:	bf00      	nop
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40010800 	.word	0x40010800
 8005d7c:	40011400 	.word	0x40011400
 8005d80:	10110000 	.word	0x10110000
 8005d84:	40011000 	.word	0x40011000

08005d88 <SendCommand>:

/* USER CODE BEGIN 4 */
int SendCommand(char cmd[], char expectReponse[], int time_out)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
	char* indexOK = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
	int findExpectResponse = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8005d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005da0:	4827      	ldr	r0, [pc, #156]	; (8005e40 <SendCommand+0xb8>)
 8005da2:	f001 f872 	bl	8006e8a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7fa fa3e 	bl	8000228 <strlen>
 8005dac:	4603      	mov	r3, r0
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	68f9      	ldr	r1, [r7, #12]
 8005db6:	4823      	ldr	r0, [pc, #140]	; (8005e44 <SendCommand+0xbc>)
 8005db8:	f002 f923 	bl	8008002 <HAL_UART_Transmit>
	if (expectReponse && time_out)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <SendCommand+0x6a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d014      	beq.n	8005df2 <SendCommand+0x6a>
	{
		while(--time_out)
 8005dc8:	e00d      	b.n	8005de6 <SendCommand+0x5e>
		{
			HAL_Delay(10);
 8005dca:	200a      	movs	r0, #10
 8005dcc:	f000 fc8c 	bl	80066e8 <HAL_Delay>
			indexOK = strstr(RxBuffer2, expectReponse);
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	481d      	ldr	r0, [pc, #116]	; (8005e48 <SendCommand+0xc0>)
 8005dd4:	f002 fd50 	bl	8008878 <strstr>
 8005dd8:	6138      	str	r0, [r7, #16]
			if (indexOK)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <SendCommand+0x5e>
			{
				findExpectResponse = 1;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
				break;
 8005de4:	e005      	b.n	8005df2 <SendCommand+0x6a>
		while(--time_out)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1eb      	bne.n	8005dca <SendCommand+0x42>
			}
		}
	}

	// Check response
	if (findExpectResponse)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <SendCommand+0x80>
	{
		HAL_UART_Transmit(&huart1, "Success\r\n", 9, HAL_MAX_DELAY);
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfc:	2209      	movs	r2, #9
 8005dfe:	4913      	ldr	r1, [pc, #76]	; (8005e4c <SendCommand+0xc4>)
 8005e00:	4813      	ldr	r0, [pc, #76]	; (8005e50 <SendCommand+0xc8>)
 8005e02:	f002 f8fe 	bl	8008002 <HAL_UART_Transmit>
 8005e06:	e011      	b.n	8005e2c <SendCommand+0xa4>

	}
	else if (time_out == 0)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d107      	bne.n	8005e1e <SendCommand+0x96>
	{
		HAL_UART_Transmit(&huart1, "Timeout\r\n", 9, HAL_MAX_DELAY);
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	2209      	movs	r2, #9
 8005e14:	490f      	ldr	r1, [pc, #60]	; (8005e54 <SendCommand+0xcc>)
 8005e16:	480e      	ldr	r0, [pc, #56]	; (8005e50 <SendCommand+0xc8>)
 8005e18:	f002 f8f3 	bl	8008002 <HAL_UART_Transmit>
 8005e1c:	e006      	b.n	8005e2c <SendCommand+0xa4>
	}
	else
	{
		HAL_UART_Transmit(&huart1, "Fail\r\n", 6, HAL_MAX_DELAY);
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e22:	2206      	movs	r2, #6
 8005e24:	490c      	ldr	r1, [pc, #48]	; (8005e58 <SendCommand+0xd0>)
 8005e26:	480a      	ldr	r0, [pc, #40]	; (8005e50 <SendCommand+0xc8>)
 8005e28:	f002 f8eb 	bl	8008002 <HAL_UART_Transmit>
	}
	HAL_Delay(1000);
 8005e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e30:	f000 fc5a 	bl	80066e8 <HAL_Delay>
}
 8005e34:	bf00      	nop
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40010800 	.word	0x40010800
 8005e44:	20001da4 	.word	0x20001da4
 8005e48:	200009dc 	.word	0x200009dc
 8005e4c:	080090a8 	.word	0x080090a8
 8005e50:	20001d64 	.word	0x20001d64
 8005e54:	080090b4 	.word	0x080090b4
 8005e58:	080090c0 	.word	0x080090c0

08005e5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b0bc      	sub	sp, #240	; 0xf0
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	if(Front1 < End1 - 1 && End1!=1)
 8005e64:	4b83      	ldr	r3, [pc, #524]	; (8006074 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b83      	ldr	r3, [pc, #524]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f280 80ca 	bge.w	800600a <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8005e76:	4b80      	ldr	r3, [pc, #512]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f000 80c5 	beq.w	800600a <HAL_TIM_PeriodElapsedCallback+0x1ae>
//		while(Front1 < End1-1 && End1!=1)
//		{
//			HAL_UART_Transmit(&huart1, &RxBuffer1[Front1++], 1, HAL_MAX_DELAY);
//		}
		char msg[200];
		for(int i=0;i<End1-1;i++){
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e86:	e010      	b.n	8005eaa <HAL_TIM_PeriodElapsedCallback+0x4e>
			msg[i] = RxBuffer1[i];
 8005e88:	4a7c      	ldr	r2, [pc, #496]	; (800607c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005e8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e8e:	4413      	add	r3, r2
 8005e90:	7819      	ldrb	r1, [r3, #0]
 8005e92:	f107 0208 	add.w	r2, r7, #8
 8005e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e9a:	4413      	add	r3, r2
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<End1-1;i++){
 8005ea0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005eaa:	4b73      	ldr	r3, [pc, #460]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	dbe7      	blt.n	8005e88 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		int IsSending = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		if(End1 - 1>=5 &&msg[0] == 's' && msg[1] == 'e' && msg[2] == 'n' && msg[3] == 'd' && msg[4] ==':')
 8005ebe:	4b6e      	ldr	r3, [pc, #440]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	dd11      	ble.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
 8005ec8:	7a3b      	ldrb	r3, [r7, #8]
 8005eca:	2b73      	cmp	r3, #115	; 0x73
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
 8005ece:	7a7b      	ldrb	r3, [r7, #9]
 8005ed0:	2b65      	cmp	r3, #101	; 0x65
 8005ed2:	d10b      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
 8005ed4:	7abb      	ldrb	r3, [r7, #10]
 8005ed6:	2b6e      	cmp	r3, #110	; 0x6e
 8005ed8:	d108      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	2b64      	cmp	r3, #100	; 0x64
 8005ede:	d105      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
 8005ee0:	7b3b      	ldrb	r3, [r7, #12]
 8005ee2:	2b3a      	cmp	r3, #58	; 0x3a
 8005ee4:	d102      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x90>
			IsSending = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		if(IsSending){
 8005eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03b      	beq.n	8005f6c <HAL_TIM_PeriodElapsedCallback+0x110>
			char SendDataCommand[22];
			if(Mode == 1)
 8005ef4:	4b62      	ldr	r3, [pc, #392]	; (8006080 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d109      	bne.n	8005f10 <HAL_TIM_PeriodElapsedCallback+0xb4>
				sprintf(SendDataCommand, "AT+CIPSEND=0,%d\r\n", End1-1-5);
 8005efc:	4b5e      	ldr	r3, [pc, #376]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	1f9a      	subs	r2, r3, #6
 8005f02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f06:	495f      	ldr	r1, [pc, #380]	; (8006084 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f002 fc95 	bl	8008838 <siprintf>
 8005f0e:	e00c      	b.n	8005f2a <HAL_TIM_PeriodElapsedCallback+0xce>
			else if(Mode == 4)
 8005f10:	4b5b      	ldr	r3, [pc, #364]	; (8006080 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d108      	bne.n	8005f2a <HAL_TIM_PeriodElapsedCallback+0xce>
				sprintf(SendDataCommand, "AT+CIPSEND=%d\r\n", End1-1-5);
 8005f18:	4b57      	ldr	r3, [pc, #348]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	1f9a      	subs	r2, r3, #6
 8005f1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f22:	4959      	ldr	r1, [pc, #356]	; (8006088 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 fc87 	bl	8008838 <siprintf>
			HAL_UART_Transmit(&huart2, SendDataCommand, 22, HAL_MAX_DELAY); //send command to wifi
 8005f2a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	2216      	movs	r2, #22
 8005f34:	4855      	ldr	r0, [pc, #340]	; (800608c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005f36:	f002 f864 	bl	8008002 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, &msg[5], End1-1-5, HAL_MAX_DELAY);	//message echo
 8005f3a:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	3b06      	subs	r3, #6
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	1d59      	adds	r1, r3, #5
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	4850      	ldr	r0, [pc, #320]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005f4e:	f002 f858 	bl	8008002 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &msg[5], End1-1-5, HAL_MAX_DELAY);	//send message to wifi
 8005f52:	4b49      	ldr	r3, [pc, #292]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	3b06      	subs	r3, #6
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f107 0308 	add.w	r3, r7, #8
 8005f5e:	1d59      	adds	r1, r3, #5
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	4849      	ldr	r0, [pc, #292]	; (800608c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005f66:	f002 f84c 	bl	8008002 <HAL_UART_Transmit>
 8005f6a:	e026      	b.n	8005fba <HAL_TIM_PeriodElapsedCallback+0x15e>
		} else {
			msg[End1-1] = '\r';
 8005f6c:	4b42      	ldr	r3, [pc, #264]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005f76:	4413      	add	r3, r2
 8005f78:	220d      	movs	r2, #13
 8005f7a:	f803 2ce8 	strb.w	r2, [r3, #-232]
			msg[End1] = '\n';
 8005f7e:	4b3e      	ldr	r3, [pc, #248]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005f86:	4413      	add	r3, r2
 8005f88:	220a      	movs	r2, #10
 8005f8a:	f803 2ce8 	strb.w	r2, [r3, #-232]
			HAL_UART_Transmit(&huart1,&msg,End1+1,HAL_MAX_DELAY);
 8005f8e:	4b3a      	ldr	r3, [pc, #232]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f107 0108 	add.w	r1, r7, #8
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	483c      	ldr	r0, [pc, #240]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005fa0:	f002 f82f 	bl	8008002 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,&msg,End1+1,HAL_MAX_DELAY);
 8005fa4:	4b34      	ldr	r3, [pc, #208]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f107 0108 	add.w	r1, r7, #8
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	4835      	ldr	r0, [pc, #212]	; (800608c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005fb6:	f002 f824 	bl	8008002 <HAL_UART_Transmit>
		}
		//reset USART1
		Front1 = 0;
 8005fba:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	801a      	strh	r2, [r3, #0]
		End1 = 0;
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	801a      	strh	r2, [r3, #0]
		(&huart1)->RxState = 32;
 8005fc6:	4b32      	ldr	r3, [pc, #200]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 8005fce:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	b291      	uxth	r1, r2
 8005fd6:	4a28      	ldr	r2, [pc, #160]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005fd8:	8011      	strh	r1, [r2, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005fde:	4413      	add	r3, r2
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	482a      	ldr	r0, [pc, #168]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005fe6:	f002 f89e 	bl	8008126 <HAL_UART_Receive_IT>
	}

	while(Front2 < End2 - 1 && End2!=1)
 8005fea:	e00e      	b.n	800600a <HAL_TIM_PeriodElapsedCallback+0x1ae>
	{
		HAL_UART_Transmit(&huart1, &RxBuffer2[Front2++], 1, HAL_MAX_DELAY);
 8005fec:	4b29      	ldr	r3, [pc, #164]	; (8006094 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	b291      	uxth	r1, r2
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ff6:	8011      	strh	r1, [r2, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ffc:	18d1      	adds	r1, r2, r3
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	2201      	movs	r2, #1
 8006004:	4822      	ldr	r0, [pc, #136]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006006:	f001 fffc 	bl	8008002 <HAL_UART_Transmit>
	while(Front2 < End2 - 1 && End2!=1)
 800600a:	4b22      	ldr	r3, [pc, #136]	; (8006094 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	4b22      	ldr	r3, [pc, #136]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	3b01      	subs	r3, #1
 8006016:	429a      	cmp	r2, r3
 8006018:	da03      	bge.n	8006022 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d1e4      	bne.n	8005fec <HAL_TIM_PeriodElapsedCallback+0x190>
	}
	if(Front2 >= End2 - 1 && End2 != 1)
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	429a      	cmp	r2, r3
 8006030:	db1b      	blt.n	800606a <HAL_TIM_PeriodElapsedCallback+0x20e>
 8006032:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d017      	beq.n	800606a <HAL_TIM_PeriodElapsedCallback+0x20e>
	{
		Front2 = 0;
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800603c:	2200      	movs	r2, #0
 800603e:	801a      	strh	r2, [r3, #0]
		End2 = 0;
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006042:	2200      	movs	r2, #0
 8006044:	801a      	strh	r2, [r3, #0]
		(&huart2)->RxState = 32;
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	b291      	uxth	r1, r2
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006058:	8011      	strh	r1, [r2, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800605e:	4413      	add	r3, r2
 8006060:	2201      	movs	r2, #1
 8006062:	4619      	mov	r1, r3
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006066:	f002 f85e 	bl	8008126 <HAL_UART_Receive_IT>
	}
}
 800606a:	bf00      	nop
 800606c:	37f0      	adds	r7, #240	; 0xf0
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	2000019c 	.word	0x2000019c
 8006078:	200001a0 	.word	0x200001a0
 800607c:	20001de4 	.word	0x20001de4
 8006080:	200001a4 	.word	0x200001a4
 8006084:	080090c8 	.word	0x080090c8
 8006088:	080090dc 	.word	0x080090dc
 800608c:	20001da4 	.word	0x20001da4
 8006090:	20001d64 	.word	0x20001d64
 8006094:	2000019e 	.word	0x2000019e
 8006098:	200009dc 	.word	0x200009dc
 800609c:	200001a2 	.word	0x200001a2

080060a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <HAL_UART_RxCpltCallback+0x58>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10d      	bne.n	80060cc <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 80060b0:	4b12      	ldr	r3, [pc, #72]	; (80060fc <HAL_UART_RxCpltCallback+0x5c>)
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	b291      	uxth	r1, r2
 80060b8:	4a10      	ldr	r2, [pc, #64]	; (80060fc <HAL_UART_RxCpltCallback+0x5c>)
 80060ba:	8011      	strh	r1, [r2, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_UART_RxCpltCallback+0x60>)
 80060c0:	4413      	add	r3, r2
 80060c2:	2201      	movs	r2, #1
 80060c4:	4619      	mov	r1, r3
 80060c6:	480c      	ldr	r0, [pc, #48]	; (80060f8 <HAL_UART_RxCpltCallback+0x58>)
 80060c8:	f002 f82d 	bl	8008126 <HAL_UART_Receive_IT>
	}
	if (huart == &huart2)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <HAL_UART_RxCpltCallback+0x64>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10d      	bne.n	80060f0 <HAL_UART_RxCpltCallback+0x50>
	{
		HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <HAL_UART_RxCpltCallback+0x68>)
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	b291      	uxth	r1, r2
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_UART_RxCpltCallback+0x68>)
 80060de:	8011      	strh	r1, [r2, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_UART_RxCpltCallback+0x6c>)
 80060e4:	4413      	add	r3, r2
 80060e6:	2201      	movs	r2, #1
 80060e8:	4619      	mov	r1, r3
 80060ea:	4806      	ldr	r0, [pc, #24]	; (8006104 <HAL_UART_RxCpltCallback+0x64>)
 80060ec:	f002 f81b 	bl	8008126 <HAL_UART_Receive_IT>
	}
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20001d64 	.word	0x20001d64
 80060fc:	200001a0 	.word	0x200001a0
 8006100:	20001de4 	.word	0x20001de4
 8006104:	20001da4 	.word	0x20001da4
 8006108:	200001a2 	.word	0x200001a2
 800610c:	200009dc 	.word	0x200009dc

08006110 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b20      	cmp	r3, #32
 800611e:	d006      	beq.n	800612e <HAL_GPIO_EXTI_Callback+0x1e>
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006124:	d048      	beq.n	80061b8 <HAL_GPIO_EXTI_Callback+0xa8>
 8006126:	2b01      	cmp	r3, #1
 8006128:	f000 8092 	beq.w	8006250 <HAL_GPIO_EXTI_Callback+0x140>
			//SendCommand(CloseSerialNet, ResponseOK, DefaultTimeout);
			SendCommand(CloseConnection, ResponseOK, DefaultTimeout);
		}
		break;
	default:
		break;
 800612c:	e0a4      	b.n	8006278 <HAL_GPIO_EXTI_Callback+0x168>
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800612e:	2120      	movs	r1, #32
 8006130:	4853      	ldr	r0, [pc, #332]	; (8006280 <HAL_GPIO_EXTI_Callback+0x170>)
 8006132:	f000 fe7b 	bl	8006e2c <HAL_GPIO_ReadPin>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 8098 	bne.w	800626e <HAL_GPIO_EXTI_Callback+0x15e>
			HAL_UART_Transmit(&huart1, "SetSTA\r\n", 8, HAL_MAX_DELAY);
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	2208      	movs	r2, #8
 8006144:	494f      	ldr	r1, [pc, #316]	; (8006284 <HAL_GPIO_EXTI_Callback+0x174>)
 8006146:	4850      	ldr	r0, [pc, #320]	; (8006288 <HAL_GPIO_EXTI_Callback+0x178>)
 8006148:	f001 ff5b 	bl	8008002 <HAL_UART_Transmit>
			SendCommand(SetSTAMode, ResponseOK, DefaultTimeout);
 800614c:	4b4f      	ldr	r3, [pc, #316]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	494f      	ldr	r1, [pc, #316]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006154:	484f      	ldr	r0, [pc, #316]	; (8006294 <HAL_GPIO_EXTI_Callback+0x184>)
 8006156:	f7ff fe17 	bl	8005d88 <SendCommand>
			SendCommand(Reset, ResponseOK, DefaultTimeout);
 800615a:	4b4c      	ldr	r3, [pc, #304]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	494b      	ldr	r1, [pc, #300]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006162:	484d      	ldr	r0, [pc, #308]	; (8006298 <HAL_GPIO_EXTI_Callback+0x188>)
 8006164:	f7ff fe10 	bl	8005d88 <SendCommand>
			HAL_Delay(1000);
 8006168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800616c:	f000 fabc 	bl	80066e8 <HAL_Delay>
			HAL_Delay(1000);
 8006170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006174:	f000 fab8 	bl	80066e8 <HAL_Delay>
			SendCommand(Default_ConnectToWiFi, ResponseOK, DefaultTimeout);
 8006178:	4b44      	ldr	r3, [pc, #272]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	4944      	ldr	r1, [pc, #272]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006180:	4846      	ldr	r0, [pc, #280]	; (800629c <HAL_GPIO_EXTI_Callback+0x18c>)
 8006182:	f7ff fe01 	bl	8005d88 <SendCommand>
			SendCommand(SetSingleConnect, ResponseOK, DefaultTimeout);
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	4940      	ldr	r1, [pc, #256]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 800618e:	4844      	ldr	r0, [pc, #272]	; (80062a0 <HAL_GPIO_EXTI_Callback+0x190>)
 8006190:	f7ff fdfa 	bl	8005d88 <SendCommand>
			SendCommand(Default_ConnectToTCPServer, ResponseOK, DefaultTimeout);
 8006194:	4b3d      	ldr	r3, [pc, #244]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	493d      	ldr	r1, [pc, #244]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 800619c:	4841      	ldr	r0, [pc, #260]	; (80062a4 <HAL_GPIO_EXTI_Callback+0x194>)
 800619e:	f7ff fdf3 	bl	8005d88 <SendCommand>
			Mode = 4;
 80061a2:	4b41      	ldr	r3, [pc, #260]	; (80062a8 <HAL_GPIO_EXTI_Callback+0x198>)
 80061a4:	2204      	movs	r2, #4
 80061a6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ac:	2208      	movs	r2, #8
 80061ae:	493f      	ldr	r1, [pc, #252]	; (80062ac <HAL_GPIO_EXTI_Callback+0x19c>)
 80061b0:	4835      	ldr	r0, [pc, #212]	; (8006288 <HAL_GPIO_EXTI_Callback+0x178>)
 80061b2:	f001 ff26 	bl	8008002 <HAL_UART_Transmit>
		break;
 80061b6:	e05a      	b.n	800626e <HAL_GPIO_EXTI_Callback+0x15e>
		if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 80061b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061bc:	483c      	ldr	r0, [pc, #240]	; (80062b0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80061be:	f000 fe35 	bl	8006e2c <HAL_GPIO_ReadPin>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d154      	bne.n	8006272 <HAL_GPIO_EXTI_Callback+0x162>
			HAL_UART_Transmit(&huart1, "SetAP\r\n", 7, HAL_MAX_DELAY);
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	2207      	movs	r2, #7
 80061ce:	4939      	ldr	r1, [pc, #228]	; (80062b4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80061d0:	482d      	ldr	r0, [pc, #180]	; (8006288 <HAL_GPIO_EXTI_Callback+0x178>)
 80061d2:	f001 ff16 	bl	8008002 <HAL_UART_Transmit>
			SendCommand(SetAPMode, ResponseOK, DefaultTimeout);
 80061d6:	4b2d      	ldr	r3, [pc, #180]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	492c      	ldr	r1, [pc, #176]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 80061de:	4836      	ldr	r0, [pc, #216]	; (80062b8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80061e0:	f7ff fdd2 	bl	8005d88 <SendCommand>
			SendCommand(Reset, ResponseOK, DefaultTimeout);
 80061e4:	4b29      	ldr	r3, [pc, #164]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	4929      	ldr	r1, [pc, #164]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 80061ec:	482a      	ldr	r0, [pc, #168]	; (8006298 <HAL_GPIO_EXTI_Callback+0x188>)
 80061ee:	f7ff fdcb 	bl	8005d88 <SendCommand>
			HAL_Delay(1000);
 80061f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061f6:	f000 fa77 	bl	80066e8 <HAL_Delay>
			HAL_Delay(1000);
 80061fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061fe:	f000 fa73 	bl	80066e8 <HAL_Delay>
		    SendCommand(Default_SetWiFiInfo, ResponseOK, DefaultTimeout);
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	4921      	ldr	r1, [pc, #132]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 800620a:	482c      	ldr	r0, [pc, #176]	; (80062bc <HAL_GPIO_EXTI_Callback+0x1ac>)
 800620c:	f7ff fdbc 	bl	8005d88 <SendCommand>
			SendCommand(Default_SetServerIP, ResponseOK, DefaultTimeout);
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	491e      	ldr	r1, [pc, #120]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006218:	4829      	ldr	r0, [pc, #164]	; (80062c0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800621a:	f7ff fdb5 	bl	8005d88 <SendCommand>
			SendCommand(SetMultiConnect, ResponseOK, DefaultTimeout);
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	491a      	ldr	r1, [pc, #104]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006226:	4827      	ldr	r0, [pc, #156]	; (80062c4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8006228:	f7ff fdae 	bl	8005d88 <SendCommand>
			SendCommand(Default_StartServerAndSetPort, ResponseOK, DefaultTimeout);
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	4917      	ldr	r1, [pc, #92]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006234:	4824      	ldr	r0, [pc, #144]	; (80062c8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8006236:	f7ff fda7 	bl	8005d88 <SendCommand>
			Mode = 1;
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <HAL_GPIO_EXTI_Callback+0x198>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
 8006244:	2208      	movs	r2, #8
 8006246:	4919      	ldr	r1, [pc, #100]	; (80062ac <HAL_GPIO_EXTI_Callback+0x19c>)
 8006248:	480f      	ldr	r0, [pc, #60]	; (8006288 <HAL_GPIO_EXTI_Callback+0x178>)
 800624a:	f001 feda 	bl	8008002 <HAL_UART_Transmit>
		break;
 800624e:	e010      	b.n	8006272 <HAL_GPIO_EXTI_Callback+0x162>
		if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 8006250:	2101      	movs	r1, #1
 8006252:	4817      	ldr	r0, [pc, #92]	; (80062b0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8006254:	f000 fdea 	bl	8006e2c <HAL_GPIO_ReadPin>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10b      	bne.n	8006276 <HAL_GPIO_EXTI_Callback+0x166>
			SendCommand(CloseConnection, ResponseOK, DefaultTimeout);
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_GPIO_EXTI_Callback+0x17c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	490a      	ldr	r1, [pc, #40]	; (8006290 <HAL_GPIO_EXTI_Callback+0x180>)
 8006266:	4819      	ldr	r0, [pc, #100]	; (80062cc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8006268:	f7ff fd8e 	bl	8005d88 <SendCommand>
		break;
 800626c:	e003      	b.n	8006276 <HAL_GPIO_EXTI_Callback+0x166>
		break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <HAL_GPIO_EXTI_Callback+0x168>
		break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_GPIO_EXTI_Callback+0x168>
		break;
 8006276:	bf00      	nop
	}
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40011000 	.word	0x40011000
 8006284:	080090ec 	.word	0x080090ec
 8006288:	20001d64 	.word	0x20001d64
 800628c:	20000108 	.word	0x20000108
 8006290:	2000010c 	.word	0x2000010c
 8006294:	200000a8 	.word	0x200000a8
 8006298:	20000000 	.word	0x20000000
 800629c:	200000b8 	.word	0x200000b8
 80062a0:	2000000c 	.word	0x2000000c
 80062a4:	200000dc 	.word	0x200000dc
 80062a8:	200001a4 	.word	0x200001a4
 80062ac:	080090f8 	.word	0x080090f8
 80062b0:	40010800 	.word	0x40010800
 80062b4:	08009104 	.word	0x08009104
 80062b8:	2000003c 	.word	0x2000003c
 80062bc:	2000004c 	.word	0x2000004c
 80062c0:	20000074 	.word	0x20000074
 80062c4:	2000001c 	.word	0x2000001c
 80062c8:	20000090 	.word	0x20000090
 80062cc:	2000002c 	.word	0x2000002c

080062d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80062e2:	4b16      	ldr	r3, [pc, #88]	; (800633c <HAL_MspInit+0x60>)
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	4a15      	ldr	r2, [pc, #84]	; (800633c <HAL_MspInit+0x60>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6193      	str	r3, [r2, #24]
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <HAL_MspInit+0x60>)
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_MspInit+0x60>)
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	4a0f      	ldr	r2, [pc, #60]	; (800633c <HAL_MspInit+0x60>)
 8006300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006304:	61d3      	str	r3, [r2, #28]
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <HAL_MspInit+0x60>)
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006312:	2005      	movs	r0, #5
 8006314:	f000 fad6 	bl	80068c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <HAL_MspInit+0x64>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	4a04      	ldr	r2, [pc, #16]	; (8006340 <HAL_MspInit+0x64>)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40021000 	.word	0x40021000
 8006340:	40010000 	.word	0x40010000

08006344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0d      	ldr	r2, [pc, #52]	; (8006388 <HAL_TIM_Base_MspInit+0x44>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d113      	bne.n	800637e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_TIM_Base_MspInit+0x48>)
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4a0c      	ldr	r2, [pc, #48]	; (800638c <HAL_TIM_Base_MspInit+0x48>)
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	61d3      	str	r3, [r2, #28]
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <HAL_TIM_Base_MspInit+0x48>)
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800636e:	2200      	movs	r2, #0
 8006370:	2100      	movs	r1, #0
 8006372:	201d      	movs	r0, #29
 8006374:	f000 fab1 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006378:	201d      	movs	r0, #29
 800637a:	f000 faca 	bl	8006912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40000400 	.word	0x40000400
 800638c:	40021000 	.word	0x40021000

08006390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0318 	add.w	r3, r7, #24
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <HAL_UART_MspInit+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d13a      	bne.n	8006426 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063b0:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ba:	6193      	str	r3, [r2, #24]
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c8:	4b38      	ldr	r3, [pc, #224]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	4a37      	ldr	r2, [pc, #220]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063ce:	f043 0304 	orr.w	r3, r3, #4
 80063d2:	6193      	str	r3, [r2, #24]
 80063d4:	4b35      	ldr	r3, [pc, #212]	; (80064ac <HAL_UART_MspInit+0x11c>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80063e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e6:	2302      	movs	r3, #2
 80063e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063ea:	2303      	movs	r3, #3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ee:	f107 0318 	add.w	r3, r7, #24
 80063f2:	4619      	mov	r1, r3
 80063f4:	482e      	ldr	r0, [pc, #184]	; (80064b0 <HAL_UART_MspInit+0x120>)
 80063f6:	f000 fbaf 	bl	8006b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006400:	2300      	movs	r3, #0
 8006402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006404:	2300      	movs	r3, #0
 8006406:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006408:	f107 0318 	add.w	r3, r7, #24
 800640c:	4619      	mov	r1, r3
 800640e:	4828      	ldr	r0, [pc, #160]	; (80064b0 <HAL_UART_MspInit+0x120>)
 8006410:	f000 fba2 	bl	8006b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	2025      	movs	r0, #37	; 0x25
 800641a:	f000 fa5e 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800641e:	2025      	movs	r0, #37	; 0x25
 8006420:	f000 fa77 	bl	8006912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006424:	e03c      	b.n	80064a0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <HAL_UART_MspInit+0x124>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d137      	bne.n	80064a0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006430:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <HAL_UART_MspInit+0x11c>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_UART_MspInit+0x11c>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643a:	61d3      	str	r3, [r2, #28]
 800643c:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <HAL_UART_MspInit+0x11c>)
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006448:	4b18      	ldr	r3, [pc, #96]	; (80064ac <HAL_UART_MspInit+0x11c>)
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_UART_MspInit+0x11c>)
 800644e:	f043 0304 	orr.w	r3, r3, #4
 8006452:	6193      	str	r3, [r2, #24]
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <HAL_UART_MspInit+0x11c>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006460:	2304      	movs	r3, #4
 8006462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006464:	2302      	movs	r3, #2
 8006466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006468:	2303      	movs	r3, #3
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	4619      	mov	r1, r3
 8006472:	480f      	ldr	r0, [pc, #60]	; (80064b0 <HAL_UART_MspInit+0x120>)
 8006474:	f000 fb70 	bl	8006b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006478:	2308      	movs	r3, #8
 800647a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006484:	f107 0318 	add.w	r3, r7, #24
 8006488:	4619      	mov	r1, r3
 800648a:	4809      	ldr	r0, [pc, #36]	; (80064b0 <HAL_UART_MspInit+0x120>)
 800648c:	f000 fb64 	bl	8006b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8006490:	2201      	movs	r2, #1
 8006492:	2100      	movs	r1, #0
 8006494:	2026      	movs	r0, #38	; 0x26
 8006496:	f000 fa20 	bl	80068da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800649a:	2026      	movs	r0, #38	; 0x26
 800649c:	f000 fa39 	bl	8006912 <HAL_NVIC_EnableIRQ>
}
 80064a0:	bf00      	nop
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40013800 	.word	0x40013800
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40010800 	.word	0x40010800
 80064b4:	40004400 	.word	0x40004400

080064b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064c8:	e7fe      	b.n	80064c8 <HardFault_Handler+0x4>

080064ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ca:	b480      	push	{r7}
 80064cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064ce:	e7fe      	b.n	80064ce <MemManage_Handler+0x4>

080064d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064d4:	e7fe      	b.n	80064d4 <BusFault_Handler+0x4>

080064d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064d6:	b480      	push	{r7}
 80064d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064da:	e7fe      	b.n	80064da <UsageFault_Handler+0x4>

080064dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064ec:	bf00      	nop
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064f8:	bf00      	nop
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006504:	f000 f8d4 	bl	80066b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}

0800650c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006510:	2001      	movs	r0, #1
 8006512:	f000 fcd3 	bl	8006ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}

0800651a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800651e:	2020      	movs	r0, #32
 8006520:	f000 fccc 	bl	8006ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}

08006528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800652c:	4802      	ldr	r0, [pc, #8]	; (8006538 <TIM3_IRQHandler+0x10>)
 800652e:	f001 f9a9 	bl	8007884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000994 	.word	0x20000994

0800653c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006540:	4802      	ldr	r0, [pc, #8]	; (800654c <USART1_IRQHandler+0x10>)
 8006542:	f001 fe45 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001d64 	.word	0x20001d64

08006550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006554:	4802      	ldr	r0, [pc, #8]	; (8006560 <USART2_IRQHandler+0x10>)
 8006556:	f001 fe3b 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800655a:	bf00      	nop
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20001da4 	.word	0x20001da4

08006564 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006568:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800656c:	f000 fca6 	bl	8006ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006570:	bf00      	nop
 8006572:	bd80      	pop	{r7, pc}

08006574 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <_sbrk+0x50>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <_sbrk+0x16>
		heap_end = &end;
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <_sbrk+0x50>)
 8006586:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <_sbrk+0x54>)
 8006588:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800658a:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <_sbrk+0x50>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <_sbrk+0x50>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	466a      	mov	r2, sp
 800659a:	4293      	cmp	r3, r2
 800659c:	d907      	bls.n	80065ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800659e:	f002 f919 	bl	80087d4 <__errno>
 80065a2:	4602      	mov	r2, r0
 80065a4:	230c      	movs	r3, #12
 80065a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	e006      	b.n	80065bc <_sbrk+0x48>
	}

	heap_end += incr;
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <_sbrk+0x50>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a03      	ldr	r2, [pc, #12]	; (80065c4 <_sbrk+0x50>)
 80065b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200001a8 	.word	0x200001a8
 80065c8:	20003178 	.word	0x20003178

080065cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065d0:	bf00      	nop
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80065d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80065da:	e003      	b.n	80065e4 <LoopCopyDataInit>

080065dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80065de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80065e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80065e2:	3104      	adds	r1, #4

080065e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80065e4:	480a      	ldr	r0, [pc, #40]	; (8006610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80065e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80065ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80065ec:	d3f6      	bcc.n	80065dc <CopyDataInit>
  ldr r2, =_sbss
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80065f0:	e002      	b.n	80065f8 <LoopFillZerobss>

080065f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80065f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80065f4:	f842 3b04 	str.w	r3, [r2], #4

080065f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80065fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80065fc:	d3f9      	bcc.n	80065f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80065fe:	f7ff ffe5 	bl	80065cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006602:	f002 f8ed 	bl	80087e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006606:	f7ff f9f7 	bl	80059f8 <main>
  bx lr
 800660a:	4770      	bx	lr
  ldr r3, =_sidata
 800660c:	08009174 	.word	0x08009174
  ldr r0, =_sdata
 8006610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006614:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8006618:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800661c:	20003174 	.word	0x20003174

08006620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006620:	e7fe      	b.n	8006620 <ADC1_2_IRQHandler>
	...

08006624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_Init+0x28>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a07      	ldr	r2, [pc, #28]	; (800664c <HAL_Init+0x28>)
 800662e:	f043 0310 	orr.w	r3, r3, #16
 8006632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006634:	2003      	movs	r0, #3
 8006636:	f000 f945 	bl	80068c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800663a:	2000      	movs	r0, #0
 800663c:	f000 f808 	bl	8006650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006640:	f7ff fe4c 	bl	80062dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40022000 	.word	0x40022000

08006650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_InitTick+0x54>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <HAL_InitTick+0x58>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	4619      	mov	r1, r3
 8006662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006666:	fbb3 f3f1 	udiv	r3, r3, r1
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f95d 	bl	800692e <HAL_SYSTICK_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e00e      	b.n	800669c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b0f      	cmp	r3, #15
 8006682:	d80a      	bhi.n	800669a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006684:	2200      	movs	r2, #0
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	f04f 30ff 	mov.w	r0, #4294967295
 800668c:	f000 f925 	bl	80068da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006690:	4a06      	ldr	r2, [pc, #24]	; (80066ac <HAL_InitTick+0x5c>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000110 	.word	0x20000110
 80066a8:	20000118 	.word	0x20000118
 80066ac:	20000114 	.word	0x20000114

080066b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_IncTick+0x1c>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_IncTick+0x20>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4413      	add	r3, r2
 80066c0:	4a03      	ldr	r2, [pc, #12]	; (80066d0 <HAL_IncTick+0x20>)
 80066c2:	6013      	str	r3, [r2, #0]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr
 80066cc:	20000118 	.word	0x20000118
 80066d0:	2000316c 	.word	0x2000316c

080066d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return uwTick;
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <HAL_GetTick+0x10>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	2000316c 	.word	0x2000316c

080066e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066f0:	f7ff fff0 	bl	80066d4 <HAL_GetTick>
 80066f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d005      	beq.n	800670e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_Delay+0x40>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800670e:	bf00      	nop
 8006710:	f7ff ffe0 	bl	80066d4 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	429a      	cmp	r2, r3
 800671e:	d8f7      	bhi.n	8006710 <HAL_Delay+0x28>
  {
  }
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000118 	.word	0x20000118

0800672c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <__NVIC_SetPriorityGrouping+0x44>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006748:	4013      	ands	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800675e:	4a04      	ldr	r2, [pc, #16]	; (8006770 <__NVIC_SetPriorityGrouping+0x44>)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	60d3      	str	r3, [r2, #12]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	e000ed00 	.word	0xe000ed00

08006774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <__NVIC_GetPriorityGrouping+0x18>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 0307 	and.w	r3, r3, #7
}
 8006782:	4618      	mov	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	e000ed00 	.word	0xe000ed00

08006790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800679a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	db0b      	blt.n	80067ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	f003 021f 	and.w	r2, r3, #31
 80067a8:	4906      	ldr	r1, [pc, #24]	; (80067c4 <__NVIC_EnableIRQ+0x34>)
 80067aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	2001      	movs	r0, #1
 80067b2:	fa00 f202 	lsl.w	r2, r0, r2
 80067b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	e000e100 	.word	0xe000e100

080067c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	db0a      	blt.n	80067f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	490c      	ldr	r1, [pc, #48]	; (8006814 <__NVIC_SetPriority+0x4c>)
 80067e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e6:	0112      	lsls	r2, r2, #4
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	440b      	add	r3, r1
 80067ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067f0:	e00a      	b.n	8006808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4908      	ldr	r1, [pc, #32]	; (8006818 <__NVIC_SetPriority+0x50>)
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	3b04      	subs	r3, #4
 8006800:	0112      	lsls	r2, r2, #4
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	440b      	add	r3, r1
 8006806:	761a      	strb	r2, [r3, #24]
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	e000e100 	.word	0xe000e100
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	; 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f1c3 0307 	rsb	r3, r3, #7
 8006836:	2b04      	cmp	r3, #4
 8006838:	bf28      	it	cs
 800683a:	2304      	movcs	r3, #4
 800683c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3304      	adds	r3, #4
 8006842:	2b06      	cmp	r3, #6
 8006844:	d902      	bls.n	800684c <NVIC_EncodePriority+0x30>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3b03      	subs	r3, #3
 800684a:	e000      	b.n	800684e <NVIC_EncodePriority+0x32>
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	43da      	mvns	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	401a      	ands	r2, r3
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006864:	f04f 31ff 	mov.w	r1, #4294967295
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	43d9      	mvns	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006874:	4313      	orrs	r3, r2
         );
}
 8006876:	4618      	mov	r0, r3
 8006878:	3724      	adds	r7, #36	; 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3b01      	subs	r3, #1
 800688c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006890:	d301      	bcc.n	8006896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006892:	2301      	movs	r3, #1
 8006894:	e00f      	b.n	80068b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006896:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <SysTick_Config+0x40>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3b01      	subs	r3, #1
 800689c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800689e:	210f      	movs	r1, #15
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	f7ff ff90 	bl	80067c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <SysTick_Config+0x40>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <SysTick_Config+0x40>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010

080068c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff2d 	bl	800672c <__NVIC_SetPriorityGrouping>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af00      	add	r7, sp, #0
 80068e0:	4603      	mov	r3, r0
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068ec:	f7ff ff42 	bl	8006774 <__NVIC_GetPriorityGrouping>
 80068f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	6978      	ldr	r0, [r7, #20]
 80068f8:	f7ff ff90 	bl	800681c <NVIC_EncodePriority>
 80068fc:	4602      	mov	r2, r0
 80068fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff ff5f 	bl	80067c8 <__NVIC_SetPriority>
}
 800690a:	bf00      	nop
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	4603      	mov	r3, r0
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800691c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff ff35 	bl	8006790 <__NVIC_EnableIRQ>
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ffa2 	bl	8006880 <SysTick_Config>
 800693c:	4603      	mov	r3, r0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800695a:	2b02      	cmp	r3, #2
 800695c:	d005      	beq.n	800696a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e0d6      	b.n	8006b18 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 020e 	bic.w	r2, r2, #14
 8006978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <HAL_DMA_Abort_IT+0x1dc>)
 8006992:	429a      	cmp	r2, r3
 8006994:	d958      	bls.n	8006a48 <HAL_DMA_Abort_IT+0x100>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a63      	ldr	r2, [pc, #396]	; (8006b28 <HAL_DMA_Abort_IT+0x1e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d04f      	beq.n	8006a40 <HAL_DMA_Abort_IT+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a61      	ldr	r2, [pc, #388]	; (8006b2c <HAL_DMA_Abort_IT+0x1e4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d048      	beq.n	8006a3c <HAL_DMA_Abort_IT+0xf4>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a60      	ldr	r2, [pc, #384]	; (8006b30 <HAL_DMA_Abort_IT+0x1e8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d040      	beq.n	8006a36 <HAL_DMA_Abort_IT+0xee>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5e      	ldr	r2, [pc, #376]	; (8006b34 <HAL_DMA_Abort_IT+0x1ec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d038      	beq.n	8006a30 <HAL_DMA_Abort_IT+0xe8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5d      	ldr	r2, [pc, #372]	; (8006b38 <HAL_DMA_Abort_IT+0x1f0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d030      	beq.n	8006a2a <HAL_DMA_Abort_IT+0xe2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5b      	ldr	r2, [pc, #364]	; (8006b3c <HAL_DMA_Abort_IT+0x1f4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d028      	beq.n	8006a24 <HAL_DMA_Abort_IT+0xdc>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a53      	ldr	r2, [pc, #332]	; (8006b24 <HAL_DMA_Abort_IT+0x1dc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d020      	beq.n	8006a1e <HAL_DMA_Abort_IT+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <HAL_DMA_Abort_IT+0x1f8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d019      	beq.n	8006a1a <HAL_DMA_Abort_IT+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a56      	ldr	r2, [pc, #344]	; (8006b44 <HAL_DMA_Abort_IT+0x1fc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d012      	beq.n	8006a16 <HAL_DMA_Abort_IT+0xce>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_DMA_Abort_IT+0x200>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00a      	beq.n	8006a10 <HAL_DMA_Abort_IT+0xc8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a53      	ldr	r2, [pc, #332]	; (8006b4c <HAL_DMA_Abort_IT+0x204>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d102      	bne.n	8006a0a <HAL_DMA_Abort_IT+0xc2>
 8006a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a08:	e01b      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a0e:	e018      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a14:	e015      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a16:	2310      	movs	r3, #16
 8006a18:	e013      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e011      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a22:	e00e      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a28:	e00b      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a2e:	e008      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a34:	e005      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a3a:	e002      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	e000      	b.n	8006a42 <HAL_DMA_Abort_IT+0xfa>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4a43      	ldr	r2, [pc, #268]	; (8006b50 <HAL_DMA_Abort_IT+0x208>)
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	e057      	b.n	8006af8 <HAL_DMA_Abort_IT+0x1b0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a36      	ldr	r2, [pc, #216]	; (8006b28 <HAL_DMA_Abort_IT+0x1e0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04f      	beq.n	8006af2 <HAL_DMA_Abort_IT+0x1aa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <HAL_DMA_Abort_IT+0x1e4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d048      	beq.n	8006aee <HAL_DMA_Abort_IT+0x1a6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a33      	ldr	r2, [pc, #204]	; (8006b30 <HAL_DMA_Abort_IT+0x1e8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d040      	beq.n	8006ae8 <HAL_DMA_Abort_IT+0x1a0>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a32      	ldr	r2, [pc, #200]	; (8006b34 <HAL_DMA_Abort_IT+0x1ec>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d038      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x19a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a30      	ldr	r2, [pc, #192]	; (8006b38 <HAL_DMA_Abort_IT+0x1f0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d030      	beq.n	8006adc <HAL_DMA_Abort_IT+0x194>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <HAL_DMA_Abort_IT+0x1f4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d028      	beq.n	8006ad6 <HAL_DMA_Abort_IT+0x18e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <HAL_DMA_Abort_IT+0x1dc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d020      	beq.n	8006ad0 <HAL_DMA_Abort_IT+0x188>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <HAL_DMA_Abort_IT+0x1f8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d019      	beq.n	8006acc <HAL_DMA_Abort_IT+0x184>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <HAL_DMA_Abort_IT+0x1fc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d012      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0x180>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <HAL_DMA_Abort_IT+0x200>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x17a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <HAL_DMA_Abort_IT+0x204>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d102      	bne.n	8006abc <HAL_DMA_Abort_IT+0x174>
 8006ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aba:	e01b      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ac0:	e018      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac6:	e015      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	e013      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e011      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ad4:	e00e      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ad6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ada:	e00b      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ae0:	e008      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae6:	e005      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aec:	e002      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006aee:	2310      	movs	r3, #16
 8006af0:	e000      	b.n	8006af4 <HAL_DMA_Abort_IT+0x1ac>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <HAL_DMA_Abort_IT+0x20c>)
 8006af6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
    } 
  }
  return status;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40020080 	.word	0x40020080
 8006b28:	40020008 	.word	0x40020008
 8006b2c:	4002001c 	.word	0x4002001c
 8006b30:	40020030 	.word	0x40020030
 8006b34:	40020044 	.word	0x40020044
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	4002006c 	.word	0x4002006c
 8006b40:	40020408 	.word	0x40020408
 8006b44:	4002041c 	.word	0x4002041c
 8006b48:	40020430 	.word	0x40020430
 8006b4c:	40020444 	.word	0x40020444
 8006b50:	40020400 	.word	0x40020400
 8006b54:	40020000 	.word	0x40020000

08006b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b08b      	sub	sp, #44	; 0x2c
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b62:	2300      	movs	r3, #0
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b66:	2300      	movs	r3, #0
 8006b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b6a:	e133      	b.n	8006dd4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	f040 8122 	bne.w	8006dce <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b12      	cmp	r3, #18
 8006b90:	d034      	beq.n	8006bfc <HAL_GPIO_Init+0xa4>
 8006b92:	2b12      	cmp	r3, #18
 8006b94:	d80d      	bhi.n	8006bb2 <HAL_GPIO_Init+0x5a>
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d02b      	beq.n	8006bf2 <HAL_GPIO_Init+0x9a>
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d804      	bhi.n	8006ba8 <HAL_GPIO_Init+0x50>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d031      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d01c      	beq.n	8006be0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ba6:	e048      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d043      	beq.n	8006c34 <HAL_GPIO_Init+0xdc>
 8006bac:	2b11      	cmp	r3, #17
 8006bae:	d01b      	beq.n	8006be8 <HAL_GPIO_Init+0x90>
          break;
 8006bb0:	e043      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006bb2:	4a8f      	ldr	r2, [pc, #572]	; (8006df0 <HAL_GPIO_Init+0x298>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d026      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
 8006bb8:	4a8d      	ldr	r2, [pc, #564]	; (8006df0 <HAL_GPIO_Init+0x298>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d806      	bhi.n	8006bcc <HAL_GPIO_Init+0x74>
 8006bbe:	4a8d      	ldr	r2, [pc, #564]	; (8006df4 <HAL_GPIO_Init+0x29c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d020      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
 8006bc4:	4a8c      	ldr	r2, [pc, #560]	; (8006df8 <HAL_GPIO_Init+0x2a0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01d      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
          break;
 8006bca:	e036      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006bcc:	4a8b      	ldr	r2, [pc, #556]	; (8006dfc <HAL_GPIO_Init+0x2a4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d019      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
 8006bd2:	4a8b      	ldr	r2, [pc, #556]	; (8006e00 <HAL_GPIO_Init+0x2a8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d016      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
 8006bd8:	4a8a      	ldr	r2, [pc, #552]	; (8006e04 <HAL_GPIO_Init+0x2ac>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_GPIO_Init+0xae>
          break;
 8006bde:	e02c      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	623b      	str	r3, [r7, #32]
          break;
 8006be6:	e028      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	3304      	adds	r3, #4
 8006bee:	623b      	str	r3, [r7, #32]
          break;
 8006bf0:	e023      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	623b      	str	r3, [r7, #32]
          break;
 8006bfa:	e01e      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	330c      	adds	r3, #12
 8006c02:	623b      	str	r3, [r7, #32]
          break;
 8006c04:	e019      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c0e:	2304      	movs	r3, #4
 8006c10:	623b      	str	r3, [r7, #32]
          break;
 8006c12:	e012      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	611a      	str	r2, [r3, #16]
          break;
 8006c26:	e008      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c28:	2308      	movs	r3, #8
 8006c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	615a      	str	r2, [r3, #20]
          break;
 8006c32:	e002      	b.n	8006c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c34:	2300      	movs	r3, #0
 8006c36:	623b      	str	r3, [r7, #32]
          break;
 8006c38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2bff      	cmp	r3, #255	; 0xff
 8006c3e:	d801      	bhi.n	8006c44 <HAL_GPIO_Init+0xec>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	e001      	b.n	8006c48 <HAL_GPIO_Init+0xf0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3304      	adds	r3, #4
 8006c48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2bff      	cmp	r3, #255	; 0xff
 8006c4e:	d802      	bhi.n	8006c56 <HAL_GPIO_Init+0xfe>
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	e002      	b.n	8006c5c <HAL_GPIO_Init+0x104>
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	3b08      	subs	r3, #8
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	210f      	movs	r1, #15
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	401a      	ands	r2, r3
 8006c6e:	6a39      	ldr	r1, [r7, #32]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	431a      	orrs	r2, r3
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80a2 	beq.w	8006dce <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c8a:	4b5f      	ldr	r3, [pc, #380]	; (8006e08 <HAL_GPIO_Init+0x2b0>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	4a5e      	ldr	r2, [pc, #376]	; (8006e08 <HAL_GPIO_Init+0x2b0>)
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	6193      	str	r3, [r2, #24]
 8006c96:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <HAL_GPIO_Init+0x2b0>)
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006ca2:	4a5a      	ldr	r2, [pc, #360]	; (8006e0c <HAL_GPIO_Init+0x2b4>)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	089b      	lsrs	r3, r3, #2
 8006ca8:	3302      	adds	r3, #2
 8006caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	220f      	movs	r2, #15
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a51      	ldr	r2, [pc, #324]	; (8006e10 <HAL_GPIO_Init+0x2b8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01f      	beq.n	8006d0e <HAL_GPIO_Init+0x1b6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a50      	ldr	r2, [pc, #320]	; (8006e14 <HAL_GPIO_Init+0x2bc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d019      	beq.n	8006d0a <HAL_GPIO_Init+0x1b2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a4f      	ldr	r2, [pc, #316]	; (8006e18 <HAL_GPIO_Init+0x2c0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_GPIO_Init+0x1ae>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a4e      	ldr	r2, [pc, #312]	; (8006e1c <HAL_GPIO_Init+0x2c4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00d      	beq.n	8006d02 <HAL_GPIO_Init+0x1aa>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a4d      	ldr	r2, [pc, #308]	; (8006e20 <HAL_GPIO_Init+0x2c8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <HAL_GPIO_Init+0x1a6>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a4c      	ldr	r2, [pc, #304]	; (8006e24 <HAL_GPIO_Init+0x2cc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <HAL_GPIO_Init+0x1a2>
 8006cf6:	2305      	movs	r3, #5
 8006cf8:	e00a      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006cfa:	2306      	movs	r3, #6
 8006cfc:	e008      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006cfe:	2304      	movs	r3, #4
 8006d00:	e006      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006d02:	2303      	movs	r3, #3
 8006d04:	e004      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e002      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_GPIO_Init+0x1b8>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	f002 0203 	and.w	r2, r2, #3
 8006d16:	0092      	lsls	r2, r2, #2
 8006d18:	4093      	lsls	r3, r2
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006d20:	493a      	ldr	r1, [pc, #232]	; (8006e0c <HAL_GPIO_Init+0x2b4>)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	089b      	lsrs	r3, r3, #2
 8006d26:	3302      	adds	r3, #2
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d006      	beq.n	8006d48 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006d3a:	4b3b      	ldr	r3, [pc, #236]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	493a      	ldr	r1, [pc, #232]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]
 8006d46:	e006      	b.n	8006d56 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d48:	4b37      	ldr	r3, [pc, #220]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	4935      	ldr	r1, [pc, #212]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d62:	4b31      	ldr	r3, [pc, #196]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4930      	ldr	r1, [pc, #192]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	604b      	str	r3, [r1, #4]
 8006d6e:	e006      	b.n	8006d7e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d70:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	492b      	ldr	r1, [pc, #172]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d8a:	4b27      	ldr	r3, [pc, #156]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	4926      	ldr	r1, [pc, #152]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
 8006d96:	e006      	b.n	8006da6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	4921      	ldr	r1, [pc, #132]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006db2:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	491c      	ldr	r1, [pc, #112]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60cb      	str	r3, [r1, #12]
 8006dbe:	e006      	b.n	8006dce <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	4917      	ldr	r1, [pc, #92]	; (8006e28 <HAL_GPIO_Init+0x2d0>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f aec4 	bne.w	8006b6c <HAL_GPIO_Init+0x14>
  }
}
 8006de4:	bf00      	nop
 8006de6:	372c      	adds	r7, #44	; 0x2c
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	10210000 	.word	0x10210000
 8006df4:	10110000 	.word	0x10110000
 8006df8:	10120000 	.word	0x10120000
 8006dfc:	10310000 	.word	0x10310000
 8006e00:	10320000 	.word	0x10320000
 8006e04:	10220000 	.word	0x10220000
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40010800 	.word	0x40010800
 8006e14:	40010c00 	.word	0x40010c00
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40011400 	.word	0x40011400
 8006e20:	40011800 	.word	0x40011800
 8006e24:	40011c00 	.word	0x40011c00
 8006e28:	40010400 	.word	0x40010400

08006e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
 8006e48:	e001      	b.n	8006e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	807b      	strh	r3, [r7, #2]
 8006e66:	4613      	mov	r3, r2
 8006e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e6a:	787b      	ldrb	r3, [r7, #1]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e70:	887a      	ldrh	r2, [r7, #2]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e76:	e003      	b.n	8006e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e78:	887b      	ldrh	r3, [r7, #2]
 8006e7a:	041a      	lsls	r2, r3, #16
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	611a      	str	r2, [r3, #16]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	041a      	lsls	r2, r3, #16
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	43d9      	mvns	r1, r3
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	400b      	ands	r3, r1
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	611a      	str	r2, [r3, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ec8:	695a      	ldr	r2, [r3, #20]
 8006eca:	88fb      	ldrh	r3, [r7, #6]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ed2:	4a05      	ldr	r2, [pc, #20]	; (8006ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff f918 	bl	8006110 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40010400 	.word	0x40010400

08006eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e26c      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 8087 	beq.w	800701a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f0c:	4b92      	ldr	r3, [pc, #584]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 030c 	and.w	r3, r3, #12
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d00c      	beq.n	8006f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f18:	4b8f      	ldr	r3, [pc, #572]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 030c 	and.w	r3, r3, #12
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d112      	bne.n	8006f4a <HAL_RCC_OscConfig+0x5e>
 8006f24:	4b8c      	ldr	r3, [pc, #560]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f30:	d10b      	bne.n	8006f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f32:	4b89      	ldr	r3, [pc, #548]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d06c      	beq.n	8007018 <HAL_RCC_OscConfig+0x12c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d168      	bne.n	8007018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e246      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f52:	d106      	bne.n	8006f62 <HAL_RCC_OscConfig+0x76>
 8006f54:	4b80      	ldr	r3, [pc, #512]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7f      	ldr	r2, [pc, #508]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	e02e      	b.n	8006fc0 <HAL_RCC_OscConfig+0xd4>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10c      	bne.n	8006f84 <HAL_RCC_OscConfig+0x98>
 8006f6a:	4b7b      	ldr	r3, [pc, #492]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7a      	ldr	r2, [pc, #488]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4b78      	ldr	r3, [pc, #480]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a77      	ldr	r2, [pc, #476]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e01d      	b.n	8006fc0 <HAL_RCC_OscConfig+0xd4>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RCC_OscConfig+0xbc>
 8006f8e:	4b72      	ldr	r3, [pc, #456]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a71      	ldr	r2, [pc, #452]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	4b6f      	ldr	r3, [pc, #444]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	e00b      	b.n	8006fc0 <HAL_RCC_OscConfig+0xd4>
 8006fa8:	4b6b      	ldr	r3, [pc, #428]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6a      	ldr	r2, [pc, #424]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	4b68      	ldr	r3, [pc, #416]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a67      	ldr	r2, [pc, #412]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d013      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc8:	f7ff fb84 	bl	80066d4 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd0:	f7ff fb80 	bl	80066d4 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b64      	cmp	r3, #100	; 0x64
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e1fa      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b5d      	ldr	r3, [pc, #372]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0xe4>
 8006fee:	e014      	b.n	800701a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff0:	f7ff fb70 	bl	80066d4 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff8:	f7ff fb6c 	bl	80066d4 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e1e6      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800700a:	4b53      	ldr	r3, [pc, #332]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x10c>
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d063      	beq.n	80070ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007026:	4b4c      	ldr	r3, [pc, #304]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007032:	4b49      	ldr	r3, [pc, #292]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	2b08      	cmp	r3, #8
 800703c:	d11c      	bne.n	8007078 <HAL_RCC_OscConfig+0x18c>
 800703e:	4b46      	ldr	r3, [pc, #280]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d116      	bne.n	8007078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800704a:	4b43      	ldr	r3, [pc, #268]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_RCC_OscConfig+0x176>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d001      	beq.n	8007062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e1ba      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007062:	4b3d      	ldr	r3, [pc, #244]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4939      	ldr	r1, [pc, #228]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007076:	e03a      	b.n	80070ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007080:	4b36      	ldr	r3, [pc, #216]	; (800715c <HAL_RCC_OscConfig+0x270>)
 8007082:	2201      	movs	r2, #1
 8007084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007086:	f7ff fb25 	bl	80066d4 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800708e:	f7ff fb21 	bl	80066d4 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e19b      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a0:	4b2d      	ldr	r3, [pc, #180]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ac:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4927      	ldr	r1, [pc, #156]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	e015      	b.n	80070ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070c2:	4b26      	ldr	r3, [pc, #152]	; (800715c <HAL_RCC_OscConfig+0x270>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7ff fb04 	bl	80066d4 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070d0:	f7ff fb00 	bl	80066d4 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e17a      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d03a      	beq.n	8007170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d019      	beq.n	8007136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007102:	4b17      	ldr	r3, [pc, #92]	; (8007160 <HAL_RCC_OscConfig+0x274>)
 8007104:	2201      	movs	r2, #1
 8007106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007108:	f7ff fae4 	bl	80066d4 <HAL_GetTick>
 800710c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007110:	f7ff fae0 	bl	80066d4 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e15a      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007122:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <HAL_RCC_OscConfig+0x26c>)
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800712e:	2001      	movs	r0, #1
 8007130:	f000 fada 	bl	80076e8 <RCC_Delay>
 8007134:	e01c      	b.n	8007170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <HAL_RCC_OscConfig+0x274>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800713c:	f7ff faca 	bl	80066d4 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007142:	e00f      	b.n	8007164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7ff fac6 	bl	80066d4 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d908      	bls.n	8007164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e140      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000
 800715c:	42420000 	.word	0x42420000
 8007160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007164:	4b9e      	ldr	r3, [pc, #632]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e9      	bne.n	8007144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80a6 	beq.w	80072ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007182:	4b97      	ldr	r3, [pc, #604]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800718e:	4b94      	ldr	r3, [pc, #592]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	4a93      	ldr	r2, [pc, #588]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007198:	61d3      	str	r3, [r2, #28]
 800719a:	4b91      	ldr	r3, [pc, #580]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071aa:	4b8e      	ldr	r3, [pc, #568]	; (80073e4 <HAL_RCC_OscConfig+0x4f8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d118      	bne.n	80071e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071b6:	4b8b      	ldr	r3, [pc, #556]	; (80073e4 <HAL_RCC_OscConfig+0x4f8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a8a      	ldr	r2, [pc, #552]	; (80073e4 <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071c2:	f7ff fa87 	bl	80066d4 <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ca:	f7ff fa83 	bl	80066d4 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b64      	cmp	r3, #100	; 0x64
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e0fd      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071dc:	4b81      	ldr	r3, [pc, #516]	; (80073e4 <HAL_RCC_OscConfig+0x4f8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0f0      	beq.n	80071ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d106      	bne.n	80071fe <HAL_RCC_OscConfig+0x312>
 80071f0:	4b7b      	ldr	r3, [pc, #492]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	4a7a      	ldr	r2, [pc, #488]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	6213      	str	r3, [r2, #32]
 80071fc:	e02d      	b.n	800725a <HAL_RCC_OscConfig+0x36e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10c      	bne.n	8007220 <HAL_RCC_OscConfig+0x334>
 8007206:	4b76      	ldr	r3, [pc, #472]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	4a75      	ldr	r2, [pc, #468]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	6213      	str	r3, [r2, #32]
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	4a72      	ldr	r2, [pc, #456]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	6213      	str	r3, [r2, #32]
 800721e:	e01c      	b.n	800725a <HAL_RCC_OscConfig+0x36e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d10c      	bne.n	8007242 <HAL_RCC_OscConfig+0x356>
 8007228:	4b6d      	ldr	r3, [pc, #436]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	4a6c      	ldr	r2, [pc, #432]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800722e:	f043 0304 	orr.w	r3, r3, #4
 8007232:	6213      	str	r3, [r2, #32]
 8007234:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	4a69      	ldr	r2, [pc, #420]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6213      	str	r3, [r2, #32]
 8007240:	e00b      	b.n	800725a <HAL_RCC_OscConfig+0x36e>
 8007242:	4b67      	ldr	r3, [pc, #412]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	4a66      	ldr	r2, [pc, #408]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	6213      	str	r3, [r2, #32]
 800724e:	4b64      	ldr	r3, [pc, #400]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	4a63      	ldr	r2, [pc, #396]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007254:	f023 0304 	bic.w	r3, r3, #4
 8007258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d015      	beq.n	800728e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007262:	f7ff fa37 	bl	80066d4 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	e00a      	b.n	8007280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7ff fa33 	bl	80066d4 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e0ab      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	4b57      	ldr	r3, [pc, #348]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCC_OscConfig+0x37e>
 800728c:	e014      	b.n	80072b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728e:	f7ff fa21 	bl	80066d4 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007294:	e00a      	b.n	80072ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7ff fa1d 	bl	80066d4 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e095      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ac:	4b4c      	ldr	r3, [pc, #304]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1ee      	bne.n	8007296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d105      	bne.n	80072ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072be:	4b48      	ldr	r3, [pc, #288]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4a47      	ldr	r2, [pc, #284]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80072c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8081 	beq.w	80073d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072d4:	4b42      	ldr	r3, [pc, #264]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 030c 	and.w	r3, r3, #12
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d061      	beq.n	80073a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d146      	bne.n	8007376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e8:	4b3f      	ldr	r3, [pc, #252]	; (80073e8 <HAL_RCC_OscConfig+0x4fc>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ee:	f7ff f9f1 	bl	80066d4 <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f6:	f7ff f9ed 	bl	80066d4 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e067      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007308:	4b35      	ldr	r3, [pc, #212]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f0      	bne.n	80072f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731c:	d108      	bne.n	8007330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800731e:	4b30      	ldr	r3, [pc, #192]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	492d      	ldr	r1, [pc, #180]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007330:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a19      	ldr	r1, [r3, #32]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	430b      	orrs	r3, r1
 8007342:	4927      	ldr	r1, [pc, #156]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007344:	4313      	orrs	r3, r2
 8007346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007348:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <HAL_RCC_OscConfig+0x4fc>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734e:	f7ff f9c1 	bl	80066d4 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007356:	f7ff f9bd 	bl	80066d4 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e037      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x46a>
 8007374:	e02f      	b.n	80073d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007376:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <HAL_RCC_OscConfig+0x4fc>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737c:	f7ff f9aa 	bl	80066d4 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007384:	f7ff f9a6 	bl	80066d4 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e020      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x498>
 80073a2:	e018      	b.n	80073d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e013      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_OscConfig+0x4f4>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d106      	bne.n	80073d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d001      	beq.n	80073d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40007000 	.word	0x40007000
 80073e8:	42420060 	.word	0x42420060

080073ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0d0      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007400:	4b6a      	ldr	r3, [pc, #424]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d910      	bls.n	8007430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800740e:	4b67      	ldr	r3, [pc, #412]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f023 0207 	bic.w	r2, r3, #7
 8007416:	4965      	ldr	r1, [pc, #404]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	4313      	orrs	r3, r2
 800741c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800741e:	4b63      	ldr	r3, [pc, #396]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d001      	beq.n	8007430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0b8      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d020      	beq.n	800747e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007448:	4b59      	ldr	r3, [pc, #356]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4a58      	ldr	r2, [pc, #352]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 800744e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007460:	4b53      	ldr	r3, [pc, #332]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4a52      	ldr	r2, [pc, #328]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800746a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800746c:	4b50      	ldr	r3, [pc, #320]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	494d      	ldr	r1, [pc, #308]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 800747a:	4313      	orrs	r3, r2
 800747c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d040      	beq.n	800750c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007492:	4b47      	ldr	r3, [pc, #284]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d115      	bne.n	80074ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e07f      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d107      	bne.n	80074ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074aa:	4b41      	ldr	r3, [pc, #260]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e073      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ba:	4b3d      	ldr	r3, [pc, #244]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e06b      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ca:	4b39      	ldr	r3, [pc, #228]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f023 0203 	bic.w	r2, r3, #3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4936      	ldr	r1, [pc, #216]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074dc:	f7ff f8fa 	bl	80066d4 <HAL_GetTick>
 80074e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e4:	f7ff f8f6 	bl	80066d4 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e053      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fa:	4b2d      	ldr	r3, [pc, #180]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 020c 	and.w	r2, r3, #12
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	429a      	cmp	r2, r3
 800750a:	d1eb      	bne.n	80074e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d210      	bcs.n	800753c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f023 0207 	bic.w	r2, r3, #7
 8007522:	4922      	ldr	r1, [pc, #136]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <HAL_RCC_ClockConfig+0x1c0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e032      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007548:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4916      	ldr	r1, [pc, #88]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	490e      	ldr	r1, [pc, #56]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800757a:	f000 f821 	bl	80075c0 <HAL_RCC_GetSysClockFreq>
 800757e:	4601      	mov	r1, r0
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	091b      	lsrs	r3, r3, #4
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <HAL_RCC_ClockConfig+0x1c8>)
 800758c:	5cd3      	ldrb	r3, [r2, r3]
 800758e:	fa21 f303 	lsr.w	r3, r1, r3
 8007592:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <HAL_RCC_ClockConfig+0x1cc>)
 8007594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_RCC_ClockConfig+0x1d0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f858 	bl	8006650 <HAL_InitTick>

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40022000 	.word	0x40022000
 80075b0:	40021000 	.word	0x40021000
 80075b4:	08009120 	.word	0x08009120
 80075b8:	20000110 	.word	0x20000110
 80075bc:	20000114 	.word	0x20000114

080075c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c0:	b490      	push	{r4, r7}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80075c6:	4b2a      	ldr	r3, [pc, #168]	; (8007670 <HAL_RCC_GetSysClockFreq+0xb0>)
 80075c8:	1d3c      	adds	r4, r7, #4
 80075ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80075d0:	4b28      	ldr	r3, [pc, #160]	; (8007674 <HAL_RCC_GetSysClockFreq+0xb4>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	2300      	movs	r3, #0
 80075dc:	61bb      	str	r3, [r7, #24]
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80075ea:	4b23      	ldr	r3, [pc, #140]	; (8007678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 030c 	and.w	r3, r3, #12
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d002      	beq.n	8007600 <HAL_RCC_GetSysClockFreq+0x40>
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d003      	beq.n	8007606 <HAL_RCC_GetSysClockFreq+0x46>
 80075fe:	e02d      	b.n	800765c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007600:	4b1e      	ldr	r3, [pc, #120]	; (800767c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007602:	623b      	str	r3, [r7, #32]
      break;
 8007604:	e02d      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	0c9b      	lsrs	r3, r3, #18
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007612:	4413      	add	r3, r2
 8007614:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007618:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d013      	beq.n	800764c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	0c5b      	lsrs	r3, r3, #17
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007632:	4413      	add	r3, r2
 8007634:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007638:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4a0f      	ldr	r2, [pc, #60]	; (800767c <HAL_RCC_GetSysClockFreq+0xbc>)
 800763e:	fb02 f203 	mul.w	r2, r2, r3
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	fbb2 f3f3 	udiv	r3, r2, r3
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	e004      	b.n	8007656 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007650:	fb02 f303 	mul.w	r3, r2, r3
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	623b      	str	r3, [r7, #32]
      break;
 800765a:	e002      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <HAL_RCC_GetSysClockFreq+0xbc>)
 800765e:	623b      	str	r3, [r7, #32]
      break;
 8007660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007662:	6a3b      	ldr	r3, [r7, #32]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bc90      	pop	{r4, r7}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	0800910c 	.word	0x0800910c
 8007674:	0800911c 	.word	0x0800911c
 8007678:	40021000 	.word	0x40021000
 800767c:	007a1200 	.word	0x007a1200
 8007680:	003d0900 	.word	0x003d0900

08007684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <HAL_RCC_GetHCLKFreq+0x10>)
 800768a:	681b      	ldr	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr
 8007694:	20000110 	.word	0x20000110

08007698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800769c:	f7ff fff2 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076a0:	4601      	mov	r1, r0
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	0a1b      	lsrs	r3, r3, #8
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	4a03      	ldr	r2, [pc, #12]	; (80076bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ae:	5cd3      	ldrb	r3, [r2, r3]
 80076b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40021000 	.word	0x40021000
 80076bc:	08009130 	.word	0x08009130

080076c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076c4:	f7ff ffde 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076c8:	4601      	mov	r1, r0
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	0adb      	lsrs	r3, r3, #11
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	4a03      	ldr	r2, [pc, #12]	; (80076e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d6:	5cd3      	ldrb	r3, [r2, r3]
 80076d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076dc:	4618      	mov	r0, r3
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40021000 	.word	0x40021000
 80076e4:	08009130 	.word	0x08009130

080076e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <RCC_Delay+0x34>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <RCC_Delay+0x38>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0a5b      	lsrs	r3, r3, #9
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
 8007702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007704:	bf00      	nop
  }
  while (Delay --);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	1e5a      	subs	r2, r3, #1
 800770a:	60fa      	str	r2, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f9      	bne.n	8007704 <RCC_Delay+0x1c>
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000110 	.word	0x20000110
 8007720:	10624dd3 	.word	0x10624dd3

08007724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e041      	b.n	80077ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe fdfa 	bl	8006344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f000 fa72 	bl	8007c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d001      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e044      	b.n	8007866 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0201 	orr.w	r2, r2, #1
 80077f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1d      	ldr	r2, [pc, #116]	; (8007870 <HAL_TIM_Base_Start_IT+0xac>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x6c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1c      	ldr	r2, [pc, #112]	; (8007874 <HAL_TIM_Base_Start_IT+0xb0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007810:	d00e      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x6c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a18      	ldr	r2, [pc, #96]	; (8007878 <HAL_TIM_Base_Start_IT+0xb4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x6c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a16      	ldr	r2, [pc, #88]	; (800787c <HAL_TIM_Base_Start_IT+0xb8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x6c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a15      	ldr	r2, [pc, #84]	; (8007880 <HAL_TIM_Base_Start_IT+0xbc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d111      	bne.n	8007854 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b06      	cmp	r3, #6
 8007840:	d010      	beq.n	8007864 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e007      	b.n	8007864 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40013400 	.word	0x40013400
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00

08007884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b02      	cmp	r3, #2
 8007898:	d122      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d11b      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0202 	mvn.w	r2, #2
 80078b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9a4 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f997 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9a6 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d122      	bne.n	8007934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d11b      	bne.n	8007934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0204 	mvn.w	r2, #4
 8007904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f97a 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 8007920:	e005      	b.n	800792e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f96d 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f97c 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b08      	cmp	r3, #8
 8007940:	d122      	bne.n	8007988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d11b      	bne.n	8007988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0208 	mvn.w	r2, #8
 8007958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f950 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f943 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f952 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	2b10      	cmp	r3, #16
 8007994:	d122      	bne.n	80079dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d11b      	bne.n	80079dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0210 	mvn.w	r2, #16
 80079ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2208      	movs	r2, #8
 80079b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f926 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f919 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f928 	bl	8007c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d10e      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d107      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0201 	mvn.w	r2, #1
 8007a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fe fa2a 	bl	8005e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b80      	cmp	r3, #128	; 0x80
 8007a14:	d10e      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a20:	2b80      	cmp	r3, #128	; 0x80
 8007a22:	d107      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa91 	bl	8007f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d10e      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d107      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8ec 	bl	8007c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d10e      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d107      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0220 	mvn.w	r2, #32
 8007a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa5c 	bl	8007f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_TIM_ConfigClockSource+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e0a6      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x166>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d067      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x120>
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d80b      	bhi.n	8007b00 <HAL_TIM_ConfigClockSource+0x6c>
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d073      	beq.n	8007bd4 <HAL_TIM_ConfigClockSource+0x140>
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d802      	bhi.n	8007af6 <HAL_TIM_ConfigClockSource+0x62>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d06f      	beq.n	8007bd4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007af4:	e078      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d06c      	beq.n	8007bd4 <HAL_TIM_ConfigClockSource+0x140>
 8007afa:	2b30      	cmp	r3, #48	; 0x30
 8007afc:	d06a      	beq.n	8007bd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007afe:	e073      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b00:	2b70      	cmp	r3, #112	; 0x70
 8007b02:	d00d      	beq.n	8007b20 <HAL_TIM_ConfigClockSource+0x8c>
 8007b04:	2b70      	cmp	r3, #112	; 0x70
 8007b06:	d804      	bhi.n	8007b12 <HAL_TIM_ConfigClockSource+0x7e>
 8007b08:	2b50      	cmp	r3, #80	; 0x50
 8007b0a:	d033      	beq.n	8007b74 <HAL_TIM_ConfigClockSource+0xe0>
 8007b0c:	2b60      	cmp	r3, #96	; 0x60
 8007b0e:	d041      	beq.n	8007b94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007b10:	e06a      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b16:	d066      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x152>
 8007b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1c:	d017      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007b1e:	e063      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6899      	ldr	r1, [r3, #8]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f000 f97d 	bl	8007e2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	609a      	str	r2, [r3, #8]
      break;
 8007b4c:	e04c      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6899      	ldr	r1, [r3, #8]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f000 f966 	bl	8007e2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b70:	609a      	str	r2, [r3, #8]
      break;
 8007b72:	e039      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	6859      	ldr	r1, [r3, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f000 f8dd 	bl	8007d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2150      	movs	r1, #80	; 0x50
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f934 	bl	8007dfa <TIM_ITRx_SetConfig>
      break;
 8007b92:	e029      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f000 f8fb 	bl	8007d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2160      	movs	r1, #96	; 0x60
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f924 	bl	8007dfa <TIM_ITRx_SetConfig>
      break;
 8007bb2:	e019      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	f000 f8bd 	bl	8007d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2140      	movs	r1, #64	; 0x40
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f914 	bl	8007dfa <TIM_ITRx_SetConfig>
      break;
 8007bd2:	e009      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f000 f90b 	bl	8007dfa <TIM_ITRx_SetConfig>
        break;
 8007be4:	e000      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr

08007c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
	...

08007c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a33      	ldr	r2, [pc, #204]	; (8007d2c <TIM_Base_SetConfig+0xe0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d013      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a32      	ldr	r2, [pc, #200]	; (8007d30 <TIM_Base_SetConfig+0xe4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00f      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c72:	d00b      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <TIM_Base_SetConfig+0xe8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d007      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a2e      	ldr	r2, [pc, #184]	; (8007d38 <TIM_Base_SetConfig+0xec>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a2d      	ldr	r2, [pc, #180]	; (8007d3c <TIM_Base_SetConfig+0xf0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d108      	bne.n	8007c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <TIM_Base_SetConfig+0xe0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <TIM_Base_SetConfig+0x82>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <TIM_Base_SetConfig+0xe4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00f      	beq.n	8007cce <TIM_Base_SetConfig+0x82>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x82>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <TIM_Base_SetConfig+0xe8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x82>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <TIM_Base_SetConfig+0xec>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x82>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <TIM_Base_SetConfig+0xf0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <TIM_Base_SetConfig+0xe0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_Base_SetConfig+0xc8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <TIM_Base_SetConfig+0xe4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d103      	bne.n	8007d1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	615a      	str	r2, [r3, #20]
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40013400 	.word	0x40013400
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40000c00 	.word	0x40000c00

08007d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 030a 	bic.w	r3, r3, #10
 8007d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	f023 0210 	bic.w	r2, r3, #16
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	031b      	lsls	r3, r3, #12
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	f043 0307 	orr.w	r3, r3, #7
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	021a      	lsls	r2, r3, #8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	609a      	str	r2, [r3, #8]
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e050      	b.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d018      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a19      	ldr	r2, [pc, #100]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d00e      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d009      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a12      	ldr	r2, [pc, #72]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d10c      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr
 8007f30:	40012c00 	.word	0x40012c00
 8007f34:	40013400 	.word	0x40013400
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00

08007f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e03f      	b.n	8007ffa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fe f9fe 	bl	8006390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2224      	movs	r2, #36	; 0x24
 8007f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb83 	bl	80086b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695a      	ldr	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b08a      	sub	sp, #40	; 0x28
 8008006:	af02      	add	r7, sp, #8
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b20      	cmp	r3, #32
 8008020:	d17c      	bne.n	800811c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <HAL_UART_Transmit+0x2c>
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e075      	b.n	800811e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_UART_Transmit+0x3e>
 800803c:	2302      	movs	r3, #2
 800803e:	e06e      	b.n	800811e <HAL_UART_Transmit+0x11c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2221      	movs	r2, #33	; 0x21
 8008052:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008056:	f7fe fb3d 	bl	80066d4 <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008070:	d108      	bne.n	8008084 <HAL_UART_Transmit+0x82>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e003      	b.n	800808c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008094:	e02a      	b.n	80080ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2200      	movs	r2, #0
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f9a7 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e036      	b.n	800811e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	3302      	adds	r3, #2
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	e007      	b.n	80080de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	3301      	adds	r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1cf      	bne.n	8008096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	2140      	movs	r1, #64	; 0x40
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f977 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e006      	b.n	800811e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	4613      	mov	r3, r2
 8008132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b20      	cmp	r3, #32
 800813e:	d140      	bne.n	80081c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_UART_Receive_IT+0x26>
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e039      	b.n	80081c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_UART_Receive_IT+0x38>
 800815a:	2302      	movs	r3, #2
 800815c:	e032      	b.n	80081c4 <HAL_UART_Receive_IT+0x9e>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	88fa      	ldrh	r2, [r7, #6]
 8008176:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2222      	movs	r2, #34	; 0x22
 8008182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800819c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695a      	ldr	r2, [r3, #20]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0220 	orr.w	r2, r2, #32
 80081bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	e000      	b.n	80081c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
	...

080081d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10d      	bne.n	8008222 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <HAL_UART_IRQHandler+0x52>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9cc 	bl	80085b8 <UART_Receive_IT>
      return;
 8008220:	e0d1      	b.n	80083c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80b0 	beq.w	800838a <HAL_UART_IRQHandler+0x1ba>
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d105      	bne.n	8008240 <HAL_UART_IRQHandler+0x70>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80a5 	beq.w	800838a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <HAL_UART_IRQHandler+0x90>
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008258:	f043 0201 	orr.w	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <HAL_UART_IRQHandler+0xb0>
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	f043 0202 	orr.w	r2, r3, #2
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_UART_IRQHandler+0xd0>
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008298:	f043 0204 	orr.w	r2, r3, #4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <HAL_UART_IRQHandler+0xfa>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d104      	bne.n	80082be <HAL_UART_IRQHandler+0xee>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	f043 0208 	orr.w	r2, r3, #8
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d078      	beq.n	80083c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <HAL_UART_IRQHandler+0x11c>
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f966 	bl	80085b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bf14      	ite	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	2300      	moveq	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <HAL_UART_IRQHandler+0x144>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d031      	beq.n	8008378 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8b7 	bl	8008488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d023      	beq.n	8008370 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695a      	ldr	r2, [r3, #20]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008336:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833c:	2b00      	cmp	r3, #0
 800833e:	d013      	beq.n	8008368 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	4a21      	ldr	r2, [pc, #132]	; (80083cc <HAL_UART_IRQHandler+0x1fc>)
 8008346:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fafb 	bl	8006948 <HAL_DMA_Abort_IT>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d016      	beq.n	8008386 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008362:	4610      	mov	r0, r2
 8008364:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008366:	e00e      	b.n	8008386 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f83a 	bl	80083e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836e:	e00a      	b.n	8008386 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f836 	bl	80083e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008376:	e006      	b.n	8008386 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f832 	bl	80083e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008384:	e01e      	b.n	80083c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008386:	bf00      	nop
    return;
 8008388:	e01c      	b.n	80083c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1d6>
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8a3 	bl	80084ea <UART_Transmit_IT>
    return;
 80083a4:	e00f      	b.n	80083c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <HAL_UART_IRQHandler+0x1f6>
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8e4 	bl	8008588 <UART_EndTransmit_IT>
    return;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80083c4:	bf00      	nop
  }
}
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	080084c3 	.word	0x080084c3

080083d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008404:	e02c      	b.n	8008460 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d028      	beq.n	8008460 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <UART_WaitOnFlagUntilTimeout+0x30>
 8008414:	f7fe f95e 	bl	80066d4 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	429a      	cmp	r2, r3
 8008422:	d21d      	bcs.n	8008460 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008432:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e00f      	b.n	8008480 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4013      	ands	r3, r2
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	429a      	cmp	r2, r3
 800846e:	bf0c      	ite	eq
 8008470:	2301      	moveq	r3, #1
 8008472:	2300      	movne	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	429a      	cmp	r2, r3
 800847c:	d0c3      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800849e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695a      	ldr	r2, [r3, #20]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr

080084c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff ff80 	bl	80083e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b21      	cmp	r3, #33	; 0x21
 80084fc:	d13e      	bne.n	800857c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d114      	bne.n	8008532 <UART_Transmit_IT+0x48>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d110      	bne.n	8008532 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	621a      	str	r2, [r3, #32]
 8008530:	e008      	b.n	8008544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6211      	str	r1, [r2, #32]
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008548:	b29b      	uxth	r3, r3
 800854a:	3b01      	subs	r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4619      	mov	r1, r3
 8008552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10f      	bne.n	8008578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	e000      	b.n	800857e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800857c:	2302      	movs	r3, #2
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ff11 	bl	80083d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b22      	cmp	r3, #34	; 0x22
 80085ca:	d170      	bne.n	80086ae <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	d117      	bne.n	8008606 <UART_Receive_IT+0x4e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d113      	bne.n	8008606 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	1c9a      	adds	r2, r3, #2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	629a      	str	r2, [r3, #40]	; 0x28
 8008604:	e026      	b.n	8008654 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008618:	d007      	beq.n	800862a <UART_Receive_IT+0x72>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <UART_Receive_IT+0x80>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d106      	bne.n	8008638 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e008      	b.n	800864a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4619      	mov	r1, r3
 8008662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008664:	2b00      	cmp	r3, #0
 8008666:	d120      	bne.n	80086aa <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0220 	bic.w	r2, r2, #32
 8008676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0201 	bic.w	r2, r2, #1
 8008696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fd fcfd 	bl	80060a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e002      	b.n	80086b0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e000      	b.n	80086b0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80086f2:	f023 030c 	bic.w	r3, r3, #12
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	430b      	orrs	r3, r1
 80086fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2c      	ldr	r2, [pc, #176]	; (80087cc <UART_SetConfig+0x114>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d103      	bne.n	8008728 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008720:	f7fe ffce 	bl	80076c0 <HAL_RCC_GetPCLK2Freq>
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	e002      	b.n	800872e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008728:	f7fe ffb6 	bl	8007698 <HAL_RCC_GetPCLK1Freq>
 800872c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009a      	lsls	r2, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	4a22      	ldr	r2, [pc, #136]	; (80087d0 <UART_SetConfig+0x118>)
 8008746:	fba2 2303 	umull	r2, r3, r2, r3
 800874a:	095b      	lsrs	r3, r3, #5
 800874c:	0119      	lsls	r1, r3, #4
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009a      	lsls	r2, r3, #2
 8008758:	441a      	add	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	fbb2 f2f3 	udiv	r2, r2, r3
 8008764:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <UART_SetConfig+0x118>)
 8008766:	fba3 0302 	umull	r0, r3, r3, r2
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	2064      	movs	r0, #100	; 0x64
 800876e:	fb00 f303 	mul.w	r3, r0, r3
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	3332      	adds	r3, #50	; 0x32
 8008778:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <UART_SetConfig+0x118>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008784:	4419      	add	r1, r3
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009a      	lsls	r2, r3, #2
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	fbb2 f2f3 	udiv	r2, r2, r3
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <UART_SetConfig+0x118>)
 800879e:	fba3 0302 	umull	r0, r3, r3, r2
 80087a2:	095b      	lsrs	r3, r3, #5
 80087a4:	2064      	movs	r0, #100	; 0x64
 80087a6:	fb00 f303 	mul.w	r3, r0, r3
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	3332      	adds	r3, #50	; 0x32
 80087b0:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <UART_SetConfig+0x118>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	440a      	add	r2, r1
 80087c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40013800 	.word	0x40013800
 80087d0:	51eb851f 	.word	0x51eb851f

080087d4 <__errno>:
 80087d4:	4b01      	ldr	r3, [pc, #4]	; (80087dc <__errno+0x8>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	2000011c 	.word	0x2000011c

080087e0 <__libc_init_array>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	2500      	movs	r5, #0
 80087e4:	4e0c      	ldr	r6, [pc, #48]	; (8008818 <__libc_init_array+0x38>)
 80087e6:	4c0d      	ldr	r4, [pc, #52]	; (800881c <__libc_init_array+0x3c>)
 80087e8:	1ba4      	subs	r4, r4, r6
 80087ea:	10a4      	asrs	r4, r4, #2
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d109      	bne.n	8008804 <__libc_init_array+0x24>
 80087f0:	f000 fc4e 	bl	8009090 <_init>
 80087f4:	2500      	movs	r5, #0
 80087f6:	4e0a      	ldr	r6, [pc, #40]	; (8008820 <__libc_init_array+0x40>)
 80087f8:	4c0a      	ldr	r4, [pc, #40]	; (8008824 <__libc_init_array+0x44>)
 80087fa:	1ba4      	subs	r4, r4, r6
 80087fc:	10a4      	asrs	r4, r4, #2
 80087fe:	42a5      	cmp	r5, r4
 8008800:	d105      	bne.n	800880e <__libc_init_array+0x2e>
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008808:	4798      	blx	r3
 800880a:	3501      	adds	r5, #1
 800880c:	e7ee      	b.n	80087ec <__libc_init_array+0xc>
 800880e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008812:	4798      	blx	r3
 8008814:	3501      	adds	r5, #1
 8008816:	e7f2      	b.n	80087fe <__libc_init_array+0x1e>
 8008818:	0800916c 	.word	0x0800916c
 800881c:	0800916c 	.word	0x0800916c
 8008820:	0800916c 	.word	0x0800916c
 8008824:	08009170 	.word	0x08009170

08008828 <memset>:
 8008828:	4603      	mov	r3, r0
 800882a:	4402      	add	r2, r0
 800882c:	4293      	cmp	r3, r2
 800882e:	d100      	bne.n	8008832 <memset+0xa>
 8008830:	4770      	bx	lr
 8008832:	f803 1b01 	strb.w	r1, [r3], #1
 8008836:	e7f9      	b.n	800882c <memset+0x4>

08008838 <siprintf>:
 8008838:	b40e      	push	{r1, r2, r3}
 800883a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800883e:	b500      	push	{lr}
 8008840:	b09c      	sub	sp, #112	; 0x70
 8008842:	ab1d      	add	r3, sp, #116	; 0x74
 8008844:	9002      	str	r0, [sp, #8]
 8008846:	9006      	str	r0, [sp, #24]
 8008848:	9107      	str	r1, [sp, #28]
 800884a:	9104      	str	r1, [sp, #16]
 800884c:	4808      	ldr	r0, [pc, #32]	; (8008870 <siprintf+0x38>)
 800884e:	4909      	ldr	r1, [pc, #36]	; (8008874 <siprintf+0x3c>)
 8008850:	f853 2b04 	ldr.w	r2, [r3], #4
 8008854:	9105      	str	r1, [sp, #20]
 8008856:	6800      	ldr	r0, [r0, #0]
 8008858:	a902      	add	r1, sp, #8
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	f000 f880 	bl	8008960 <_svfiprintf_r>
 8008860:	2200      	movs	r2, #0
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	b01c      	add	sp, #112	; 0x70
 8008868:	f85d eb04 	ldr.w	lr, [sp], #4
 800886c:	b003      	add	sp, #12
 800886e:	4770      	bx	lr
 8008870:	2000011c 	.word	0x2000011c
 8008874:	ffff0208 	.word	0xffff0208

08008878 <strstr>:
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	7803      	ldrb	r3, [r0, #0]
 800887c:	b17b      	cbz	r3, 800889e <strstr+0x26>
 800887e:	4604      	mov	r4, r0
 8008880:	7823      	ldrb	r3, [r4, #0]
 8008882:	4620      	mov	r0, r4
 8008884:	1c66      	adds	r6, r4, #1
 8008886:	b17b      	cbz	r3, 80088a8 <strstr+0x30>
 8008888:	1e4a      	subs	r2, r1, #1
 800888a:	1e63      	subs	r3, r4, #1
 800888c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008890:	b14d      	cbz	r5, 80088a6 <strstr+0x2e>
 8008892:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008896:	4634      	mov	r4, r6
 8008898:	42af      	cmp	r7, r5
 800889a:	d0f7      	beq.n	800888c <strstr+0x14>
 800889c:	e7f0      	b.n	8008880 <strstr+0x8>
 800889e:	780b      	ldrb	r3, [r1, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf18      	it	ne
 80088a4:	2000      	movne	r0, #0
 80088a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a8:	4618      	mov	r0, r3
 80088aa:	e7fc      	b.n	80088a6 <strstr+0x2e>

080088ac <__ssputs_r>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	688e      	ldr	r6, [r1, #8]
 80088b2:	4682      	mov	sl, r0
 80088b4:	429e      	cmp	r6, r3
 80088b6:	460c      	mov	r4, r1
 80088b8:	4690      	mov	r8, r2
 80088ba:	4699      	mov	r9, r3
 80088bc:	d837      	bhi.n	800892e <__ssputs_r+0x82>
 80088be:	898a      	ldrh	r2, [r1, #12]
 80088c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088c4:	d031      	beq.n	800892a <__ssputs_r+0x7e>
 80088c6:	2302      	movs	r3, #2
 80088c8:	6825      	ldr	r5, [r4, #0]
 80088ca:	6909      	ldr	r1, [r1, #16]
 80088cc:	1a6f      	subs	r7, r5, r1
 80088ce:	6965      	ldr	r5, [r4, #20]
 80088d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80088d8:	f109 0301 	add.w	r3, r9, #1
 80088dc:	443b      	add	r3, r7
 80088de:	429d      	cmp	r5, r3
 80088e0:	bf38      	it	cc
 80088e2:	461d      	movcc	r5, r3
 80088e4:	0553      	lsls	r3, r2, #21
 80088e6:	d530      	bpl.n	800894a <__ssputs_r+0x9e>
 80088e8:	4629      	mov	r1, r5
 80088ea:	f000 fb37 	bl	8008f5c <_malloc_r>
 80088ee:	4606      	mov	r6, r0
 80088f0:	b950      	cbnz	r0, 8008908 <__ssputs_r+0x5c>
 80088f2:	230c      	movs	r3, #12
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	f8ca 3000 	str.w	r3, [sl]
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008908:	463a      	mov	r2, r7
 800890a:	6921      	ldr	r1, [r4, #16]
 800890c:	f000 fab6 	bl	8008e7c <memcpy>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	6126      	str	r6, [r4, #16]
 800891e:	443e      	add	r6, r7
 8008920:	6026      	str	r6, [r4, #0]
 8008922:	464e      	mov	r6, r9
 8008924:	6165      	str	r5, [r4, #20]
 8008926:	1bed      	subs	r5, r5, r7
 8008928:	60a5      	str	r5, [r4, #8]
 800892a:	454e      	cmp	r6, r9
 800892c:	d900      	bls.n	8008930 <__ssputs_r+0x84>
 800892e:	464e      	mov	r6, r9
 8008930:	4632      	mov	r2, r6
 8008932:	4641      	mov	r1, r8
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	f000 faac 	bl	8008e92 <memmove>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	2000      	movs	r0, #0
 800893e:	1b9b      	subs	r3, r3, r6
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	441e      	add	r6, r3
 8008946:	6026      	str	r6, [r4, #0]
 8008948:	e7dc      	b.n	8008904 <__ssputs_r+0x58>
 800894a:	462a      	mov	r2, r5
 800894c:	f000 fb60 	bl	8009010 <_realloc_r>
 8008950:	4606      	mov	r6, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	d1e2      	bne.n	800891c <__ssputs_r+0x70>
 8008956:	6921      	ldr	r1, [r4, #16]
 8008958:	4650      	mov	r0, sl
 800895a:	f000 fab3 	bl	8008ec4 <_free_r>
 800895e:	e7c8      	b.n	80088f2 <__ssputs_r+0x46>

08008960 <_svfiprintf_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	461d      	mov	r5, r3
 8008966:	898b      	ldrh	r3, [r1, #12]
 8008968:	b09d      	sub	sp, #116	; 0x74
 800896a:	061f      	lsls	r7, r3, #24
 800896c:	4680      	mov	r8, r0
 800896e:	460c      	mov	r4, r1
 8008970:	4616      	mov	r6, r2
 8008972:	d50f      	bpl.n	8008994 <_svfiprintf_r+0x34>
 8008974:	690b      	ldr	r3, [r1, #16]
 8008976:	b96b      	cbnz	r3, 8008994 <_svfiprintf_r+0x34>
 8008978:	2140      	movs	r1, #64	; 0x40
 800897a:	f000 faef 	bl	8008f5c <_malloc_r>
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	6120      	str	r0, [r4, #16]
 8008982:	b928      	cbnz	r0, 8008990 <_svfiprintf_r+0x30>
 8008984:	230c      	movs	r3, #12
 8008986:	f8c8 3000 	str.w	r3, [r8]
 800898a:	f04f 30ff 	mov.w	r0, #4294967295
 800898e:	e0c8      	b.n	8008b22 <_svfiprintf_r+0x1c2>
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	6163      	str	r3, [r4, #20]
 8008994:	2300      	movs	r3, #0
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	2320      	movs	r3, #32
 800899a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800899e:	2330      	movs	r3, #48	; 0x30
 80089a0:	f04f 0b01 	mov.w	fp, #1
 80089a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a8:	9503      	str	r5, [sp, #12]
 80089aa:	4637      	mov	r7, r6
 80089ac:	463d      	mov	r5, r7
 80089ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089b2:	b10b      	cbz	r3, 80089b8 <_svfiprintf_r+0x58>
 80089b4:	2b25      	cmp	r3, #37	; 0x25
 80089b6:	d13e      	bne.n	8008a36 <_svfiprintf_r+0xd6>
 80089b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80089bc:	d00b      	beq.n	80089d6 <_svfiprintf_r+0x76>
 80089be:	4653      	mov	r3, sl
 80089c0:	4632      	mov	r2, r6
 80089c2:	4621      	mov	r1, r4
 80089c4:	4640      	mov	r0, r8
 80089c6:	f7ff ff71 	bl	80088ac <__ssputs_r>
 80089ca:	3001      	adds	r0, #1
 80089cc:	f000 80a4 	beq.w	8008b18 <_svfiprintf_r+0x1b8>
 80089d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d2:	4453      	add	r3, sl
 80089d4:	9309      	str	r3, [sp, #36]	; 0x24
 80089d6:	783b      	ldrb	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 809d 	beq.w	8008b18 <_svfiprintf_r+0x1b8>
 80089de:	2300      	movs	r3, #0
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	9307      	str	r3, [sp, #28]
 80089ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f0:	931a      	str	r3, [sp, #104]	; 0x68
 80089f2:	462f      	mov	r7, r5
 80089f4:	2205      	movs	r2, #5
 80089f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80089fa:	4850      	ldr	r0, [pc, #320]	; (8008b3c <_svfiprintf_r+0x1dc>)
 80089fc:	f000 fa30 	bl	8008e60 <memchr>
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	b9d0      	cbnz	r0, 8008a3a <_svfiprintf_r+0xda>
 8008a04:	06d9      	lsls	r1, r3, #27
 8008a06:	bf44      	itt	mi
 8008a08:	2220      	movmi	r2, #32
 8008a0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a0e:	071a      	lsls	r2, r3, #28
 8008a10:	bf44      	itt	mi
 8008a12:	222b      	movmi	r2, #43	; 0x2b
 8008a14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a18:	782a      	ldrb	r2, [r5, #0]
 8008a1a:	2a2a      	cmp	r2, #42	; 0x2a
 8008a1c:	d015      	beq.n	8008a4a <_svfiprintf_r+0xea>
 8008a1e:	462f      	mov	r7, r5
 8008a20:	2000      	movs	r0, #0
 8008a22:	250a      	movs	r5, #10
 8008a24:	9a07      	ldr	r2, [sp, #28]
 8008a26:	4639      	mov	r1, r7
 8008a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a2c:	3b30      	subs	r3, #48	; 0x30
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d94d      	bls.n	8008ace <_svfiprintf_r+0x16e>
 8008a32:	b1b8      	cbz	r0, 8008a64 <_svfiprintf_r+0x104>
 8008a34:	e00f      	b.n	8008a56 <_svfiprintf_r+0xf6>
 8008a36:	462f      	mov	r7, r5
 8008a38:	e7b8      	b.n	80089ac <_svfiprintf_r+0x4c>
 8008a3a:	4a40      	ldr	r2, [pc, #256]	; (8008b3c <_svfiprintf_r+0x1dc>)
 8008a3c:	463d      	mov	r5, r7
 8008a3e:	1a80      	subs	r0, r0, r2
 8008a40:	fa0b f000 	lsl.w	r0, fp, r0
 8008a44:	4318      	orrs	r0, r3
 8008a46:	9004      	str	r0, [sp, #16]
 8008a48:	e7d3      	b.n	80089f2 <_svfiprintf_r+0x92>
 8008a4a:	9a03      	ldr	r2, [sp, #12]
 8008a4c:	1d11      	adds	r1, r2, #4
 8008a4e:	6812      	ldr	r2, [r2, #0]
 8008a50:	9103      	str	r1, [sp, #12]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	db01      	blt.n	8008a5a <_svfiprintf_r+0xfa>
 8008a56:	9207      	str	r2, [sp, #28]
 8008a58:	e004      	b.n	8008a64 <_svfiprintf_r+0x104>
 8008a5a:	4252      	negs	r2, r2
 8008a5c:	f043 0302 	orr.w	r3, r3, #2
 8008a60:	9207      	str	r2, [sp, #28]
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	783b      	ldrb	r3, [r7, #0]
 8008a66:	2b2e      	cmp	r3, #46	; 0x2e
 8008a68:	d10c      	bne.n	8008a84 <_svfiprintf_r+0x124>
 8008a6a:	787b      	ldrb	r3, [r7, #1]
 8008a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6e:	d133      	bne.n	8008ad8 <_svfiprintf_r+0x178>
 8008a70:	9b03      	ldr	r3, [sp, #12]
 8008a72:	3702      	adds	r7, #2
 8008a74:	1d1a      	adds	r2, r3, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	9203      	str	r2, [sp, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bfb8      	it	lt
 8008a7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	4d2e      	ldr	r5, [pc, #184]	; (8008b40 <_svfiprintf_r+0x1e0>)
 8008a86:	2203      	movs	r2, #3
 8008a88:	7839      	ldrb	r1, [r7, #0]
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f9e8 	bl	8008e60 <memchr>
 8008a90:	b138      	cbz	r0, 8008aa2 <_svfiprintf_r+0x142>
 8008a92:	2340      	movs	r3, #64	; 0x40
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	3701      	adds	r7, #1
 8008a9e:	4303      	orrs	r3, r0
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	7839      	ldrb	r1, [r7, #0]
 8008aa4:	2206      	movs	r2, #6
 8008aa6:	4827      	ldr	r0, [pc, #156]	; (8008b44 <_svfiprintf_r+0x1e4>)
 8008aa8:	1c7e      	adds	r6, r7, #1
 8008aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aae:	f000 f9d7 	bl	8008e60 <memchr>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d038      	beq.n	8008b28 <_svfiprintf_r+0x1c8>
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <_svfiprintf_r+0x1e8>)
 8008ab8:	bb13      	cbnz	r3, 8008b00 <_svfiprintf_r+0x1a0>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	3307      	adds	r3, #7
 8008abe:	f023 0307 	bic.w	r3, r3, #7
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac8:	444b      	add	r3, r9
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	e76d      	b.n	80089aa <_svfiprintf_r+0x4a>
 8008ace:	fb05 3202 	mla	r2, r5, r2, r3
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	e7a6      	b.n	8008a26 <_svfiprintf_r+0xc6>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	250a      	movs	r5, #10
 8008adc:	4619      	mov	r1, r3
 8008ade:	3701      	adds	r7, #1
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae8:	3a30      	subs	r2, #48	; 0x30
 8008aea:	2a09      	cmp	r2, #9
 8008aec:	d903      	bls.n	8008af6 <_svfiprintf_r+0x196>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0c8      	beq.n	8008a84 <_svfiprintf_r+0x124>
 8008af2:	9105      	str	r1, [sp, #20]
 8008af4:	e7c6      	b.n	8008a84 <_svfiprintf_r+0x124>
 8008af6:	fb05 2101 	mla	r1, r5, r1, r2
 8008afa:	2301      	movs	r3, #1
 8008afc:	4607      	mov	r7, r0
 8008afe:	e7f0      	b.n	8008ae2 <_svfiprintf_r+0x182>
 8008b00:	ab03      	add	r3, sp, #12
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4622      	mov	r2, r4
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <_svfiprintf_r+0x1ec>)
 8008b08:	a904      	add	r1, sp, #16
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f3af 8000 	nop.w
 8008b10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b14:	4681      	mov	r9, r0
 8008b16:	d1d6      	bne.n	8008ac6 <_svfiprintf_r+0x166>
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	065b      	lsls	r3, r3, #25
 8008b1c:	f53f af35 	bmi.w	800898a <_svfiprintf_r+0x2a>
 8008b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b22:	b01d      	add	sp, #116	; 0x74
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <_svfiprintf_r+0x1ec>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4640      	mov	r0, r8
 8008b34:	f000 f882 	bl	8008c3c <_printf_i>
 8008b38:	e7ea      	b.n	8008b10 <_svfiprintf_r+0x1b0>
 8008b3a:	bf00      	nop
 8008b3c:	08009138 	.word	0x08009138
 8008b40:	0800913e 	.word	0x0800913e
 8008b44:	08009142 	.word	0x08009142
 8008b48:	00000000 	.word	0x00000000
 8008b4c:	080088ad 	.word	0x080088ad

08008b50 <_printf_common>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	4691      	mov	r9, r2
 8008b56:	461f      	mov	r7, r3
 8008b58:	688a      	ldr	r2, [r1, #8]
 8008b5a:	690b      	ldr	r3, [r1, #16]
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	bfb8      	it	lt
 8008b62:	4613      	movlt	r3, r2
 8008b64:	f8c9 3000 	str.w	r3, [r9]
 8008b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b72:	b112      	cbz	r2, 8008b7a <_printf_common+0x2a>
 8008b74:	3301      	adds	r3, #1
 8008b76:	f8c9 3000 	str.w	r3, [r9]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	0699      	lsls	r1, r3, #26
 8008b7e:	bf42      	ittt	mi
 8008b80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b84:	3302      	addmi	r3, #2
 8008b86:	f8c9 3000 	strmi.w	r3, [r9]
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	f015 0506 	ands.w	r5, r5, #6
 8008b90:	d107      	bne.n	8008ba2 <_printf_common+0x52>
 8008b92:	f104 0a19 	add.w	sl, r4, #25
 8008b96:	68e3      	ldr	r3, [r4, #12]
 8008b98:	f8d9 2000 	ldr.w	r2, [r9]
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	42ab      	cmp	r3, r5
 8008ba0:	dc29      	bgt.n	8008bf6 <_printf_common+0xa6>
 8008ba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	3300      	adds	r3, #0
 8008baa:	bf18      	it	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	0692      	lsls	r2, r2, #26
 8008bb0:	d42e      	bmi.n	8008c10 <_printf_common+0xc0>
 8008bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	4630      	mov	r0, r6
 8008bba:	47c0      	blx	r8
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d021      	beq.n	8008c04 <_printf_common+0xb4>
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	68e5      	ldr	r5, [r4, #12]
 8008bc4:	f003 0306 	and.w	r3, r3, #6
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	bf18      	it	ne
 8008bcc:	2500      	movne	r5, #0
 8008bce:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd2:	f04f 0900 	mov.w	r9, #0
 8008bd6:	bf08      	it	eq
 8008bd8:	1aad      	subeq	r5, r5, r2
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	6922      	ldr	r2, [r4, #16]
 8008bde:	bf08      	it	eq
 8008be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bfc4      	itt	gt
 8008be8:	1a9b      	subgt	r3, r3, r2
 8008bea:	18ed      	addgt	r5, r5, r3
 8008bec:	341a      	adds	r4, #26
 8008bee:	454d      	cmp	r5, r9
 8008bf0:	d11a      	bne.n	8008c28 <_printf_common+0xd8>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e008      	b.n	8008c08 <_printf_common+0xb8>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	47c0      	blx	r8
 8008c00:	3001      	adds	r0, #1
 8008c02:	d103      	bne.n	8008c0c <_printf_common+0xbc>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	e7c2      	b.n	8008b96 <_printf_common+0x46>
 8008c10:	2030      	movs	r0, #48	; 0x30
 8008c12:	18e1      	adds	r1, r4, r3
 8008c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c1e:	4422      	add	r2, r4
 8008c20:	3302      	adds	r3, #2
 8008c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c26:	e7c4      	b.n	8008bb2 <_printf_common+0x62>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4630      	mov	r0, r6
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d0e6      	beq.n	8008c04 <_printf_common+0xb4>
 8008c36:	f109 0901 	add.w	r9, r9, #1
 8008c3a:	e7d8      	b.n	8008bee <_printf_common+0x9e>

08008c3c <_printf_i>:
 8008c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c44:	460c      	mov	r4, r1
 8008c46:	7e09      	ldrb	r1, [r1, #24]
 8008c48:	b085      	sub	sp, #20
 8008c4a:	296e      	cmp	r1, #110	; 0x6e
 8008c4c:	4617      	mov	r7, r2
 8008c4e:	4606      	mov	r6, r0
 8008c50:	4698      	mov	r8, r3
 8008c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c54:	f000 80b3 	beq.w	8008dbe <_printf_i+0x182>
 8008c58:	d822      	bhi.n	8008ca0 <_printf_i+0x64>
 8008c5a:	2963      	cmp	r1, #99	; 0x63
 8008c5c:	d036      	beq.n	8008ccc <_printf_i+0x90>
 8008c5e:	d80a      	bhi.n	8008c76 <_printf_i+0x3a>
 8008c60:	2900      	cmp	r1, #0
 8008c62:	f000 80b9 	beq.w	8008dd8 <_printf_i+0x19c>
 8008c66:	2958      	cmp	r1, #88	; 0x58
 8008c68:	f000 8083 	beq.w	8008d72 <_printf_i+0x136>
 8008c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c74:	e032      	b.n	8008cdc <_printf_i+0xa0>
 8008c76:	2964      	cmp	r1, #100	; 0x64
 8008c78:	d001      	beq.n	8008c7e <_printf_i+0x42>
 8008c7a:	2969      	cmp	r1, #105	; 0x69
 8008c7c:	d1f6      	bne.n	8008c6c <_printf_i+0x30>
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	0605      	lsls	r5, r0, #24
 8008c84:	f103 0104 	add.w	r1, r3, #4
 8008c88:	d52a      	bpl.n	8008ce0 <_printf_i+0xa4>
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da03      	bge.n	8008c9a <_printf_i+0x5e>
 8008c92:	222d      	movs	r2, #45	; 0x2d
 8008c94:	425b      	negs	r3, r3
 8008c96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c9a:	486f      	ldr	r0, [pc, #444]	; (8008e58 <_printf_i+0x21c>)
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	e039      	b.n	8008d14 <_printf_i+0xd8>
 8008ca0:	2973      	cmp	r1, #115	; 0x73
 8008ca2:	f000 809d 	beq.w	8008de0 <_printf_i+0x1a4>
 8008ca6:	d808      	bhi.n	8008cba <_printf_i+0x7e>
 8008ca8:	296f      	cmp	r1, #111	; 0x6f
 8008caa:	d020      	beq.n	8008cee <_printf_i+0xb2>
 8008cac:	2970      	cmp	r1, #112	; 0x70
 8008cae:	d1dd      	bne.n	8008c6c <_printf_i+0x30>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	f043 0320 	orr.w	r3, r3, #32
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	e003      	b.n	8008cc2 <_printf_i+0x86>
 8008cba:	2975      	cmp	r1, #117	; 0x75
 8008cbc:	d017      	beq.n	8008cee <_printf_i+0xb2>
 8008cbe:	2978      	cmp	r1, #120	; 0x78
 8008cc0:	d1d4      	bne.n	8008c6c <_printf_i+0x30>
 8008cc2:	2378      	movs	r3, #120	; 0x78
 8008cc4:	4865      	ldr	r0, [pc, #404]	; (8008e5c <_printf_i+0x220>)
 8008cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cca:	e055      	b.n	8008d78 <_printf_i+0x13c>
 8008ccc:	6813      	ldr	r3, [r2, #0]
 8008cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd2:	1d19      	adds	r1, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6011      	str	r1, [r2, #0]
 8008cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e08c      	b.n	8008dfa <_printf_i+0x1be>
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ce6:	6011      	str	r1, [r2, #0]
 8008ce8:	bf18      	it	ne
 8008cea:	b21b      	sxthne	r3, r3
 8008cec:	e7cf      	b.n	8008c8e <_printf_i+0x52>
 8008cee:	6813      	ldr	r3, [r2, #0]
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	1d18      	adds	r0, r3, #4
 8008cf4:	6010      	str	r0, [r2, #0]
 8008cf6:	0628      	lsls	r0, r5, #24
 8008cf8:	d501      	bpl.n	8008cfe <_printf_i+0xc2>
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	e002      	b.n	8008d04 <_printf_i+0xc8>
 8008cfe:	0668      	lsls	r0, r5, #25
 8008d00:	d5fb      	bpl.n	8008cfa <_printf_i+0xbe>
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	296f      	cmp	r1, #111	; 0x6f
 8008d06:	bf14      	ite	ne
 8008d08:	220a      	movne	r2, #10
 8008d0a:	2208      	moveq	r2, #8
 8008d0c:	4852      	ldr	r0, [pc, #328]	; (8008e58 <_printf_i+0x21c>)
 8008d0e:	2100      	movs	r1, #0
 8008d10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d14:	6865      	ldr	r5, [r4, #4]
 8008d16:	2d00      	cmp	r5, #0
 8008d18:	60a5      	str	r5, [r4, #8]
 8008d1a:	f2c0 8095 	blt.w	8008e48 <_printf_i+0x20c>
 8008d1e:	6821      	ldr	r1, [r4, #0]
 8008d20:	f021 0104 	bic.w	r1, r1, #4
 8008d24:	6021      	str	r1, [r4, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d13d      	bne.n	8008da6 <_printf_i+0x16a>
 8008d2a:	2d00      	cmp	r5, #0
 8008d2c:	f040 808e 	bne.w	8008e4c <_printf_i+0x210>
 8008d30:	4665      	mov	r5, ip
 8008d32:	2a08      	cmp	r2, #8
 8008d34:	d10b      	bne.n	8008d4e <_printf_i+0x112>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	07db      	lsls	r3, r3, #31
 8008d3a:	d508      	bpl.n	8008d4e <_printf_i+0x112>
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	6862      	ldr	r2, [r4, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	bfde      	ittt	le
 8008d44:	2330      	movle	r3, #48	; 0x30
 8008d46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d4e:	ebac 0305 	sub.w	r3, ip, r5
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	f8cd 8000 	str.w	r8, [sp]
 8008d58:	463b      	mov	r3, r7
 8008d5a:	aa03      	add	r2, sp, #12
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff fef6 	bl	8008b50 <_printf_common>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d14d      	bne.n	8008e04 <_printf_i+0x1c8>
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	b005      	add	sp, #20
 8008d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d72:	4839      	ldr	r0, [pc, #228]	; (8008e58 <_printf_i+0x21c>)
 8008d74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	6821      	ldr	r1, [r4, #0]
 8008d7c:	1d1d      	adds	r5, r3, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6015      	str	r5, [r2, #0]
 8008d82:	060a      	lsls	r2, r1, #24
 8008d84:	d50b      	bpl.n	8008d9e <_printf_i+0x162>
 8008d86:	07ca      	lsls	r2, r1, #31
 8008d88:	bf44      	itt	mi
 8008d8a:	f041 0120 	orrmi.w	r1, r1, #32
 8008d8e:	6021      	strmi	r1, [r4, #0]
 8008d90:	b91b      	cbnz	r3, 8008d9a <_printf_i+0x15e>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	f022 0220 	bic.w	r2, r2, #32
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	2210      	movs	r2, #16
 8008d9c:	e7b7      	b.n	8008d0e <_printf_i+0xd2>
 8008d9e:	064d      	lsls	r5, r1, #25
 8008da0:	bf48      	it	mi
 8008da2:	b29b      	uxthmi	r3, r3
 8008da4:	e7ef      	b.n	8008d86 <_printf_i+0x14a>
 8008da6:	4665      	mov	r5, ip
 8008da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dac:	fb02 3311 	mls	r3, r2, r1, r3
 8008db0:	5cc3      	ldrb	r3, [r0, r3]
 8008db2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008db6:	460b      	mov	r3, r1
 8008db8:	2900      	cmp	r1, #0
 8008dba:	d1f5      	bne.n	8008da8 <_printf_i+0x16c>
 8008dbc:	e7b9      	b.n	8008d32 <_printf_i+0xf6>
 8008dbe:	6813      	ldr	r3, [r2, #0]
 8008dc0:	6825      	ldr	r5, [r4, #0]
 8008dc2:	1d18      	adds	r0, r3, #4
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	6010      	str	r0, [r2, #0]
 8008dc8:	0628      	lsls	r0, r5, #24
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	d501      	bpl.n	8008dd2 <_printf_i+0x196>
 8008dce:	6019      	str	r1, [r3, #0]
 8008dd0:	e002      	b.n	8008dd8 <_printf_i+0x19c>
 8008dd2:	066a      	lsls	r2, r5, #25
 8008dd4:	d5fb      	bpl.n	8008dce <_printf_i+0x192>
 8008dd6:	8019      	strh	r1, [r3, #0]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4665      	mov	r5, ip
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	e7b9      	b.n	8008d54 <_printf_i+0x118>
 8008de0:	6813      	ldr	r3, [r2, #0]
 8008de2:	1d19      	adds	r1, r3, #4
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	681d      	ldr	r5, [r3, #0]
 8008de8:	6862      	ldr	r2, [r4, #4]
 8008dea:	2100      	movs	r1, #0
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f837 	bl	8008e60 <memchr>
 8008df2:	b108      	cbz	r0, 8008df8 <_printf_i+0x1bc>
 8008df4:	1b40      	subs	r0, r0, r5
 8008df6:	6060      	str	r0, [r4, #4]
 8008df8:	6863      	ldr	r3, [r4, #4]
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e02:	e7a7      	b.n	8008d54 <_printf_i+0x118>
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	462a      	mov	r2, r5
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	47c0      	blx	r8
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d0aa      	beq.n	8008d68 <_printf_i+0x12c>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	079b      	lsls	r3, r3, #30
 8008e16:	d413      	bmi.n	8008e40 <_printf_i+0x204>
 8008e18:	68e0      	ldr	r0, [r4, #12]
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	4298      	cmp	r0, r3
 8008e1e:	bfb8      	it	lt
 8008e20:	4618      	movlt	r0, r3
 8008e22:	e7a3      	b.n	8008d6c <_printf_i+0x130>
 8008e24:	2301      	movs	r3, #1
 8008e26:	464a      	mov	r2, r9
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d09a      	beq.n	8008d68 <_printf_i+0x12c>
 8008e32:	3501      	adds	r5, #1
 8008e34:	68e3      	ldr	r3, [r4, #12]
 8008e36:	9a03      	ldr	r2, [sp, #12]
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	dcf2      	bgt.n	8008e24 <_printf_i+0x1e8>
 8008e3e:	e7eb      	b.n	8008e18 <_printf_i+0x1dc>
 8008e40:	2500      	movs	r5, #0
 8008e42:	f104 0919 	add.w	r9, r4, #25
 8008e46:	e7f5      	b.n	8008e34 <_printf_i+0x1f8>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1ac      	bne.n	8008da6 <_printf_i+0x16a>
 8008e4c:	7803      	ldrb	r3, [r0, #0]
 8008e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e56:	e76c      	b.n	8008d32 <_printf_i+0xf6>
 8008e58:	08009149 	.word	0x08009149
 8008e5c:	0800915a 	.word	0x0800915a

08008e60 <memchr>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	b2c9      	uxtb	r1, r1
 8008e64:	4402      	add	r2, r0
 8008e66:	4290      	cmp	r0, r2
 8008e68:	4603      	mov	r3, r0
 8008e6a:	d101      	bne.n	8008e70 <memchr+0x10>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e003      	b.n	8008e78 <memchr+0x18>
 8008e70:	781c      	ldrb	r4, [r3, #0]
 8008e72:	3001      	adds	r0, #1
 8008e74:	428c      	cmp	r4, r1
 8008e76:	d1f6      	bne.n	8008e66 <memchr+0x6>
 8008e78:	4618      	mov	r0, r3
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <memcpy>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	1e43      	subs	r3, r0, #1
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	d100      	bne.n	8008e88 <memcpy+0xc>
 8008e86:	bd10      	pop	{r4, pc}
 8008e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e90:	e7f7      	b.n	8008e82 <memcpy+0x6>

08008e92 <memmove>:
 8008e92:	4288      	cmp	r0, r1
 8008e94:	b510      	push	{r4, lr}
 8008e96:	eb01 0302 	add.w	r3, r1, r2
 8008e9a:	d807      	bhi.n	8008eac <memmove+0x1a>
 8008e9c:	1e42      	subs	r2, r0, #1
 8008e9e:	4299      	cmp	r1, r3
 8008ea0:	d00a      	beq.n	8008eb8 <memmove+0x26>
 8008ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008eaa:	e7f8      	b.n	8008e9e <memmove+0xc>
 8008eac:	4283      	cmp	r3, r0
 8008eae:	d9f5      	bls.n	8008e9c <memmove+0xa>
 8008eb0:	1881      	adds	r1, r0, r2
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	42d3      	cmn	r3, r2
 8008eb6:	d100      	bne.n	8008eba <memmove+0x28>
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ebe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ec2:	e7f7      	b.n	8008eb4 <memmove+0x22>

08008ec4 <_free_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	d043      	beq.n	8008f54 <_free_r+0x90>
 8008ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed0:	1f0c      	subs	r4, r1, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bfb8      	it	lt
 8008ed6:	18e4      	addlt	r4, r4, r3
 8008ed8:	f000 f8d0 	bl	800907c <__malloc_lock>
 8008edc:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <_free_r+0x94>)
 8008ede:	6813      	ldr	r3, [r2, #0]
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	b933      	cbnz	r3, 8008ef2 <_free_r+0x2e>
 8008ee4:	6063      	str	r3, [r4, #4]
 8008ee6:	6014      	str	r4, [r2, #0]
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eee:	f000 b8c6 	b.w	800907e <__malloc_unlock>
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	d90b      	bls.n	8008f0e <_free_r+0x4a>
 8008ef6:	6821      	ldr	r1, [r4, #0]
 8008ef8:	1862      	adds	r2, r4, r1
 8008efa:	4293      	cmp	r3, r2
 8008efc:	bf01      	itttt	eq
 8008efe:	681a      	ldreq	r2, [r3, #0]
 8008f00:	685b      	ldreq	r3, [r3, #4]
 8008f02:	1852      	addeq	r2, r2, r1
 8008f04:	6022      	streq	r2, [r4, #0]
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	6004      	str	r4, [r0, #0]
 8008f0a:	e7ed      	b.n	8008ee8 <_free_r+0x24>
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	b10a      	cbz	r2, 8008f16 <_free_r+0x52>
 8008f12:	42a2      	cmp	r2, r4
 8008f14:	d9fa      	bls.n	8008f0c <_free_r+0x48>
 8008f16:	6819      	ldr	r1, [r3, #0]
 8008f18:	1858      	adds	r0, r3, r1
 8008f1a:	42a0      	cmp	r0, r4
 8008f1c:	d10b      	bne.n	8008f36 <_free_r+0x72>
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	4401      	add	r1, r0
 8008f22:	1858      	adds	r0, r3, r1
 8008f24:	4282      	cmp	r2, r0
 8008f26:	6019      	str	r1, [r3, #0]
 8008f28:	d1de      	bne.n	8008ee8 <_free_r+0x24>
 8008f2a:	6810      	ldr	r0, [r2, #0]
 8008f2c:	6852      	ldr	r2, [r2, #4]
 8008f2e:	4401      	add	r1, r0
 8008f30:	6019      	str	r1, [r3, #0]
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	e7d8      	b.n	8008ee8 <_free_r+0x24>
 8008f36:	d902      	bls.n	8008f3e <_free_r+0x7a>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	e7d4      	b.n	8008ee8 <_free_r+0x24>
 8008f3e:	6820      	ldr	r0, [r4, #0]
 8008f40:	1821      	adds	r1, r4, r0
 8008f42:	428a      	cmp	r2, r1
 8008f44:	bf01      	itttt	eq
 8008f46:	6811      	ldreq	r1, [r2, #0]
 8008f48:	6852      	ldreq	r2, [r2, #4]
 8008f4a:	1809      	addeq	r1, r1, r0
 8008f4c:	6021      	streq	r1, [r4, #0]
 8008f4e:	6062      	str	r2, [r4, #4]
 8008f50:	605c      	str	r4, [r3, #4]
 8008f52:	e7c9      	b.n	8008ee8 <_free_r+0x24>
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	200001ac 	.word	0x200001ac

08008f5c <_malloc_r>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	1ccd      	adds	r5, r1, #3
 8008f60:	f025 0503 	bic.w	r5, r5, #3
 8008f64:	3508      	adds	r5, #8
 8008f66:	2d0c      	cmp	r5, #12
 8008f68:	bf38      	it	cc
 8008f6a:	250c      	movcc	r5, #12
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	4606      	mov	r6, r0
 8008f70:	db01      	blt.n	8008f76 <_malloc_r+0x1a>
 8008f72:	42a9      	cmp	r1, r5
 8008f74:	d903      	bls.n	8008f7e <_malloc_r+0x22>
 8008f76:	230c      	movs	r3, #12
 8008f78:	6033      	str	r3, [r6, #0]
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
 8008f7e:	f000 f87d 	bl	800907c <__malloc_lock>
 8008f82:	4a21      	ldr	r2, [pc, #132]	; (8009008 <_malloc_r+0xac>)
 8008f84:	6814      	ldr	r4, [r2, #0]
 8008f86:	4621      	mov	r1, r4
 8008f88:	b991      	cbnz	r1, 8008fb0 <_malloc_r+0x54>
 8008f8a:	4c20      	ldr	r4, [pc, #128]	; (800900c <_malloc_r+0xb0>)
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	b91b      	cbnz	r3, 8008f98 <_malloc_r+0x3c>
 8008f90:	4630      	mov	r0, r6
 8008f92:	f000 f863 	bl	800905c <_sbrk_r>
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f85e 	bl	800905c <_sbrk_r>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d124      	bne.n	8008fee <_malloc_r+0x92>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	6033      	str	r3, [r6, #0]
 8008faa:	f000 f868 	bl	800907e <__malloc_unlock>
 8008fae:	e7e4      	b.n	8008f7a <_malloc_r+0x1e>
 8008fb0:	680b      	ldr	r3, [r1, #0]
 8008fb2:	1b5b      	subs	r3, r3, r5
 8008fb4:	d418      	bmi.n	8008fe8 <_malloc_r+0x8c>
 8008fb6:	2b0b      	cmp	r3, #11
 8008fb8:	d90f      	bls.n	8008fda <_malloc_r+0x7e>
 8008fba:	600b      	str	r3, [r1, #0]
 8008fbc:	18cc      	adds	r4, r1, r3
 8008fbe:	50cd      	str	r5, [r1, r3]
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 f85c 	bl	800907e <__malloc_unlock>
 8008fc6:	f104 000b 	add.w	r0, r4, #11
 8008fca:	1d23      	adds	r3, r4, #4
 8008fcc:	f020 0007 	bic.w	r0, r0, #7
 8008fd0:	1ac3      	subs	r3, r0, r3
 8008fd2:	d0d3      	beq.n	8008f7c <_malloc_r+0x20>
 8008fd4:	425a      	negs	r2, r3
 8008fd6:	50e2      	str	r2, [r4, r3]
 8008fd8:	e7d0      	b.n	8008f7c <_malloc_r+0x20>
 8008fda:	684b      	ldr	r3, [r1, #4]
 8008fdc:	428c      	cmp	r4, r1
 8008fde:	bf16      	itet	ne
 8008fe0:	6063      	strne	r3, [r4, #4]
 8008fe2:	6013      	streq	r3, [r2, #0]
 8008fe4:	460c      	movne	r4, r1
 8008fe6:	e7eb      	b.n	8008fc0 <_malloc_r+0x64>
 8008fe8:	460c      	mov	r4, r1
 8008fea:	6849      	ldr	r1, [r1, #4]
 8008fec:	e7cc      	b.n	8008f88 <_malloc_r+0x2c>
 8008fee:	1cc4      	adds	r4, r0, #3
 8008ff0:	f024 0403 	bic.w	r4, r4, #3
 8008ff4:	42a0      	cmp	r0, r4
 8008ff6:	d005      	beq.n	8009004 <_malloc_r+0xa8>
 8008ff8:	1a21      	subs	r1, r4, r0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f000 f82e 	bl	800905c <_sbrk_r>
 8009000:	3001      	adds	r0, #1
 8009002:	d0cf      	beq.n	8008fa4 <_malloc_r+0x48>
 8009004:	6025      	str	r5, [r4, #0]
 8009006:	e7db      	b.n	8008fc0 <_malloc_r+0x64>
 8009008:	200001ac 	.word	0x200001ac
 800900c:	200001b0 	.word	0x200001b0

08009010 <_realloc_r>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	4607      	mov	r7, r0
 8009014:	4614      	mov	r4, r2
 8009016:	460e      	mov	r6, r1
 8009018:	b921      	cbnz	r1, 8009024 <_realloc_r+0x14>
 800901a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800901e:	4611      	mov	r1, r2
 8009020:	f7ff bf9c 	b.w	8008f5c <_malloc_r>
 8009024:	b922      	cbnz	r2, 8009030 <_realloc_r+0x20>
 8009026:	f7ff ff4d 	bl	8008ec4 <_free_r>
 800902a:	4625      	mov	r5, r4
 800902c:	4628      	mov	r0, r5
 800902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009030:	f000 f826 	bl	8009080 <_malloc_usable_size_r>
 8009034:	42a0      	cmp	r0, r4
 8009036:	d20f      	bcs.n	8009058 <_realloc_r+0x48>
 8009038:	4621      	mov	r1, r4
 800903a:	4638      	mov	r0, r7
 800903c:	f7ff ff8e 	bl	8008f5c <_malloc_r>
 8009040:	4605      	mov	r5, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d0f2      	beq.n	800902c <_realloc_r+0x1c>
 8009046:	4631      	mov	r1, r6
 8009048:	4622      	mov	r2, r4
 800904a:	f7ff ff17 	bl	8008e7c <memcpy>
 800904e:	4631      	mov	r1, r6
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff ff37 	bl	8008ec4 <_free_r>
 8009056:	e7e9      	b.n	800902c <_realloc_r+0x1c>
 8009058:	4635      	mov	r5, r6
 800905a:	e7e7      	b.n	800902c <_realloc_r+0x1c>

0800905c <_sbrk_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	2300      	movs	r3, #0
 8009060:	4c05      	ldr	r4, [pc, #20]	; (8009078 <_sbrk_r+0x1c>)
 8009062:	4605      	mov	r5, r0
 8009064:	4608      	mov	r0, r1
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	f7fd fa84 	bl	8006574 <_sbrk>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_sbrk_r+0x1a>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	b103      	cbz	r3, 8009076 <_sbrk_r+0x1a>
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	20003170 	.word	0x20003170

0800907c <__malloc_lock>:
 800907c:	4770      	bx	lr

0800907e <__malloc_unlock>:
 800907e:	4770      	bx	lr

08009080 <_malloc_usable_size_r>:
 8009080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009084:	1f18      	subs	r0, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfbc      	itt	lt
 800908a:	580b      	ldrlt	r3, [r1, r0]
 800908c:	18c0      	addlt	r0, r0, r3
 800908e:	4770      	bx	lr

08009090 <_init>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	bf00      	nop
 8009094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009096:	bc08      	pop	{r3}
 8009098:	469e      	mov	lr, r3
 800909a:	4770      	bx	lr

0800909c <_fini>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr
