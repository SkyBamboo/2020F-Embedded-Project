
STM32_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dec  08002dec  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08002dec  08002dec  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dec  08002dec  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08002df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  20000128  08002f1c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011b4  08002f1c  000211b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2a9  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001824  00000000  00000000  0002a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002bc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  0002c800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b41  00000000  00000000  0002d318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009546  00000000  00000000  00045e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009441d  00000000  00000000  0004f39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e37bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000e3838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000128 	.word	0x20000128
 8000200:	00000000 	.word	0x00000000
 8000204:	08002d74 	.word	0x08002d74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000012c 	.word	0x2000012c
 8000220:	08002d74 	.word	0x08002d74

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fc98 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f80e 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8f4 	bl	800042c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000244:	f000 f850 	bl	80002e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000248:	f000 f89c 	bl	8000384 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800024c:	f000 f8c4 	bl	80003d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <main+0x24>)
 8000252:	f001 fd5b 	bl	8001d0c <HAL_TIM_Base_Start_IT>
//	command(ModeSend);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x22>
 8000258:	20000918 	.word	0x20000918

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fd7a 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f8c5 	bl	8001434 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b0:	f000 fade 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fb30 	bl	8001934 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002da:	f000 fac9 	bl	8000870 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <MX_TIM3_Init+0x94>)
 8000306:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <MX_TIM3_Init+0x98>)
 8000308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_TIM3_Init+0x94>)
 800030c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_TIM3_Init+0x94>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_TIM3_Init+0x94>)
 800031a:	f242 720f 	movw	r2, #9999	; 0x270f
 800031e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <MX_TIM3_Init+0x94>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_TIM3_Init+0x94>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <MX_TIM3_Init+0x94>)
 800032e:	f001 fc9d 	bl	8001c6c <HAL_TIM_Base_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000338:	f000 fa9a 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	4619      	mov	r1, r3
 8000348:	480c      	ldr	r0, [pc, #48]	; (800037c <MX_TIM3_Init+0x94>)
 800034a:	f001 fe47 	bl	8001fdc <HAL_TIM_ConfigClockSource>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000354:	f000 fa8c 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035c:	2300      	movs	r3, #0
 800035e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000360:	463b      	mov	r3, r7
 8000362:	4619      	mov	r1, r3
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_TIM3_Init+0x94>)
 8000366:	f002 f825 	bl	80023b4 <HAL_TIMEx_MasterConfigSynchronization>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000370:	f000 fa7e 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	3718      	adds	r7, #24
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000918 	.word	0x20000918
 8000380:	40000400 	.word	0x40000400

08000384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART1_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003bc:	f002 f878 	bl	80024b0 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 fa53 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20001130 	.word	0x20001130
 80003d4:	40013800 	.word	0x40013800

080003d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <MX_USART2_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 8000410:	f002 f84e 	bl	80024b0 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 fa29 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20001170 	.word	0x20001170
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b46      	ldr	r3, [pc, #280]	; (800055c <MX_GPIO_Init+0x130>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a45      	ldr	r2, [pc, #276]	; (800055c <MX_GPIO_Init+0x130>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b43      	ldr	r3, [pc, #268]	; (800055c <MX_GPIO_Init+0x130>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b40      	ldr	r3, [pc, #256]	; (800055c <MX_GPIO_Init+0x130>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a3f      	ldr	r2, [pc, #252]	; (800055c <MX_GPIO_Init+0x130>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <MX_GPIO_Init+0x130>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b3a      	ldr	r3, [pc, #232]	; (800055c <MX_GPIO_Init+0x130>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a39      	ldr	r2, [pc, #228]	; (800055c <MX_GPIO_Init+0x130>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b37      	ldr	r3, [pc, #220]	; (800055c <MX_GPIO_Init+0x130>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	4834      	ldr	r0, [pc, #208]	; (8000560 <MX_GPIO_Init+0x134>)
 8000490:	f000 ff87 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	4832      	ldr	r0, [pc, #200]	; (8000564 <MX_GPIO_Init+0x138>)
 800049a:	f000 ff82 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 800049e:	2301      	movs	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <MX_GPIO_Init+0x13c>)
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	482b      	ldr	r0, [pc, #172]	; (8000560 <MX_GPIO_Init+0x134>)
 80004b2:	f000 fdf5 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80004b6:	2320      	movs	r3, #32
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <MX_GPIO_Init+0x13c>)
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4828      	ldr	r0, [pc, #160]	; (800056c <MX_GPIO_Init+0x140>)
 80004ca:	f000 fde9 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80004ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	481e      	ldr	r0, [pc, #120]	; (8000560 <MX_GPIO_Init+0x134>)
 80004e8:	f000 fdda 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80004ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_GPIO_Init+0x13c>)
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <MX_GPIO_Init+0x134>)
 8000502:	f000 fdcd 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000506:	2304      	movs	r3, #4
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <MX_GPIO_Init+0x138>)
 800051e:	f000 fdbf 	bl	80010a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	2006      	movs	r0, #6
 8000528:	f000 fc7b 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800052c:	2006      	movs	r0, #6
 800052e:	f000 fc94 	bl	8000e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	2101      	movs	r1, #1
 8000536:	2017      	movs	r0, #23
 8000538:	f000 fc73 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800053c:	2017      	movs	r0, #23
 800053e:	f000 fc8c 	bl	8000e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8000542:	2202      	movs	r2, #2
 8000544:	2101      	movs	r1, #1
 8000546:	2028      	movs	r0, #40	; 0x28
 8000548:	f000 fc6b 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800054c:	2028      	movs	r0, #40	; 0x28
 800054e:	f000 fc84 	bl	8000e5a <HAL_NVIC_EnableIRQ>

}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800
 8000564:	40011400 	.word	0x40011400
 8000568:	10110000 	.word	0x10110000
 800056c:	40011000 	.word	0x40011000

08000570 <SendCommand>:

/* USER CODE BEGIN 4 */
void SendCommand(char cmd[])
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <SendCommand+0x44>)
 800057e:	f000 ff28 	bl	80013d2 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe4e 	bl	8000224 <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <SendCommand+0x48>)
 8000594:	f001 ffd9 	bl	800254a <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <SendCommand+0x44>)
 800059e:	f000 ff18 	bl	80013d2 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f000 fb43 	bl	8000c30 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800
 80005b8:	20001170 	.word	0x20001170

080005bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a28      	ldr	r2, [pc, #160]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d149      	bne.n	8000660 <HAL_TIM_PeriodElapsedCallback+0xa4>
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005cc:	2104      	movs	r1, #4
 80005ce:	4827      	ldr	r0, [pc, #156]	; (800066c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005d0:	f000 feff 	bl	80013d2 <HAL_GPIO_TogglePin>
		while(pt_r1<pt_w1 )
 80005d4:	e00e      	b.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			HAL_UART_Transmit(&huart2,&my_re_buf1[pt_r1++],1,1000);
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	b291      	uxth	r1, r2
 80005de:	4a24      	ldr	r2, [pc, #144]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005e0:	8011      	strh	r1, [r2, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005e6:	18d1      	adds	r1, r2, r3
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	2201      	movs	r2, #1
 80005ee:	4822      	ldr	r0, [pc, #136]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005f0:	f001 ffab 	bl	800254a <HAL_UART_Transmit>
		while(pt_r1<pt_w1 )
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d3ea      	bcc.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
		if(pt_r1>=pt_w1)
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d316      	bcc.n	800063a <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			pt_w1=pt_r1=0;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000618:	801a      	strh	r2, [r3, #0]
		}
		while(pt_r2<pt_w2 )
 800061a:	e00e      	b.n	800063a <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			HAL_UART_Transmit(&huart1,&my_re_buf2[pt_r2++],1,1000);
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	b291      	uxth	r1, r2
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000626:	8011      	strh	r1, [r2, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800062c:	18d1      	adds	r1, r2, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	2201      	movs	r2, #1
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000636:	f001 ff88 	bl	800254a <HAL_UART_Transmit>
		while(pt_r2<pt_w2 )
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d3ea      	bcc.n	800061c <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		if(pt_r2>=pt_w2)
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	d306      	bcc.n	8000660 <HAL_TIM_PeriodElapsedCallback+0xa4>
		{
			pt_w2=pt_r2=0;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800065e:	801a      	strh	r2, [r3, #0]

		}
	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000918 	.word	0x20000918
 800066c:	40011400 	.word	0x40011400
 8000670:	20000002 	.word	0x20000002
 8000674:	20000960 	.word	0x20000960
 8000678:	20001170 	.word	0x20001170
 800067c:	20000000 	.word	0x20000000
 8000680:	20000146 	.word	0x20000146
 8000684:	20000148 	.word	0x20000148
 8000688:	20001130 	.word	0x20001130
 800068c:	20000144 	.word	0x20000144

08000690 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <HAL_UART_RxCpltCallback+0x60>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d10f      	bne.n	80006c0 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1,&my_re_buf1[++pt_w1],1);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_UART_RxCpltCallback+0x64>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_UART_RxCpltCallback+0x64>)
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_UART_RxCpltCallback+0x64>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_UART_RxCpltCallback+0x68>)
 80006b4:	4413      	add	r3, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <HAL_UART_RxCpltCallback+0x60>)
 80006bc:	f001 ffd7 	bl	800266e <HAL_UART_Receive_IT>
	}

	if(huart==&huart2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_UART_RxCpltCallback+0x6c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d10f      	bne.n	80006e8 <HAL_UART_RxCpltCallback+0x58>
	{
		HAL_UART_Receive_IT(&huart2,&my_re_buf2[++pt_w2],1);
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_UART_RxCpltCallback+0x70>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_UART_RxCpltCallback+0x70>)
 80006d2:	801a      	strh	r2, [r3, #0]
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_UART_RxCpltCallback+0x70>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_UART_RxCpltCallback+0x74>)
 80006dc:	4413      	add	r3, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <HAL_UART_RxCpltCallback+0x6c>)
 80006e4:	f001 ffc3 	bl	800266e <HAL_UART_Receive_IT>
	}
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20001130 	.word	0x20001130
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000960 	.word	0x20000960
 80006fc:	20001170 	.word	0x20001170
 8000700:	20000144 	.word	0x20000144
 8000704:	20000148 	.word	0x20000148

08000708 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f000 fa8c 	bl	8000c30 <HAL_Delay>
	switch (GPIO_Pin) {
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2b20      	cmp	r3, #32
 800071c:	d005      	beq.n	800072a <HAL_GPIO_EXTI_Callback+0x22>
 800071e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000722:	d030      	beq.n	8000786 <HAL_GPIO_EXTI_Callback+0x7e>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d048      	beq.n	80007ba <HAL_GPIO_EXTI_Callback+0xb2>
			SendCommand(StartServerAndSetPort);
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
		}
		break;
	default:
		break;
 8000728:	e077      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x112>
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800072a:	2120      	movs	r1, #32
 800072c:	483d      	ldr	r0, [pc, #244]	; (8000824 <HAL_GPIO_EXTI_Callback+0x11c>)
 800072e:	f000 fe21 	bl	8001374 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d16b      	bne.n	8000810 <HAL_GPIO_EXTI_Callback+0x108>
			HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f000 fa79 	bl	8000c30 <HAL_Delay>
			HAL_UART_Transmit(&huart1, "SetSTA\r\n", 8, HAL_MAX_DELAY);
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2208      	movs	r2, #8
 8000744:	4938      	ldr	r1, [pc, #224]	; (8000828 <HAL_GPIO_EXTI_Callback+0x120>)
 8000746:	4839      	ldr	r0, [pc, #228]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 8000748:	f001 feff 	bl	800254a <HAL_UART_Transmit>
			SendCommand(SetSTAMode);
 800074c:	4838      	ldr	r0, [pc, #224]	; (8000830 <HAL_GPIO_EXTI_Callback+0x128>)
 800074e:	f7ff ff0f 	bl	8000570 <SendCommand>
			SendCommand(Reset);
 8000752:	4838      	ldr	r0, [pc, #224]	; (8000834 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000754:	f7ff ff0c 	bl	8000570 <SendCommand>
			SendCommand(ConnectToWiFi);
 8000758:	4837      	ldr	r0, [pc, #220]	; (8000838 <HAL_GPIO_EXTI_Callback+0x130>)
 800075a:	f7ff ff09 	bl	8000570 <SendCommand>
			SendCommand(SetSingleConnect);
 800075e:	4837      	ldr	r0, [pc, #220]	; (800083c <HAL_GPIO_EXTI_Callback+0x134>)
 8000760:	f7ff ff06 	bl	8000570 <SendCommand>
			SendCommand(ConnectToTCPServer);
 8000764:	4836      	ldr	r0, [pc, #216]	; (8000840 <HAL_GPIO_EXTI_Callback+0x138>)
 8000766:	f7ff ff03 	bl	8000570 <SendCommand>
			SendCommand(SetSeriaNet);
 800076a:	4836      	ldr	r0, [pc, #216]	; (8000844 <HAL_GPIO_EXTI_Callback+0x13c>)
 800076c:	f7ff ff00 	bl	8000570 <SendCommand>
			SendCommand(StartSerialNet);
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <HAL_GPIO_EXTI_Callback+0x140>)
 8000772:	f7ff fefd 	bl	8000570 <SendCommand>
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2208      	movs	r2, #8
 800077c:	4933      	ldr	r1, [pc, #204]	; (800084c <HAL_GPIO_EXTI_Callback+0x144>)
 800077e:	482b      	ldr	r0, [pc, #172]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 8000780:	f001 fee3 	bl	800254a <HAL_UART_Transmit>
		break;
 8000784:	e044      	b.n	8000810 <HAL_GPIO_EXTI_Callback+0x108>
		if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4831      	ldr	r0, [pc, #196]	; (8000850 <HAL_GPIO_EXTI_Callback+0x148>)
 800078c:	f000 fdf2 	bl	8001374 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d13e      	bne.n	8000814 <HAL_GPIO_EXTI_Callback+0x10c>
			HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	; 0x64
 8000798:	f000 fa4a 	bl	8000c30 <HAL_Delay>
			HAL_UART_Transmit(&huart1, "StopConnection\r\n", 16, HAL_MAX_DELAY);
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	2210      	movs	r2, #16
 80007a2:	492c      	ldr	r1, [pc, #176]	; (8000854 <HAL_GPIO_EXTI_Callback+0x14c>)
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 80007a6:	f001 fed0 	bl	800254a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2208      	movs	r2, #8
 80007b0:	4926      	ldr	r1, [pc, #152]	; (800084c <HAL_GPIO_EXTI_Callback+0x144>)
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 80007b4:	f001 fec9 	bl	800254a <HAL_UART_Transmit>
		break;
 80007b8:	e02c      	b.n	8000814 <HAL_GPIO_EXTI_Callback+0x10c>
		if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 80007ba:	2101      	movs	r1, #1
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <HAL_GPIO_EXTI_Callback+0x148>)
 80007be:	f000 fdd9 	bl	8001374 <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d127      	bne.n	8000818 <HAL_GPIO_EXTI_Callback+0x110>
			HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f000 fa31 	bl	8000c30 <HAL_Delay>
			HAL_UART_Transmit(&huart1, "SetAP\r\n", 7, HAL_MAX_DELAY);
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2207      	movs	r2, #7
 80007d4:	4920      	ldr	r1, [pc, #128]	; (8000858 <HAL_GPIO_EXTI_Callback+0x150>)
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 80007d8:	f001 feb7 	bl	800254a <HAL_UART_Transmit>
			SendCommand(SetAPMode);
 80007dc:	481f      	ldr	r0, [pc, #124]	; (800085c <HAL_GPIO_EXTI_Callback+0x154>)
 80007de:	f7ff fec7 	bl	8000570 <SendCommand>
			SendCommand(Reset);
 80007e2:	4814      	ldr	r0, [pc, #80]	; (8000834 <HAL_GPIO_EXTI_Callback+0x12c>)
 80007e4:	f7ff fec4 	bl	8000570 <SendCommand>
		    SendCommand(SetWiFiInfo);
 80007e8:	481d      	ldr	r0, [pc, #116]	; (8000860 <HAL_GPIO_EXTI_Callback+0x158>)
 80007ea:	f7ff fec1 	bl	8000570 <SendCommand>
			SendCommand(SetServerIP);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <HAL_GPIO_EXTI_Callback+0x15c>)
 80007f0:	f7ff febe 	bl	8000570 <SendCommand>
			SendCommand(SetMultiConnect);
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <HAL_GPIO_EXTI_Callback+0x160>)
 80007f6:	f7ff febb 	bl	8000570 <SendCommand>
			SendCommand(StartServerAndSetPort);
 80007fa:	481c      	ldr	r0, [pc, #112]	; (800086c <HAL_GPIO_EXTI_Callback+0x164>)
 80007fc:	f7ff feb8 	bl	8000570 <SendCommand>
			HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	2208      	movs	r2, #8
 8000806:	4911      	ldr	r1, [pc, #68]	; (800084c <HAL_GPIO_EXTI_Callback+0x144>)
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <HAL_GPIO_EXTI_Callback+0x124>)
 800080a:	f001 fe9e 	bl	800254a <HAL_UART_Transmit>
		break;
 800080e:	e003      	b.n	8000818 <HAL_GPIO_EXTI_Callback+0x110>
		break;
 8000810:	bf00      	nop
 8000812:	e002      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x112>
		break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x112>
		break;
 8000818:	bf00      	nop
	}
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40011000 	.word	0x40011000
 8000828:	08002d8c 	.word	0x08002d8c
 800082c:	20001130 	.word	0x20001130
 8000830:	20000098 	.word	0x20000098
 8000834:	20000004 	.word	0x20000004
 8000838:	200000a8 	.word	0x200000a8
 800083c:	20000010 	.word	0x20000010
 8000840:	200000d0 	.word	0x200000d0
 8000844:	200000fc 	.word	0x200000fc
 8000848:	2000010c 	.word	0x2000010c
 800084c:	08002d98 	.word	0x08002d98
 8000850:	40010800 	.word	0x40010800
 8000854:	08002da4 	.word	0x08002da4
 8000858:	08002db8 	.word	0x08002db8
 800085c:	20000030 	.word	0x20000030
 8000860:	20000040 	.word	0x20000040
 8000864:	20000064 	.word	0x20000064
 8000868:	20000020 	.word	0x20000020
 800086c:	20000080 	.word	0x20000080

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_MspInit+0x60>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <HAL_MspInit+0x60>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_MspInit+0x60>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x60>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x60>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x60>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80008b2:	2005      	movs	r0, #5
 80008b4:	f000 faaa 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x64>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_MspInit+0x64>)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000

080008e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_TIM_Base_MspInit+0x44>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d113      	bne.n	800091e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_TIM_Base_MspInit+0x48>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <HAL_TIM_Base_MspInit+0x48>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_TIM_Base_MspInit+0x48>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	201d      	movs	r0, #29
 8000914:	f000 fa85 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000918:	201d      	movs	r0, #29
 800091a:	f000 fa9e 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40000400 	.word	0x40000400
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <HAL_UART_MspInit+0x118>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d13a      	bne.n	80009c6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a3d      	ldr	r2, [pc, #244]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a37      	ldr	r2, [pc, #220]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	4619      	mov	r1, r3
 8000994:	482e      	ldr	r0, [pc, #184]	; (8000a50 <HAL_UART_MspInit+0x120>)
 8000996:	f000 fb83 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4828      	ldr	r0, [pc, #160]	; (8000a50 <HAL_UART_MspInit+0x120>)
 80009b0:	f000 fb76 	bl	80010a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	2025      	movs	r0, #37	; 0x25
 80009ba:	f000 fa32 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009be:	2025      	movs	r0, #37	; 0x25
 80009c0:	f000 fa4b 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c4:	e03c      	b.n	8000a40 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_UART_MspInit+0x124>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d137      	bne.n	8000a40 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0x11c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a00:	2304      	movs	r3, #4
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <HAL_UART_MspInit+0x120>)
 8000a14:	f000 fb44 	bl	80010a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_UART_MspInit+0x120>)
 8000a2c:	f000 fb38 	bl	80010a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2102      	movs	r1, #2
 8000a34:	2026      	movs	r0, #38	; 0x26
 8000a36:	f000 f9f4 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3a:	2026      	movs	r0, #38	; 0x26
 8000a3c:	f000 fa0d 	bl	8000e5a <HAL_NVIC_EnableIRQ>
}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40004400 	.word	0x40004400

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <BusFault_Handler+0x4>

08000a76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8a8 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 fca7 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000abe:	2020      	movs	r0, #32
 8000ac0:	f000 fca0 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM3_IRQHandler+0x10>)
 8000ace:	f001 f97d 	bl	8001dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000918 	.word	0x20000918

08000adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART1_IRQHandler+0x10>)
 8000ae2:	f001 fe19 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20001130 	.word	0x20001130

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART2_IRQHandler+0x10>)
 8000af6:	f001 fe0f 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20001170 	.word	0x20001170

08000b04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b0c:	f000 fc7a 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b46:	f7ff ffe5 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 f8e7 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fb71 	bl	8000234 <main>
  bx lr
 8000b52:	4770      	bx	lr
  ldr r3, =_sidata
 8000b54:	08002df4 	.word	0x08002df4
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b5c:	20000128 	.word	0x20000128
  ldr r2, =_sbss
 8000b60:	20000128 	.word	0x20000128
  ldr r3, = _ebss
 8000b64:	200011b4 	.word	0x200011b4

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x28>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f945 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe78 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f95d 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f925 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	20000124 	.word	0x20000124
 8000bf4:	20000120 	.word	0x20000120

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000124 	.word	0x20000124
 8000c18:	200011b0 	.word	0x200011b0

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	200011b0 	.word	0x200011b0

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_Delay+0x40>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000124 	.word	0x20000124

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4906      	ldr	r1, [pc, #24]	; (8000d0c <__NVIC_EnableIRQ+0x34>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff90 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff2d 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff42 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d005      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e0d6      	b.n	8001060 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 020e 	bic.w	r2, r2, #14
 8000ec0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b64      	ldr	r3, [pc, #400]	; (800106c <HAL_DMA_Abort_IT+0x1dc>)
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d958      	bls.n	8000f90 <HAL_DMA_Abort_IT+0x100>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a63      	ldr	r2, [pc, #396]	; (8001070 <HAL_DMA_Abort_IT+0x1e0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d04f      	beq.n	8000f88 <HAL_DMA_Abort_IT+0xf8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a61      	ldr	r2, [pc, #388]	; (8001074 <HAL_DMA_Abort_IT+0x1e4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d048      	beq.n	8000f84 <HAL_DMA_Abort_IT+0xf4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a60      	ldr	r2, [pc, #384]	; (8001078 <HAL_DMA_Abort_IT+0x1e8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d040      	beq.n	8000f7e <HAL_DMA_Abort_IT+0xee>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a5e      	ldr	r2, [pc, #376]	; (800107c <HAL_DMA_Abort_IT+0x1ec>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d038      	beq.n	8000f78 <HAL_DMA_Abort_IT+0xe8>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a5d      	ldr	r2, [pc, #372]	; (8001080 <HAL_DMA_Abort_IT+0x1f0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d030      	beq.n	8000f72 <HAL_DMA_Abort_IT+0xe2>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a5b      	ldr	r2, [pc, #364]	; (8001084 <HAL_DMA_Abort_IT+0x1f4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d028      	beq.n	8000f6c <HAL_DMA_Abort_IT+0xdc>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a53      	ldr	r2, [pc, #332]	; (800106c <HAL_DMA_Abort_IT+0x1dc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d020      	beq.n	8000f66 <HAL_DMA_Abort_IT+0xd6>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a57      	ldr	r2, [pc, #348]	; (8001088 <HAL_DMA_Abort_IT+0x1f8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_DMA_Abort_IT+0xd2>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a56      	ldr	r2, [pc, #344]	; (800108c <HAL_DMA_Abort_IT+0x1fc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d012      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xce>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a54      	ldr	r2, [pc, #336]	; (8001090 <HAL_DMA_Abort_IT+0x200>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00a      	beq.n	8000f58 <HAL_DMA_Abort_IT+0xc8>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a53      	ldr	r2, [pc, #332]	; (8001094 <HAL_DMA_Abort_IT+0x204>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d102      	bne.n	8000f52 <HAL_DMA_Abort_IT+0xc2>
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	e01b      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f56:	e018      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	e015      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f5e:	2310      	movs	r3, #16
 8000f60:	e013      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e011      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f6a:	e00e      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f70:	e00b      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f76:	e008      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	e005      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	e002      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f84:	2310      	movs	r3, #16
 8000f86:	e000      	b.n	8000f8a <HAL_DMA_Abort_IT+0xfa>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <HAL_DMA_Abort_IT+0x208>)
 8000f8c:	6053      	str	r3, [r2, #4]
 8000f8e:	e057      	b.n	8001040 <HAL_DMA_Abort_IT+0x1b0>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a36      	ldr	r2, [pc, #216]	; (8001070 <HAL_DMA_Abort_IT+0x1e0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d04f      	beq.n	800103a <HAL_DMA_Abort_IT+0x1aa>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a35      	ldr	r2, [pc, #212]	; (8001074 <HAL_DMA_Abort_IT+0x1e4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d048      	beq.n	8001036 <HAL_DMA_Abort_IT+0x1a6>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <HAL_DMA_Abort_IT+0x1e8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d040      	beq.n	8001030 <HAL_DMA_Abort_IT+0x1a0>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_DMA_Abort_IT+0x1ec>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d038      	beq.n	800102a <HAL_DMA_Abort_IT+0x19a>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <HAL_DMA_Abort_IT+0x1f0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d030      	beq.n	8001024 <HAL_DMA_Abort_IT+0x194>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_DMA_Abort_IT+0x1f4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d028      	beq.n	800101e <HAL_DMA_Abort_IT+0x18e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_DMA_Abort_IT+0x1dc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d020      	beq.n	8001018 <HAL_DMA_Abort_IT+0x188>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <HAL_DMA_Abort_IT+0x1f8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d019      	beq.n	8001014 <HAL_DMA_Abort_IT+0x184>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_DMA_Abort_IT+0x1fc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d012      	beq.n	8001010 <HAL_DMA_Abort_IT+0x180>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_DMA_Abort_IT+0x200>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00a      	beq.n	800100a <HAL_DMA_Abort_IT+0x17a>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_DMA_Abort_IT+0x204>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d102      	bne.n	8001004 <HAL_DMA_Abort_IT+0x174>
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	e01b      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001008:	e018      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	e015      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001010:	2310      	movs	r3, #16
 8001012:	e013      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001014:	2301      	movs	r3, #1
 8001016:	e011      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800101c:	e00e      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 800101e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001022:	e00b      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	e008      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	e005      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001034:	e002      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 8001036:	2310      	movs	r3, #16
 8001038:	e000      	b.n	800103c <HAL_DMA_Abort_IT+0x1ac>
 800103a:	2301      	movs	r3, #1
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_DMA_Abort_IT+0x20c>)
 800103e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
    } 
  }
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020080 	.word	0x40020080
 8001070:	40020008 	.word	0x40020008
 8001074:	4002001c 	.word	0x4002001c
 8001078:	40020030 	.word	0x40020030
 800107c:	40020044 	.word	0x40020044
 8001080:	40020058 	.word	0x40020058
 8001084:	4002006c 	.word	0x4002006c
 8001088:	40020408 	.word	0x40020408
 800108c:	4002041c 	.word	0x4002041c
 8001090:	40020430 	.word	0x40020430
 8001094:	40020444 	.word	0x40020444
 8001098:	40020400 	.word	0x40020400
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08b      	sub	sp, #44	; 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e133      	b.n	800131c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b4:	2201      	movs	r2, #1
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8122 	bne.w	8001316 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d034      	beq.n	8001144 <HAL_GPIO_Init+0xa4>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d80d      	bhi.n	80010fa <HAL_GPIO_Init+0x5a>
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x9a>
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d804      	bhi.n	80010f0 <HAL_GPIO_Init+0x50>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d031      	beq.n	800114e <HAL_GPIO_Init+0xae>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d01c      	beq.n	8001128 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ee:	e048      	b.n	8001182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d043      	beq.n	800117c <HAL_GPIO_Init+0xdc>
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d01b      	beq.n	8001130 <HAL_GPIO_Init+0x90>
          break;
 80010f8:	e043      	b.n	8001182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010fa:	4a8f      	ldr	r2, [pc, #572]	; (8001338 <HAL_GPIO_Init+0x298>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d026      	beq.n	800114e <HAL_GPIO_Init+0xae>
 8001100:	4a8d      	ldr	r2, [pc, #564]	; (8001338 <HAL_GPIO_Init+0x298>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d806      	bhi.n	8001114 <HAL_GPIO_Init+0x74>
 8001106:	4a8d      	ldr	r2, [pc, #564]	; (800133c <HAL_GPIO_Init+0x29c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d020      	beq.n	800114e <HAL_GPIO_Init+0xae>
 800110c:	4a8c      	ldr	r2, [pc, #560]	; (8001340 <HAL_GPIO_Init+0x2a0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01d      	beq.n	800114e <HAL_GPIO_Init+0xae>
          break;
 8001112:	e036      	b.n	8001182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001114:	4a8b      	ldr	r2, [pc, #556]	; (8001344 <HAL_GPIO_Init+0x2a4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0xae>
 800111a:	4a8b      	ldr	r2, [pc, #556]	; (8001348 <HAL_GPIO_Init+0x2a8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d016      	beq.n	800114e <HAL_GPIO_Init+0xae>
 8001120:	4a8a      	ldr	r2, [pc, #552]	; (800134c <HAL_GPIO_Init+0x2ac>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0xae>
          break;
 8001126:	e02c      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e028      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	3304      	adds	r3, #4
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e023      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	3308      	adds	r3, #8
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e01e      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	330c      	adds	r3, #12
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e019      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001156:	2304      	movs	r3, #4
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e012      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	611a      	str	r2, [r3, #16]
          break;
 800116e:	e008      	b.n	8001182 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001170:	2308      	movs	r3, #8
 8001172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	615a      	str	r2, [r3, #20]
          break;
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	d801      	bhi.n	800118c <HAL_GPIO_Init+0xec>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	e001      	b.n	8001190 <HAL_GPIO_Init+0xf0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3304      	adds	r3, #4
 8001190:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d802      	bhi.n	800119e <HAL_GPIO_Init+0xfe>
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x104>
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	3b08      	subs	r3, #8
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	210f      	movs	r1, #15
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	401a      	ands	r2, r3
 80011b6:	6a39      	ldr	r1, [r7, #32]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	431a      	orrs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80a2 	beq.w	8001316 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x2b0>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_GPIO_Init+0x2b0>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_GPIO_Init+0x2b0>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x2b4>)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2b8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x1b6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x2bc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x1b2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x2c0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x1ae>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x2c4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x1aa>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x2c8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x1a6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x2cc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x1a2>
 800123e:	2305      	movs	r3, #5
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 8001242:	2306      	movs	r3, #6
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1b8>
 8001256:	2300      	movs	r3, #0
 8001258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001268:	493a      	ldr	r1, [pc, #232]	; (8001354 <HAL_GPIO_Init+0x2b4>)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	493a      	ldr	r1, [pc, #232]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 800129a:	4013      	ands	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4930      	ldr	r1, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	43db      	mvns	r3, r3
 80012c0:	492b      	ldr	r1, [pc, #172]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4926      	ldr	r1, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4921      	ldr	r1, [pc, #132]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	491c      	ldr	r1, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	60cb      	str	r3, [r1, #12]
 8001306:	e006      	b.n	8001316 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4917      	ldr	r1, [pc, #92]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001312:	4013      	ands	r3, r2
 8001314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f aec4 	bne.w	80010b4 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	372c      	adds	r7, #44	; 0x2c
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	10210000 	.word	0x10210000
 800133c:	10110000 	.word	0x10110000
 8001340:	10120000 	.word	0x10120000
 8001344:	10310000 	.word	0x10310000
 8001348:	10320000 	.word	0x10320000
 800134c:	10220000 	.word	0x10220000
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00
 8001360:	40011000 	.word	0x40011000
 8001364:	40011400 	.word	0x40011400
 8001368:	40011800 	.word	0x40011800
 800136c:	40011c00 	.word	0x40011c00
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]
 80013ae:	4613      	mov	r3, r2
 80013b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	041a      	lsls	r2, r3, #16
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	400b      	ands	r3, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f970 	bl	8000708 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d112      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 800146c:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <HAL_RCC_OscConfig+0x12c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d168      	bne.n	8001560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e246      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149c:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0xbc>
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb84 	bl	8000c1c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb80 	bl	8000c1c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1fa      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xe4>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb70 	bl	8000c1c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb6c 	bl	8000c1c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1e6      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x10c>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1ba      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4939      	ldr	r1, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb25 	bl	8000c1c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb21 	bl	8000c1c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e19b      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4927      	ldr	r1, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb04 	bl	8000c1c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fb00 	bl	8000c1c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e17a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fae4 	bl	8000c1c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fae0 	bl	8000c1c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e15a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fada 	bl	8001c30 <RCC_Delay>
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff faca 	bl	8000c1c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fac6 	bl	8000c1c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e140      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	42420000 	.word	0x42420000
 80016a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b9e      	ldr	r3, [pc, #632]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a6 	beq.w	8001812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b97      	ldr	r3, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fa87 	bl	8000c1c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fa83 	bl	8000c1c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0fd      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x334>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a72      	ldr	r2, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x356>
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa37 	bl	8000c1c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fa33 	bl	8000c1c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ab      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37e>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa21 	bl	8000c1c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fa1d 	bl	8000c1c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e095      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8081 	beq.w	800191e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d061      	beq.n	80018ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff f9f1 	bl	8000c1c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f9ed 	bl	8000c1c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e067      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	430b      	orrs	r3, r1
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f9c1 	bl	8000c1c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff f9bd 	bl	8000c1c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e037      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x46a>
 80018bc:	e02f      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9aa 	bl	8000c1c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f9a6 	bl	8000c1c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e020      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060

08001934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d0      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4965      	ldr	r1, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e073      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f8fa 	bl	8000c1c <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff f8f6 	bl	8000c1c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e053      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d210      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f858 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002dd4 	.word	0x08002dd4
 8001b00:	2000011c 	.word	0x2000011c
 8001b04:	20000120 	.word	0x20000120

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b490      	push	{r4, r7}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b10:	1d3c      	adds	r4, r7, #4
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x46>
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b86:	fb02 f203 	mul.w	r2, r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e004      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	623b      	str	r3, [r7, #32]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba6:	623b      	str	r3, [r7, #32]
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc90      	pop	{r4, r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08002dc0 	.word	0x08002dc0
 8001bbc:	08002dd0 	.word	0x08002dd0
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	007a1200 	.word	0x007a1200
 8001bc8:	003d0900 	.word	0x003d0900

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	2000011c 	.word	0x2000011c

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be4:	f7ff fff2 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001be8:	4601      	mov	r1, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002de4 	.word	0x08002de4

08001c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c10:	4601      	mov	r1, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0adb      	lsrs	r3, r3, #11
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08002de4 	.word	0x08002de4

08001c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <RCC_Delay+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <RCC_Delay+0x38>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c4c:	bf00      	nop
  }
  while (Delay --);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <RCC_Delay+0x1c>
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2000011c 	.word	0x2000011c
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e041      	b.n	8001d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fe26 	bl	80008e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f000 fa72 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d001      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e044      	b.n	8001dae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_TIM_Base_Start_IT+0xac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d018      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <HAL_TIM_Base_Start_IT+0xb0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d00e      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d111      	bne.n	8001d9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d010      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9a:	e007      	b.n	8001dac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40013400 	.word	0x40013400
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800
 8001dc8:	40000c00 	.word	0x40000c00

08001dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0202 	mvn.w	r2, #2
 8001df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9a4 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f997 	bl	800214a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f9a6 	bl	800216e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0204 	mvn.w	r2, #4
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f97a 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f96d 	bl	800214a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f97c 	bl	800216e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0208 	mvn.w	r2, #8
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f950 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f943 	bl	800214a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f952 	bl	800216e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d122      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d11b      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f926 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f919 	bl	800214a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f928 	bl	800216e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0201 	mvn.w	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb36 	bl	80005bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa91 	bl	800249e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ec 	bl	8002180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0220 	mvn.w	r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa5c 	bl	800248c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x18>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0a6      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x166>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d067      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x120>
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d80b      	bhi.n	8002048 <HAL_TIM_ConfigClockSource+0x6c>
 8002030:	2b10      	cmp	r3, #16
 8002032:	d073      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x140>
 8002034:	2b10      	cmp	r3, #16
 8002036:	d802      	bhi.n	800203e <HAL_TIM_ConfigClockSource+0x62>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d06f      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800203c:	e078      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800203e:	2b20      	cmp	r3, #32
 8002040:	d06c      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x140>
 8002042:	2b30      	cmp	r3, #48	; 0x30
 8002044:	d06a      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002046:	e073      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d00d      	beq.n	8002068 <HAL_TIM_ConfigClockSource+0x8c>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d804      	bhi.n	800205a <HAL_TIM_ConfigClockSource+0x7e>
 8002050:	2b50      	cmp	r3, #80	; 0x50
 8002052:	d033      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0xe0>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d041      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002058:	e06a      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d066      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x152>
 8002060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002064:	d017      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002066:	e063      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6899      	ldr	r1, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f000 f97d 	bl	8002376 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800208a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]
      break;
 8002094:	e04c      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f000 f966 	bl	8002376 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b8:	609a      	str	r2, [r3, #8]
      break;
 80020ba:	e039      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f000 f8dd 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2150      	movs	r1, #80	; 0x50
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f934 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020da:	e029      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f000 f8fb 	bl	80022e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2160      	movs	r1, #96	; 0x60
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f924 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020fa:	e019      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	461a      	mov	r2, r3
 800210a:	f000 f8bd 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f914 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 800211a:	e009      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 f90b 	bl	8002342 <TIM_ITRx_SetConfig>
        break;
 800212c:	e000      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800212e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
	...

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a33      	ldr	r2, [pc, #204]	; (8002274 <TIM_Base_SetConfig+0xe0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a32      	ldr	r2, [pc, #200]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00f      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d00b      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <TIM_Base_SetConfig+0xe8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <TIM_Base_SetConfig+0xec>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <TIM_Base_SetConfig+0xf0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <TIM_Base_SetConfig+0xe0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <TIM_Base_SetConfig+0x82>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a21      	ldr	r2, [pc, #132]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00f      	beq.n	8002216 <TIM_Base_SetConfig+0x82>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0x82>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1e      	ldr	r2, [pc, #120]	; (800227c <TIM_Base_SetConfig+0xe8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0x82>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <TIM_Base_SetConfig+0xec>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0x82>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <TIM_Base_SetConfig+0xf0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <TIM_Base_SetConfig+0xe0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d003      	beq.n	800225c <TIM_Base_SetConfig+0xc8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d103      	bne.n	8002264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	615a      	str	r2, [r3, #20]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40013400 	.word	0x40013400
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00

08002288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 030a 	bic.w	r3, r3, #10
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 0210 	bic.w	r2, r3, #16
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800230e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	031b      	lsls	r3, r3, #12
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	621a      	str	r2, [r3, #32]
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	f043 0307 	orr.w	r3, r3, #7
 8002364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002376:	b480      	push	{r7}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	431a      	orrs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	609a      	str	r2, [r3, #8]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e050      	b.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d00e      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10c      	bne.n	800245c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4313      	orrs	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40013400 	.word	0x40013400
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00

0800248c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e03f      	b.n	8002542 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fa2a 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	; 0x24
 80024e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb83 	bl	8002c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b08a      	sub	sp, #40	; 0x28
 800254e:	af02      	add	r7, sp, #8
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d17c      	bne.n	8002664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_UART_Transmit+0x2c>
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e075      	b.n	8002666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_UART_Transmit+0x3e>
 8002584:	2302      	movs	r3, #2
 8002586:	e06e      	b.n	8002666 <HAL_UART_Transmit+0x11c>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2221      	movs	r2, #33	; 0x21
 800259a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800259e:	f7fe fb3d 	bl	8000c1c <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b8:	d108      	bne.n	80025cc <HAL_UART_Transmit+0x82>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e003      	b.n	80025d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80025dc:	e02a      	b.n	8002634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9a7 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e036      	b.n	8002666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800260c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	3302      	adds	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e007      	b.n	8002626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1cf      	bne.n	80025de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2140      	movs	r1, #64	; 0x40
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f977 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e006      	b.n	8002666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	4613      	mov	r3, r2
 800267a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b20      	cmp	r3, #32
 8002686:	d140      	bne.n	800270a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_UART_Receive_IT+0x26>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e039      	b.n	800270c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Receive_IT+0x38>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e032      	b.n	800270c <HAL_UART_Receive_IT+0x9e>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2222      	movs	r2, #34	; 0x22
 80026ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
	...

08002718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_UART_IRQHandler+0x52>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f9cc 	bl	8002b00 <UART_Receive_IT>
      return;
 8002768:	e0d1      	b.n	800290e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80b0 	beq.w	80028d2 <HAL_UART_IRQHandler+0x1ba>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_UART_IRQHandler+0x70>
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80a5 	beq.w	80028d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_UART_IRQHandler+0x90>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_UART_IRQHandler+0xb0>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_UART_IRQHandler+0xd0>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00f      	beq.n	8002812 <HAL_UART_IRQHandler+0xfa>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <HAL_UART_IRQHandler+0xee>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	f043 0208 	orr.w	r2, r3, #8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d078      	beq.n	800290c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_UART_IRQHandler+0x11c>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f966 	bl	8002b00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf14      	ite	ne
 8002842:	2301      	movne	r3, #1
 8002844:	2300      	moveq	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_UART_IRQHandler+0x144>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d031      	beq.n	80028c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8b7 	bl	80029d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <HAL_UART_IRQHandler+0x1fc>)
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fafb 	bl	8000e90 <HAL_DMA_Abort_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028aa:	4610      	mov	r0, r2
 80028ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ae:	e00e      	b.n	80028ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f83a 	bl	800292a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b6:	e00a      	b.n	80028ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f836 	bl	800292a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028be:	e006      	b.n	80028ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f832 	bl	800292a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80028cc:	e01e      	b.n	800290c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ce:	bf00      	nop
    return;
 80028d0:	e01c      	b.n	800290c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_UART_IRQHandler+0x1d6>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8a3 	bl	8002a32 <UART_Transmit_IT>
    return;
 80028ec:	e00f      	b.n	800290e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_UART_IRQHandler+0x1f6>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8e4 	bl	8002ad0 <UART_EndTransmit_IT>
    return;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_UART_IRQHandler+0x1f6>
    return;
 800290c:	bf00      	nop
  }
}
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	08002a0b 	.word	0x08002a0b

08002918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e02c      	b.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d028      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 800295c:	f7fe f95e 	bl	8000c1c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	d21d      	bcs.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e00f      	b.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0c3      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff ff80 	bl	800292a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b21      	cmp	r3, #33	; 0x21
 8002a44:	d13e      	bne.n	8002ac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d114      	bne.n	8002a7a <UART_Transmit_IT+0x48>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d110      	bne.n	8002a7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	1c9a      	adds	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	e008      	b.n	8002a8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6211      	str	r1, [r2, #32]
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002abe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff11 	bl	8002918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b22      	cmp	r3, #34	; 0x22
 8002b12:	d170      	bne.n	8002bf6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d117      	bne.n	8002b4e <UART_Receive_IT+0x4e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	1c9a      	adds	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4c:	e026      	b.n	8002b9c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d007      	beq.n	8002b72 <UART_Receive_IT+0x72>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <UART_Receive_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e008      	b.n	8002b92 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d120      	bne.n	8002bf2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0220 	bic.w	r2, r2, #32
 8002bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fd fd51 	bl	8000690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e002      	b.n	8002bf8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c3a:	f023 030c 	bic.w	r3, r3, #12
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <UART_SetConfig+0x114>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d103      	bne.n	8002c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7fe ffce 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	e002      	b.n	8002c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7fe ffb6 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <UART_SetConfig+0x118>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	0119      	lsls	r1, r3, #4
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <UART_SetConfig+0x118>)
 8002cae:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	4419      	add	r1, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <UART_SetConfig+0x118>)
 8002ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	fb00 f303 	mul.w	r3, r0, r3
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	3332      	adds	r3, #50	; 0x32
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <UART_SetConfig+0x118>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	440a      	add	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013800 	.word	0x40013800
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	2500      	movs	r5, #0
 8002d20:	4e0c      	ldr	r6, [pc, #48]	; (8002d54 <__libc_init_array+0x38>)
 8002d22:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d24:	1ba4      	subs	r4, r4, r6
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	42a5      	cmp	r5, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	f000 f822 	bl	8002d74 <_init>
 8002d30:	2500      	movs	r5, #0
 8002d32:	4e0a      	ldr	r6, [pc, #40]	; (8002d5c <__libc_init_array+0x40>)
 8002d34:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <__libc_init_array+0x44>)
 8002d36:	1ba4      	subs	r4, r4, r6
 8002d38:	10a4      	asrs	r4, r4, #2
 8002d3a:	42a5      	cmp	r5, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d44:	4798      	blx	r3
 8002d46:	3501      	adds	r5, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4e:	4798      	blx	r3
 8002d50:	3501      	adds	r5, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	08002dec 	.word	0x08002dec
 8002d58:	08002dec 	.word	0x08002dec
 8002d5c:	08002dec 	.word	0x08002dec
 8002d60:	08002df0 	.word	0x08002df0

08002d64 <memset>:
 8002d64:	4603      	mov	r3, r0
 8002d66:	4402      	add	r2, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <_init>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr

08002d80 <_fini>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr
