
STM32_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b0  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba94  0800ba94  000201ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba94  0800ba94  000201ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba94  0800ba94  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  0800ba9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037dc  200001ac  0800bc48  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003988  0800bc48  00023988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d15e  00000000  00000000  000201d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d9e  00000000  00000000  0002d333  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a061  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2ed  00000000  00000000  0004aad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000995c2  00000000  00000000  00055dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c10  00000000  00000000  000ef3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ac 	.word	0x200001ac
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a1cc 	.word	0x0800a1cc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001b0 	.word	0x200001b0
 8000224:	0800a1cc 	.word	0x0800a1cc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a24:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LCD_WR_REG+0x44>)
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <LCD_WR_REG+0x40>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	611a      	str	r2, [r3, #16]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a74:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LCD_WR_DATAX+0x44>)
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <LCD_WR_DATAX+0x40>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8e:	611a      	str	r2, [r3, #16]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000aac:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ab0:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000ab4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ab8:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <LCD_RD_DATA+0x84>)
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	f648 1289 	movw	r2, #35209	; 0x8989
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d102      	bne.n	8000ae8 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f006 fe9e 	bl	8007824 <HAL_Delay>
	t = DATAIN
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LCD_RD_DATA+0x80>)
 8000af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afa:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000afe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b02:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000b06:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b0a:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <LCD_RD_DATA+0x7c>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
	return t;
 8000b14:	88fb      	ldrh	r3, [r7, #6]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	200001f8 	.word	0x200001f8

08000b2c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff68 	bl	8000a14 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <LCD_WriteReg+0x50>)
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	60d3      	str	r3, [r2, #12]
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <LCD_WriteReg+0x4c>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	611a      	str	r2, [r3, #16]
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff41 	bl	8000a14 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000b92:	f7ff ff87 	bl	8000aa4 <LCD_RD_DATA>
 8000b96:	4603      	mov	r3, r0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <LCD_WriteRAM_Prepare+0x14>)
 8000ba6:	891b      	ldrh	r3, [r3, #8]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <LCD_WR_REG>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001f8 	.word	0x200001f8

08000bb8 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000bc8:	4b73      	ldr	r3, [pc, #460]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000bca:	889b      	ldrh	r3, [r3, #4]
 8000bcc:	f249 3241 	movw	r2, #37697	; 0x9341
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d005      	beq.n	8000be0 <LCD_SetCursor+0x28>
 8000bd4:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d164      	bne.n	8000caa <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000be0:	4b6d      	ldr	r3, [pc, #436]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000be2:	895b      	ldrh	r3, [r3, #10]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff15 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b67      	ldr	r3, [pc, #412]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	4b65      	ldr	r3, [pc, #404]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	4b64      	ldr	r3, [pc, #400]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c18:	4b60      	ldr	r3, [pc, #384]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	60d3      	str	r3, [r2, #12]
 8000c30:	4b5a      	ldr	r3, [pc, #360]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c44:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000c46:	899b      	ldrh	r3, [r3, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fee3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	60d3      	str	r3, [r2, #12]
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000ca8:	e248      	b.n	800113c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cac:	889b      	ldrh	r3, [r3, #4]
 8000cae:	f646 0204 	movw	r2, #26628	; 0x6804
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d176      	bne.n	8000da4 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cb8:	799b      	ldrb	r3, [r3, #6]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000cce:	895b      	ldrh	r3, [r3, #10]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe9f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	60d3      	str	r3, [r2, #12]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <LCD_SetCursor+0x1e0>)
 8000d32:	899b      	ldrh	r3, [r3, #12]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe6d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <LCD_SetCursor+0x1e8>)
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	60d3      	str	r3, [r2, #12]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <LCD_SetCursor+0x1e4>)
 8000d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d92:	611a      	str	r2, [r3, #16]
}
 8000d94:	e1d2      	b.n	800113c <LCD_SetCursor+0x584>
 8000d96:	bf00      	nop
 8000d98:	200001f8 	.word	0x200001f8
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000da4:	4b99      	ldr	r3, [pc, #612]	; (800100c <LCD_SetCursor+0x454>)
 8000da6:	889b      	ldrh	r3, [r3, #4]
 8000da8:	f641 1263 	movw	r2, #6499	; 0x1963
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 8133 	bne.w	8001018 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000db2:	4b96      	ldr	r3, [pc, #600]	; (800100c <LCD_SetCursor+0x454>)
 8000db4:	799b      	ldrb	r3, [r3, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d163      	bne.n	8000e82 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000dba:	4b94      	ldr	r3, [pc, #592]	; (800100c <LCD_SetCursor+0x454>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000dc8:	4b90      	ldr	r3, [pc, #576]	; (800100c <LCD_SetCursor+0x454>)
 8000dca:	895b      	ldrh	r3, [r3, #10]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe21 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000dd2:	4b8f      	ldr	r3, [pc, #572]	; (8001010 <LCD_SetCursor+0x458>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <LCD_SetCursor+0x458>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	4b8c      	ldr	r3, [pc, #560]	; (8001014 <LCD_SetCursor+0x45c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	4b89      	ldr	r3, [pc, #548]	; (8001010 <LCD_SetCursor+0x458>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	615a      	str	r2, [r3, #20]
 8000dee:	4b88      	ldr	r3, [pc, #544]	; (8001010 <LCD_SetCursor+0x458>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	4b86      	ldr	r3, [pc, #536]	; (8001010 <LCD_SetCursor+0x458>)
 8000df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000dfc:	4b84      	ldr	r3, [pc, #528]	; (8001010 <LCD_SetCursor+0x458>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	4b82      	ldr	r3, [pc, #520]	; (8001010 <LCD_SetCursor+0x458>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b81      	ldr	r3, [pc, #516]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <LCD_SetCursor+0x458>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b7d      	ldr	r3, [pc, #500]	; (8001010 <LCD_SetCursor+0x458>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <LCD_SetCursor+0x458>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <LCD_SetCursor+0x458>)
 8000e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	4b73      	ldr	r3, [pc, #460]	; (8001010 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	4b72      	ldr	r3, [pc, #456]	; (8001010 <LCD_SetCursor+0x458>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	4b70      	ldr	r3, [pc, #448]	; (8001010 <LCD_SetCursor+0x458>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <LCD_SetCursor+0x458>)
 8000e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	4b6c      	ldr	r3, [pc, #432]	; (8001010 <LCD_SetCursor+0x458>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4a6b      	ldr	r2, [pc, #428]	; (8001014 <LCD_SetCursor+0x45c>)
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	60d3      	str	r3, [r2, #12]
 8000e6c:	4b68      	ldr	r3, [pc, #416]	; (8001010 <LCD_SetCursor+0x458>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <LCD_SetCursor+0x458>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	4b65      	ldr	r3, [pc, #404]	; (8001010 <LCD_SetCursor+0x458>)
 8000e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	e061      	b.n	8000f46 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000e82:	4b62      	ldr	r3, [pc, #392]	; (800100c <LCD_SetCursor+0x454>)
 8000e84:	895b      	ldrh	r3, [r3, #10]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdc4 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000e8c:	4b60      	ldr	r3, [pc, #384]	; (8001010 <LCD_SetCursor+0x458>)
 8000e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <LCD_SetCursor+0x458>)
 8000e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <LCD_SetCursor+0x458>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <LCD_SetCursor+0x458>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <LCD_SetCursor+0x458>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000eba:	4b55      	ldr	r3, [pc, #340]	; (8001010 <LCD_SetCursor+0x458>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	4b53      	ldr	r3, [pc, #332]	; (8001010 <LCD_SetCursor+0x458>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4a51      	ldr	r2, [pc, #324]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	60d3      	str	r3, [r2, #12]
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <LCD_SetCursor+0x458>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <LCD_SetCursor+0x458>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000ee6:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <LCD_SetCursor+0x458>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b48      	ldr	r3, [pc, #288]	; (8001010 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <LCD_SetCursor+0x454>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	121a      	asrs	r2, r3, #8
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <LCD_SetCursor+0x458>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <LCD_SetCursor+0x458>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	4b40      	ldr	r3, [pc, #256]	; (8001010 <LCD_SetCursor+0x458>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <LCD_SetCursor+0x458>)
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <LCD_SetCursor+0x458>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <LCD_SetCursor+0x454>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a39      	ldr	r2, [pc, #228]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	60d3      	str	r3, [r2, #12]
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <LCD_SetCursor+0x458>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <LCD_SetCursor+0x458>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <LCD_SetCursor+0x458>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <LCD_SetCursor+0x454>)
 8000f48:	899b      	ldrh	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fd62 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <LCD_SetCursor+0x458>)
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <LCD_SetCursor+0x458>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <LCD_SetCursor+0x458>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <LCD_SetCursor+0x458>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <LCD_SetCursor+0x458>)
 8000f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <LCD_SetCursor+0x458>)
 8000f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <LCD_SetCursor+0x458>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	4a20      	ldr	r2, [pc, #128]	; (8001014 <LCD_SetCursor+0x45c>)
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	60d3      	str	r3, [r2, #12]
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <LCD_SetCursor+0x458>)
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <LCD_SetCursor+0x458>)
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <LCD_SetCursor+0x458>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <LCD_SetCursor+0x458>)
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <LCD_SetCursor+0x454>)
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	121a      	asrs	r2, r3, #8
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <LCD_SetCursor+0x45c>)
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <LCD_SetCursor+0x458>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <LCD_SetCursor+0x458>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <LCD_SetCursor+0x458>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <LCD_SetCursor+0x458>)
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <LCD_SetCursor+0x458>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <LCD_SetCursor+0x454>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <LCD_SetCursor+0x45c>)
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	60d3      	str	r3, [r2, #12]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LCD_SetCursor+0x458>)
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <LCD_SetCursor+0x458>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <LCD_SetCursor+0x458>)
 8001004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	e097      	b.n	800113c <LCD_SetCursor+0x584>
 800100c:	200001f8 	.word	0x200001f8
 8001010:	40011000 	.word	0x40011000
 8001014:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <LCD_SetCursor+0x58c>)
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001020:	4293      	cmp	r3, r2
 8001022:	d172      	bne.n	800110a <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <LCD_SetCursor+0x58c>)
 8001026:	895b      	ldrh	r3, [r3, #10]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcf3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <LCD_SetCursor+0x590>)
 8001030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <LCD_SetCursor+0x590>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b41      	ldr	r3, [pc, #260]	; (800114c <LCD_SetCursor+0x594>)
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <LCD_SetCursor+0x590>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <LCD_SetCursor+0x590>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <LCD_SetCursor+0x590>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <LCD_SetCursor+0x58c>)
 800105e:	895b      	ldrh	r3, [r3, #10]
 8001060:	3301      	adds	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fcd5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <LCD_SetCursor+0x590>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <LCD_SetCursor+0x590>)
 8001074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4a33      	ldr	r2, [pc, #204]	; (800114c <LCD_SetCursor+0x594>)
 800107e:	b2db      	uxtb	r3, r3
 8001080:	60d3      	str	r3, [r2, #12]
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <LCD_SetCursor+0x590>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <LCD_SetCursor+0x590>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <LCD_SetCursor+0x590>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <LCD_SetCursor+0x58c>)
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fcba 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <LCD_SetCursor+0x590>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <LCD_SetCursor+0x590>)
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <LCD_SetCursor+0x594>)
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <LCD_SetCursor+0x590>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <LCD_SetCursor+0x590>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <LCD_SetCursor+0x590>)
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <LCD_SetCursor+0x58c>)
 80010d0:	899b      	ldrh	r3, [r3, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc9c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <LCD_SetCursor+0x590>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <LCD_SetCursor+0x590>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <LCD_SetCursor+0x594>)
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	60d3      	str	r3, [r2, #12]
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <LCD_SetCursor+0x590>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <LCD_SetCursor+0x590>)
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <LCD_SetCursor+0x590>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	611a      	str	r2, [r3, #16]
}
 8001108:	e018      	b.n	800113c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <LCD_SetCursor+0x58c>)
 800110c:	799b      	ldrb	r3, [r3, #6]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LCD_SetCursor+0x58c>)
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LCD_SetCursor+0x58c>)
 8001122:	895b      	ldrh	r3, [r3, #10]
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LCD_SetCursor+0x58c>)
 8001130:	899b      	ldrh	r3, [r3, #12]
 8001132:	88ba      	ldrh	r2, [r7, #4]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fcf8 	bl	8000b2c <LCD_WriteReg>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001f8 	.word	0x200001f8
 8001148:	40011000 	.word	0x40011000
 800114c:	40010c00 	.word	0x40010c00

08001150 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001164:	799b      	ldrb	r3, [r3, #6]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <LCD_Scan_Dir+0x32>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001172:	4293      	cmp	r3, r2
 8001174:	d005      	beq.n	8001182 <LCD_Scan_Dir+0x32>
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	f641 1263 	movw	r2, #6499	; 0x1963
 800117e:	4293      	cmp	r3, r2
 8001180:	d109      	bne.n	8001196 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d134      	bne.n	80011f4 <LCD_Scan_Dir+0xa4>
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001192:	4293      	cmp	r3, r2
 8001194:	d12e      	bne.n	80011f4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d82b      	bhi.n	80011f4 <LCD_Scan_Dir+0xa4>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <LCD_Scan_Dir+0x54>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011cb 	.word	0x080011cb
 80011ac:	080011d1 	.word	0x080011d1
 80011b0:	080011d7 	.word	0x080011d7
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	080011e9 	.word	0x080011e9
 80011c0:	080011ef 	.word	0x080011ef
		{
		case 0:
			dir = 6;
 80011c4:	2306      	movs	r3, #6
 80011c6:	71fb      	strb	r3, [r7, #7]
			break;
 80011c8:	e014      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	71fb      	strb	r3, [r7, #7]
			break;
 80011ce:	e011      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	71fb      	strb	r3, [r7, #7]
			break;
 80011d4:	e00e      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	71fb      	strb	r3, [r7, #7]
			break;
 80011da:	e00b      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
			break;
 80011e0:	e008      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
			break;
 80011e6:	e005      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80011e8:	2303      	movs	r3, #3
 80011ea:	71fb      	strb	r3, [r7, #7]
			break;
 80011ec:	e002      	b.n	80011f4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	71fb      	strb	r3, [r7, #7]
			break;
 80011f2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80011f6:	889b      	ldrh	r3, [r3, #4]
 80011f8:	f249 3241 	movw	r2, #37697	; 0x9341
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d018      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	f646 0204 	movw	r2, #26628	; 0x6804
 8001208:	4293      	cmp	r3, r2
 800120a:	d012      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	f245 3210 	movw	r2, #21264	; 0x5310
 8001214:	4293      	cmp	r3, r2
 8001216:	d00c      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001220:	4293      	cmp	r3, r2
 8001222:	d006      	beq.n	8001232 <LCD_Scan_Dir+0xe2>
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	f641 1263 	movw	r2, #6499	; 0x1963
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 8250 	bne.w	80016d2 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d836      	bhi.n	80012a6 <LCD_Scan_Dir+0x156>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <LCD_Scan_Dir+0xf0>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	080012a7 	.word	0x080012a7
 8001244:	08001261 	.word	0x08001261
 8001248:	0800126b 	.word	0x0800126b
 800124c:	08001275 	.word	0x08001275
 8001250:	0800127f 	.word	0x0800127f
 8001254:	08001289 	.word	0x08001289
 8001258:	08001293 	.word	0x08001293
 800125c:	0800129d 	.word	0x0800129d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001266:	81fb      	strh	r3, [r7, #14]
			break;
 8001268:	e01d      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001270:	81fb      	strh	r3, [r7, #14]
			break;
 8001272:	e018      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800127a:	81fb      	strh	r3, [r7, #14]
			break;
 800127c:	e013      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	81fb      	strh	r3, [r7, #14]
			break;
 8001286:	e00e      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800128e:	81fb      	strh	r3, [r7, #14]
			break;
 8001290:	e009      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001298:	81fb      	strh	r3, [r7, #14]
			break;
 800129a:	e004      	b.n	80012a6 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012a2:	81fb      	strh	r3, [r7, #14]
			break;
 80012a4:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d103      	bne.n	80012ba <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80012b2:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80012b6:	81bb      	strh	r3, [r7, #12]
 80012b8:	e001      	b.n	80012be <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80012ba:	2336      	movs	r3, #54	; 0x36
 80012bc:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00f      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012cc:	889b      	ldrh	r3, [r3, #4]
 80012ce:	f245 5210 	movw	r2, #21776	; 0x5510
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d009      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012d8:	889b      	ldrh	r3, [r3, #4]
 80012da:	f641 1263 	movw	r2, #6499	; 0x1963
 80012de:	4293      	cmp	r3, r2
 80012e0:	d003      	beq.n	80012ea <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	f646 0204 	movw	r2, #26628	; 0x6804
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d103      	bne.n	80012fe <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80012fe:	89fa      	ldrh	r2, [r7, #14]
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc11 	bl	8000b2c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001312:	4293      	cmp	r3, r2
 8001314:	d028      	beq.n	8001368 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001326:	885b      	ldrh	r3, [r3, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d21d      	bcs.n	8001368 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001334:	885a      	ldrh	r2, [r3, #2]
 8001336:	4b03      	ldr	r3, [pc, #12]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 8001338:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800133a:	4a02      	ldr	r2, [pc, #8]	; (8001344 <LCD_Scan_Dir+0x1f4>)
 800133c:	897b      	ldrh	r3, [r7, #10]
 800133e:	8053      	strh	r3, [r2, #2]
 8001340:	e012      	b.n	8001368 <LCD_Scan_Dir+0x218>
 8001342:	bf00      	nop
 8001344:	200001f8 	.word	0x200001f8
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	d909      	bls.n	8001368 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001354:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800135a:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800135c:	885a      	ldrh	r2, [r3, #2]
 800135e:	4b7a      	ldr	r3, [pc, #488]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001360:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001362:	4a79      	ldr	r2, [pc, #484]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001368:	4b77      	ldr	r3, [pc, #476]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001370:	4293      	cmp	r3, r2
 8001372:	f040 80ef 	bne.w	8001554 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001378:	895b      	ldrh	r3, [r3, #10]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb4a 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001380:	4b72      	ldr	r3, [pc, #456]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <LCD_Scan_Dir+0x400>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80013ac:	895b      	ldrh	r3, [r3, #10]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb2e 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013b8:	4b64      	ldr	r3, [pc, #400]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <LCD_Scan_Dir+0x400>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80013e2:	4b59      	ldr	r3, [pc, #356]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80013e4:	895b      	ldrh	r3, [r3, #10]
 80013e6:	3302      	adds	r3, #2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb12 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80013f0:	4b56      	ldr	r3, [pc, #344]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	4b51      	ldr	r3, [pc, #324]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	121a      	asrs	r2, r3, #8
 8001408:	4b51      	ldr	r3, [pc, #324]	; (8001550 <LCD_Scan_Dir+0x400>)
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001422:	895b      	ldrh	r3, [r3, #10]
 8001424:	3303      	adds	r3, #3
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff faf3 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3b01      	subs	r3, #1
 8001444:	4a42      	ldr	r2, [pc, #264]	; (8001550 <LCD_Scan_Dir+0x400>)
 8001446:	b2db      	uxtb	r3, r3
 8001448:	60d3      	str	r3, [r2, #12]
 800144a:	4b40      	ldr	r3, [pc, #256]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001460:	899b      	ldrh	r3, [r3, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fad6 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <LCD_Scan_Dir+0x400>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001494:	899b      	ldrh	r3, [r3, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff faba 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <LCD_Scan_Dir+0x400>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80014cc:	899b      	ldrh	r3, [r3, #12]
 80014ce:	3302      	adds	r3, #2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fa9e 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	121a      	asrs	r2, r3, #8
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <LCD_Scan_Dir+0x400>)
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <LCD_Scan_Dir+0x3fc>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 800150a:	899b      	ldrh	r3, [r3, #12]
 800150c:	3303      	adds	r3, #3
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fa7f 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LCD_Scan_Dir+0x3f8>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <LCD_Scan_Dir+0x400>)
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60d3      	str	r3, [r2, #12]
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <LCD_Scan_Dir+0x3fc>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	4b03      	ldr	r3, [pc, #12]	; (800154c <LCD_Scan_Dir+0x3fc>)
 8001540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001544:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001546:	e10a      	b.n	800175e <LCD_Scan_Dir+0x60e>
 8001548:	200001f8 	.word	0x200001f8
 800154c:	40011000 	.word	0x40011000
 8001550:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001556:	895b      	ldrh	r3, [r3, #10]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fa5b 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800155e:	4b83      	ldr	r3, [pc, #524]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	4b80      	ldr	r3, [pc, #512]	; (8001770 <LCD_Scan_Dir+0x620>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	4b7d      	ldr	r3, [pc, #500]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	4b7c      	ldr	r3, [pc, #496]	; (800176c <LCD_Scan_Dir+0x61c>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	4b7a      	ldr	r3, [pc, #488]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <LCD_Scan_Dir+0x61c>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	4b75      	ldr	r3, [pc, #468]	; (8001770 <LCD_Scan_Dir+0x620>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	4b73      	ldr	r3, [pc, #460]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b71      	ldr	r3, [pc, #452]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	4b70      	ldr	r3, [pc, #448]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	4b6c      	ldr	r3, [pc, #432]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <LCD_Scan_Dir+0x618>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	121a      	asrs	r2, r3, #8
 80015ca:	4b69      	ldr	r3, [pc, #420]	; (8001770 <LCD_Scan_Dir+0x620>)
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <LCD_Scan_Dir+0x61c>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <LCD_Scan_Dir+0x618>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <LCD_Scan_Dir+0x620>)
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	60d3      	str	r3, [r2, #12]
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <LCD_Scan_Dir+0x61c>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9fc 	bl	8000a14 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <LCD_Scan_Dir+0x61c>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <LCD_Scan_Dir+0x620>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <LCD_Scan_Dir+0x61c>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <LCD_Scan_Dir+0x620>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <LCD_Scan_Dir+0x61c>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <LCD_Scan_Dir+0x61c>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <LCD_Scan_Dir+0x61c>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <LCD_Scan_Dir+0x618>)
 8001682:	885b      	ldrh	r3, [r3, #2]
 8001684:	3b01      	subs	r3, #1
 8001686:	121a      	asrs	r2, r3, #8
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <LCD_Scan_Dir+0x620>)
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <LCD_Scan_Dir+0x61c>)
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <LCD_Scan_Dir+0x61c>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <LCD_Scan_Dir+0x61c>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <LCD_Scan_Dir+0x618>)
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a2e      	ldr	r2, [pc, #184]	; (8001770 <LCD_Scan_Dir+0x620>)
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	60d3      	str	r3, [r2, #12]
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <LCD_Scan_Dir+0x61c>)
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016d0:	e045      	b.n	800175e <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d836      	bhi.n	8001746 <LCD_Scan_Dir+0x5f6>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <LCD_Scan_Dir+0x590>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	08001701 	.word	0x08001701
 80016e4:	0800170b 	.word	0x0800170b
 80016e8:	08001715 	.word	0x08001715
 80016ec:	08001747 	.word	0x08001747
 80016f0:	0800171f 	.word	0x0800171f
 80016f4:	08001729 	.word	0x08001729
 80016f8:	08001733 	.word	0x08001733
 80016fc:	0800173d 	.word	0x0800173d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001706:	81fb      	strh	r3, [r7, #14]
			break;
 8001708:	e01d      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	81fb      	strh	r3, [r7, #14]
			break;
 8001712:	e018      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	81fb      	strh	r3, [r7, #14]
			break;
 800171c:	e013      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001724:	81fb      	strh	r3, [r7, #14]
			break;
 8001726:	e00e      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800172e:	81fb      	strh	r3, [r7, #14]
			break;
 8001730:	e009      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f043 0318 	orr.w	r3, r3, #24
 8001738:	81fb      	strh	r3, [r7, #14]
			break;
 800173a:	e004      	b.n	8001746 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	81fb      	strh	r3, [r7, #14]
			break;
 8001744:	bf00      	nop
		}
		dirreg = 0X03;
 8001746:	2303      	movs	r3, #3
 8001748:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001750:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001752:	89fa      	ldrh	r2, [r7, #14]
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f9e7 	bl	8000b2c <LCD_WriteReg>
	}
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200001f8 	.word	0x200001f8
 800176c:	40011000 	.word	0x40011000
 8001770:	40010c00 	.word	0x40010c00

08001774 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	460a      	mov	r2, r1
 800177e:	80fb      	strh	r3, [r7, #6]
 8001780:	4613      	mov	r3, r2
 8001782:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa14 	bl	8000bb8 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8001790:	f7ff fa06 	bl	8000ba0 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LCD_DrawPoint+0x54>)
 8001796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <LCD_DrawPoint+0x54>)
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <LCD_DrawPoint+0x58>)
 80017a6:	881a      	ldrh	r2, [r3, #0]
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LCD_DrawPoint+0x5c>)
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LCD_DrawPoint+0x54>)
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LCD_DrawPoint+0x54>)
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <LCD_DrawPoint+0x54>)
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	611a      	str	r2, [r3, #16]
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40011000 	.word	0x40011000
 80017cc:	200001c8 	.word	0x200001c8
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80017e6:	4b75      	ldr	r3, [pc, #468]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 80017e8:	889b      	ldrh	r3, [r3, #4]
 80017ea:	f249 3241 	movw	r2, #37697	; 0x9341
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d005      	beq.n	80017fe <LCD_Fast_DrawPoint+0x2a>
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 80017f4:	889b      	ldrh	r3, [r3, #4]
 80017f6:	f245 3210 	movw	r2, #21264	; 0x5310
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d164      	bne.n	80018c8 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 8001800:	895b      	ldrh	r3, [r3, #10]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f906 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001836:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 800184a:	b2db      	uxtb	r3, r3
 800184c:	60d3      	str	r3, [r2, #12]
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 8001864:	899b      	ldrh	r3, [r3, #12]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8d4 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800186c:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800186e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29a      	uxth	r2, r3
 8001882:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001898:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	615a      	str	r2, [r3, #20]
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	60d3      	str	r3, [r2, #12]
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e1e6      	b.n	8001c96 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 80018ca:	889b      	ldrh	r3, [r3, #4]
 80018cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d179      	bne.n	80019c8 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 80018d6:	895b      	ldrh	r3, [r3, #10]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f89b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 800190e:	895b      	ldrh	r3, [r3, #10]
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f87d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 800192e:	b2db      	uxtb	r3, r3
 8001930:	60d3      	str	r3, [r2, #12]
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 8001948:	899b      	ldrh	r3, [r3, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f862 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800195a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <LCD_Fast_DrawPoint+0x1e8>)
 8001980:	899b      	ldrh	r3, [r3, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f844 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <LCD_Fast_DrawPoint+0x1f0>)
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	60d3      	str	r3, [r2, #12]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <LCD_Fast_DrawPoint+0x1ec>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	e16d      	b.n	8001c96 <LCD_Fast_DrawPoint+0x4c2>
 80019ba:	bf00      	nop
 80019bc:	200001f8 	.word	0x200001f8
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <LCD_Fast_DrawPoint+0x398>)
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	f641 1263 	movw	r2, #6499	; 0x1963
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f040 80d1 	bne.w	8001b78 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <LCD_Fast_DrawPoint+0x398>)
 80019d8:	799b      	ldrb	r3, [r3, #6]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80019de:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <LCD_Fast_DrawPoint+0x398>)
 80019e0:	881a      	ldrh	r2, [r3, #0]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80019ec:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <LCD_Fast_DrawPoint+0x398>)
 80019ee:	895b      	ldrh	r3, [r3, #10]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f80f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019f6:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 80019f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	615a      	str	r2, [r3, #20]
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	60d3      	str	r3, [r2, #12]
 8001a3c:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	60d3      	str	r3, [r2, #12]
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <LCD_Fast_DrawPoint+0x398>)
 8001aac:	899b      	ldrh	r3, [r3, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe ffb0 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	60d3      	str	r3, [r2, #12]
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <LCD_Fast_DrawPoint+0x3a0>)
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	60d3      	str	r3, [r2, #12]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <LCD_Fast_DrawPoint+0x39c>)
 8001b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	e095      	b.n	8001c96 <LCD_Fast_DrawPoint+0x4c2>
 8001b6a:	bf00      	nop
 8001b6c:	200001f8 	.word	0x200001f8
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001b7a:	889b      	ldrh	r3, [r3, #4]
 8001b7c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d16f      	bne.n	8001c64 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001b84:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001b86:	799b      	ldrb	r3, [r3, #6]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001b9c:	895b      	ldrh	r3, [r3, #10]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe ff38 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001ba4:	4b54      	ldr	r3, [pc, #336]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	60d3      	str	r3, [r2, #12]
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001c00:	899b      	ldrh	r3, [r3, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ff06 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001c08:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3c:	611a      	str	r2, [r3, #16]
 8001c3e:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	60d3      	str	r3, [r2, #12]
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	e018      	b.n	8001c96 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001c66:	799b      	ldrb	r3, [r3, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001c7c:	895b      	ldrh	r3, [r3, #10]
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff52 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001c8a:	899b      	ldrh	r3, [r3, #12]
 8001c8c:	88ba      	ldrh	r2, [r7, #4]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff4b 	bl	8000b2c <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <LCD_Fast_DrawPoint+0x520>)
 8001ca8:	891a      	ldrh	r2, [r3, #8]
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001cac:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	615a      	str	r2, [r3, #20]
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <LCD_Fast_DrawPoint+0x528>)
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	60d3      	str	r3, [r2, #12]
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <LCD_Fast_DrawPoint+0x524>)
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	611a      	str	r2, [r3, #16]
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200001f8 	.word	0x200001f8
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	40010c00 	.word	0x40010c00

08001d00 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001d0a:	20be      	movs	r0, #190	; 0xbe
 8001d0c:	f7fe fe82 	bl	8000a14 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001d22:	2205      	movs	r2, #5
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbc5 	bl	80004dc <__aeabi_i2d>
 8001d52:	a339      	add	r3, pc, #228	; (adr r3, 8001e38 <LCD_SSD_BackLightSet+0x138>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc2a 	bl	80005b0 <__aeabi_dmul>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	461a      	mov	r2, r3
 8001d62:	4623      	mov	r3, r4
 8001d64:	4c37      	ldr	r4, [pc, #220]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fe33 	bl	80009d4 <__aeabi_d2uiz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60e3      	str	r3, [r4, #12]
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001dc2:	22ff      	movs	r2, #255	; 0xff
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e02:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <LCD_SSD_BackLightSet+0x144>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <LCD_SSD_BackLightSet+0x140>)
 8001e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	66666666 	.word	0x66666666
 8001e3c:	40046666 	.word	0x40046666
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40010c00 	.word	0x40010c00

08001e48 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d177      	bne.n	8001f48 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001e58:	4b80      	ldr	r3, [pc, #512]	; (800205c <LCD_Display_Dir+0x214>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <LCD_Display_Dir+0x214>)
 8001e60:	22f0      	movs	r2, #240	; 0xf0
 8001e62:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e64:	4b7d      	ldr	r3, [pc, #500]	; (800205c <LCD_Display_Dir+0x214>)
 8001e66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e6a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <LCD_Display_Dir+0x214>)
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <LCD_Display_Dir+0x48>
 8001e78:	4b78      	ldr	r3, [pc, #480]	; (800205c <LCD_Display_Dir+0x214>)
 8001e7a:	889b      	ldrh	r3, [r3, #4]
 8001e7c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d005      	beq.n	8001e90 <LCD_Display_Dir+0x48>
 8001e84:	4b75      	ldr	r3, [pc, #468]	; (800205c <LCD_Display_Dir+0x214>)
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d11e      	bne.n	8001ece <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <LCD_Display_Dir+0x214>)
 8001e92:	222c      	movs	r2, #44	; 0x2c
 8001e94:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e96:	4b71      	ldr	r3, [pc, #452]	; (800205c <LCD_Display_Dir+0x214>)
 8001e98:	222a      	movs	r2, #42	; 0x2a
 8001e9a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	; (800205c <LCD_Display_Dir+0x214>)
 8001e9e:	222b      	movs	r2, #43	; 0x2b
 8001ea0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	; (800205c <LCD_Display_Dir+0x214>)
 8001ea4:	889b      	ldrh	r3, [r3, #4]
 8001ea6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d006      	beq.n	8001ebc <LCD_Display_Dir+0x74>
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <LCD_Display_Dir+0x214>)
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f040 80c7 	bne.w	800204a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001ebc:	4b67      	ldr	r3, [pc, #412]	; (800205c <LCD_Display_Dir+0x214>)
 8001ebe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ec4:	4b65      	ldr	r3, [pc, #404]	; (800205c <LCD_Display_Dir+0x214>)
 8001ec6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001eca:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ecc:	e0bd      	b.n	800204a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <LCD_Display_Dir+0x214>)
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d114      	bne.n	8001f04 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001eda:	4b60      	ldr	r3, [pc, #384]	; (800205c <LCD_Display_Dir+0x214>)
 8001edc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ee0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ee2:	4b5e      	ldr	r3, [pc, #376]	; (800205c <LCD_Display_Dir+0x214>)
 8001ee4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001ee8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <LCD_Display_Dir+0x214>)
 8001eec:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ef0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <LCD_Display_Dir+0x214>)
 8001ef4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ef8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001efa:	4b58      	ldr	r3, [pc, #352]	; (800205c <LCD_Display_Dir+0x214>)
 8001efc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f00:	805a      	strh	r2, [r3, #2]
 8001f02:	e0a3      	b.n	800204c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <LCD_Display_Dir+0x214>)
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d111      	bne.n	8001f34 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001f10:	4b52      	ldr	r3, [pc, #328]	; (800205c <LCD_Display_Dir+0x214>)
 8001f12:	222c      	movs	r2, #44	; 0x2c
 8001f14:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <LCD_Display_Dir+0x214>)
 8001f18:	222b      	movs	r2, #43	; 0x2b
 8001f1a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <LCD_Display_Dir+0x214>)
 8001f1e:	222a      	movs	r2, #42	; 0x2a
 8001f20:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001f22:	4b4e      	ldr	r3, [pc, #312]	; (800205c <LCD_Display_Dir+0x214>)
 8001f24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f28:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <LCD_Display_Dir+0x214>)
 8001f2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f30:	805a      	strh	r2, [r3, #2]
 8001f32:	e08b      	b.n	800204c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001f34:	4b49      	ldr	r3, [pc, #292]	; (800205c <LCD_Display_Dir+0x214>)
 8001f36:	2222      	movs	r2, #34	; 0x22
 8001f38:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001f3a:	4b48      	ldr	r3, [pc, #288]	; (800205c <LCD_Display_Dir+0x214>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <LCD_Display_Dir+0x214>)
 8001f42:	2221      	movs	r2, #33	; 0x21
 8001f44:	819a      	strh	r2, [r3, #12]
 8001f46:	e081      	b.n	800204c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001f48:	4b44      	ldr	r3, [pc, #272]	; (800205c <LCD_Display_Dir+0x214>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <LCD_Display_Dir+0x214>)
 8001f50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f54:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <LCD_Display_Dir+0x214>)
 8001f58:	22f0      	movs	r2, #240	; 0xf0
 8001f5a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <LCD_Display_Dir+0x214>)
 8001f5e:	889b      	ldrh	r3, [r3, #4]
 8001f60:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d005      	beq.n	8001f74 <LCD_Display_Dir+0x12c>
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <LCD_Display_Dir+0x214>)
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <LCD_Display_Dir+0x214>)
 8001f76:	222c      	movs	r2, #44	; 0x2c
 8001f78:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <LCD_Display_Dir+0x214>)
 8001f7c:	222a      	movs	r2, #42	; 0x2a
 8001f7e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <LCD_Display_Dir+0x214>)
 8001f82:	222b      	movs	r2, #43	; 0x2b
 8001f84:	819a      	strh	r2, [r3, #12]
 8001f86:	e04b      	b.n	8002020 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <LCD_Display_Dir+0x214>)
 8001f8a:	889b      	ldrh	r3, [r3, #4]
 8001f8c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d109      	bne.n	8001fa8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <LCD_Display_Dir+0x214>)
 8001f96:	222c      	movs	r2, #44	; 0x2c
 8001f98:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <LCD_Display_Dir+0x214>)
 8001f9c:	222b      	movs	r2, #43	; 0x2b
 8001f9e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <LCD_Display_Dir+0x214>)
 8001fa2:	222a      	movs	r2, #42	; 0x2a
 8001fa4:	819a      	strh	r2, [r3, #12]
 8001fa6:	e03b      	b.n	8002020 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <LCD_Display_Dir+0x214>)
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	f245 5210 	movw	r2, #21776	; 0x5510
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d114      	bne.n	8001fde <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <LCD_Display_Dir+0x214>)
 8001fb6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001fba:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <LCD_Display_Dir+0x214>)
 8001fbe:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001fc2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <LCD_Display_Dir+0x214>)
 8001fc6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001fca:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <LCD_Display_Dir+0x214>)
 8001fce:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fd2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <LCD_Display_Dir+0x214>)
 8001fd6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fda:	805a      	strh	r2, [r3, #2]
 8001fdc:	e020      	b.n	8002020 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <LCD_Display_Dir+0x214>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d111      	bne.n	800200e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <LCD_Display_Dir+0x214>)
 8001fec:	222c      	movs	r2, #44	; 0x2c
 8001fee:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <LCD_Display_Dir+0x214>)
 8001ff2:	222a      	movs	r2, #42	; 0x2a
 8001ff4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <LCD_Display_Dir+0x214>)
 8001ff8:	222b      	movs	r2, #43	; 0x2b
 8001ffa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <LCD_Display_Dir+0x214>)
 8001ffe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002002:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <LCD_Display_Dir+0x214>)
 8002006:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800200a:	805a      	strh	r2, [r3, #2]
 800200c:	e008      	b.n	8002020 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <LCD_Display_Dir+0x214>)
 8002010:	2222      	movs	r2, #34	; 0x22
 8002012:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <LCD_Display_Dir+0x214>)
 8002016:	2221      	movs	r2, #33	; 0x21
 8002018:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <LCD_Display_Dir+0x214>)
 800201c:	2220      	movs	r2, #32
 800201e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <LCD_Display_Dir+0x214>)
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	f646 0204 	movw	r2, #26628	; 0x6804
 8002028:	4293      	cmp	r3, r2
 800202a:	d005      	beq.n	8002038 <LCD_Display_Dir+0x1f0>
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <LCD_Display_Dir+0x214>)
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	f245 3210 	movw	r2, #21264	; 0x5310
 8002034:	4293      	cmp	r3, r2
 8002036:	d109      	bne.n	800204c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <LCD_Display_Dir+0x214>)
 800203a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800203e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <LCD_Display_Dir+0x214>)
 8002042:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002046:	805a      	strh	r2, [r3, #2]
 8002048:	e000      	b.n	800204c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800204a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff f87f 	bl	8001150 <LCD_Scan_Dir>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200001f8 	.word	0x200001f8

08002060 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002066:	4b90      	ldr	r3, [pc, #576]	; (80022a8 <LCD_Init+0x248>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	4a8f      	ldr	r2, [pc, #572]	; (80022a8 <LCD_Init+0x248>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6193      	str	r3, [r2, #24]
 8002072:	4b8d      	ldr	r3, [pc, #564]	; (80022a8 <LCD_Init+0x248>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800207e:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <LCD_Init+0x248>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a89      	ldr	r2, [pc, #548]	; (80022a8 <LCD_Init+0x248>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b87      	ldr	r3, [pc, #540]	; (80022a8 <LCD_Init+0x248>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8002096:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800209a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800209c:	2301      	movs	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80020a4:	2303      	movs	r3, #3
 80020a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	487f      	ldr	r0, [pc, #508]	; (80022ac <LCD_Init+0x24c>)
 80020b0:	f005 fdf0 	bl	8007c94 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	487b      	ldr	r0, [pc, #492]	; (80022b0 <LCD_Init+0x250>)
 80020c2:	f005 fde7 	bl	8007c94 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80020c6:	2032      	movs	r0, #50	; 0x32
 80020c8:	f005 fbac 	bl	8007824 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80020cc:	2101      	movs	r1, #1
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fd2c 	bl	8000b2c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f005 fba5 	bl	8007824 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe fd50 	bl	8000b80 <LCD_ReadReg>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <LCD_Init+0x254>)
 80020e6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <LCD_Init+0x254>)
 80020ea:	889b      	ldrh	r3, [r3, #4]
 80020ec:	2bfe      	cmp	r3, #254	; 0xfe
 80020ee:	d90b      	bls.n	8002108 <LCD_Init+0xa8>
 80020f0:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <LCD_Init+0x254>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d005      	beq.n	8002108 <LCD_Init+0xa8>
 80020fc:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <LCD_Init+0x254>)
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002104:	f040 80c8 	bne.w	8002298 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002108:	20d3      	movs	r0, #211	; 0xd3
 800210a:	f7fe fc83 	bl	8000a14 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800210e:	f7fe fcc9 	bl	8000aa4 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002112:	f7fe fcc7 	bl	8000aa4 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002116:	f7fe fcc5 	bl	8000aa4 <LCD_RD_DATA>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b65      	ldr	r3, [pc, #404]	; (80022b4 <LCD_Init+0x254>)
 8002120:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <LCD_Init+0x254>)
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <LCD_Init+0x254>)
 800212c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800212e:	f7fe fcb9 	bl	8000aa4 <LCD_RD_DATA>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <LCD_Init+0x254>)
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <LCD_Init+0x254>)
 8002140:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <LCD_Init+0x254>)
 8002144:	889b      	ldrh	r3, [r3, #4]
 8002146:	f249 3241 	movw	r2, #37697	; 0x9341
 800214a:	4293      	cmp	r3, r2
 800214c:	f000 80a4 	beq.w	8002298 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002150:	20bf      	movs	r0, #191	; 0xbf
 8002152:	f7fe fc5f 	bl	8000a14 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002156:	f7fe fca5 	bl	8000aa4 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800215a:	f7fe fca3 	bl	8000aa4 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800215e:	f7fe fca1 	bl	8000aa4 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002162:	f7fe fc9f 	bl	8000aa4 <LCD_RD_DATA>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <LCD_Init+0x254>)
 800216c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800216e:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <LCD_Init+0x254>)
 8002170:	889b      	ldrh	r3, [r3, #4]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <LCD_Init+0x254>)
 8002178:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800217a:	f7fe fc93 	bl	8000aa4 <LCD_RD_DATA>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <LCD_Init+0x254>)
 8002184:	889b      	ldrh	r3, [r3, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <LCD_Init+0x254>)
 800218c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800218e:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <LCD_Init+0x254>)
 8002190:	889b      	ldrh	r3, [r3, #4]
 8002192:	f646 0204 	movw	r2, #26628	; 0x6804
 8002196:	4293      	cmp	r3, r2
 8002198:	d07e      	beq.n	8002298 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800219a:	20d4      	movs	r0, #212	; 0xd4
 800219c:	f7fe fc3a 	bl	8000a14 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80021a0:	f7fe fc80 	bl	8000aa4 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80021a4:	f7fe fc7e 	bl	8000aa4 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80021a8:	f7fe fc7c 	bl	8000aa4 <LCD_RD_DATA>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <LCD_Init+0x254>)
 80021b2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80021b4:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <LCD_Init+0x254>)
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <LCD_Init+0x254>)
 80021be:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80021c0:	f7fe fc70 	bl	8000aa4 <LCD_RD_DATA>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <LCD_Init+0x254>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <LCD_Init+0x254>)
 80021d2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <LCD_Init+0x254>)
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05b      	beq.n	8002298 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80021e0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80021e4:	f7fe fc16 	bl	8000a14 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80021e8:	f7fe fc5c 	bl	8000aa4 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80021ec:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80021f0:	f7fe fc10 	bl	8000a14 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80021f4:	f7fe fc56 	bl	8000aa4 <LCD_RD_DATA>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <LCD_Init+0x254>)
 80021fe:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <LCD_Init+0x254>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <LCD_Init+0x254>)
 800220a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800220c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002210:	f7fe fc00 	bl	8000a14 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002214:	f7fe fc46 	bl	8000aa4 <LCD_RD_DATA>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <LCD_Init+0x254>)
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	4313      	orrs	r3, r2
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <LCD_Init+0x254>)
 8002226:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <LCD_Init+0x254>)
 800222a:	889b      	ldrh	r3, [r3, #4]
 800222c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002230:	d103      	bne.n	800223a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <LCD_Init+0x254>)
 8002234:	f245 5210 	movw	r2, #21776	; 0x5510
 8002238:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <LCD_Init+0x254>)
 800223c:	889b      	ldrh	r3, [r3, #4]
 800223e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002242:	4293      	cmp	r3, r2
 8002244:	d028      	beq.n	8002298 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002246:	20a1      	movs	r0, #161	; 0xa1
 8002248:	f7fe fbe4 	bl	8000a14 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800224c:	f7fe fc2a 	bl	8000aa4 <LCD_RD_DATA>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <LCD_Init+0x254>)
 8002256:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002258:	f7fe fc24 	bl	8000aa4 <LCD_RD_DATA>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <LCD_Init+0x254>)
 8002262:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <LCD_Init+0x254>)
 8002266:	889b      	ldrh	r3, [r3, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <LCD_Init+0x254>)
 800226e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002270:	f7fe fc18 	bl	8000aa4 <LCD_RD_DATA>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <LCD_Init+0x254>)
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <LCD_Init+0x254>)
 8002282:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <LCD_Init+0x254>)
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	f245 7261 	movw	r2, #22369	; 0x5761
 800228c:	4293      	cmp	r3, r2
 800228e:	d103      	bne.n	8002298 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <LCD_Init+0x254>)
 8002292:	f641 1263 	movw	r2, #6499	; 0x1963
 8002296:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <LCD_Init+0x254>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	f249 3241 	movw	r2, #37697	; 0x9341
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 811f 	bne.w	80024e4 <LCD_Init+0x484>
 80022a6:	e007      	b.n	80022b8 <LCD_Init+0x258>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40010c00 	.word	0x40010c00
 80022b4:	200001f8 	.word	0x200001f8
			{
		LCD_WR_REG(0xCF);
 80022b8:	20cf      	movs	r0, #207	; 0xcf
 80022ba:	f7fe fbab 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fbcc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80022c4:	20c1      	movs	r0, #193	; 0xc1
 80022c6:	f7fe fbc9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80022ca:	2030      	movs	r0, #48	; 0x30
 80022cc:	f7fe fbc6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80022d0:	20ed      	movs	r0, #237	; 0xed
 80022d2:	f7fe fb9f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80022d6:	2064      	movs	r0, #100	; 0x64
 80022d8:	f7fe fbc0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80022dc:	2003      	movs	r0, #3
 80022de:	f7fe fbbd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80022e2:	2012      	movs	r0, #18
 80022e4:	f7fe fbba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80022e8:	2081      	movs	r0, #129	; 0x81
 80022ea:	f7fe fbb7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80022ee:	20e8      	movs	r0, #232	; 0xe8
 80022f0:	f7fe fb90 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80022f4:	2085      	movs	r0, #133	; 0x85
 80022f6:	f7fe fbb1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80022fa:	2010      	movs	r0, #16
 80022fc:	f7fe fbae 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002300:	207a      	movs	r0, #122	; 0x7a
 8002302:	f7fe fbab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002306:	20cb      	movs	r0, #203	; 0xcb
 8002308:	f7fe fb84 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800230c:	2039      	movs	r0, #57	; 0x39
 800230e:	f7fe fba5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002312:	202c      	movs	r0, #44	; 0x2c
 8002314:	f7fe fba2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fb9f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800231e:	2034      	movs	r0, #52	; 0x34
 8002320:	f7fe fb9c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002324:	2002      	movs	r0, #2
 8002326:	f7fe fb99 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800232a:	20f7      	movs	r0, #247	; 0xf7
 800232c:	f7fe fb72 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002330:	2020      	movs	r0, #32
 8002332:	f7fe fb93 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002336:	20ea      	movs	r0, #234	; 0xea
 8002338:	f7fe fb6c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fb8d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fb8a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002348:	20c0      	movs	r0, #192	; 0xc0
 800234a:	f7fe fb63 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800234e:	201b      	movs	r0, #27
 8002350:	f7fe fb84 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002354:	20c1      	movs	r0, #193	; 0xc1
 8002356:	f7fe fb5d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800235a:	2001      	movs	r0, #1
 800235c:	f7fe fb7e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002360:	20c5      	movs	r0, #197	; 0xc5
 8002362:	f7fe fb57 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002366:	2030      	movs	r0, #48	; 0x30
 8002368:	f7fe fb78 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800236c:	2030      	movs	r0, #48	; 0x30
 800236e:	f7fe fb75 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002372:	20c7      	movs	r0, #199	; 0xc7
 8002374:	f7fe fb4e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002378:	20b7      	movs	r0, #183	; 0xb7
 800237a:	f7fe fb6f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800237e:	2036      	movs	r0, #54	; 0x36
 8002380:	f7fe fb48 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002384:	2048      	movs	r0, #72	; 0x48
 8002386:	f7fe fb69 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800238a:	203a      	movs	r0, #58	; 0x3a
 800238c:	f7fe fb42 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002390:	2055      	movs	r0, #85	; 0x55
 8002392:	f7fe fb63 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002396:	20b1      	movs	r0, #177	; 0xb1
 8002398:	f7fe fb3c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fb5d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80023a2:	201a      	movs	r0, #26
 80023a4:	f7fe fb5a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80023a8:	20b6      	movs	r0, #182	; 0xb6
 80023aa:	f7fe fb33 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80023ae:	200a      	movs	r0, #10
 80023b0:	f7fe fb54 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80023b4:	20a2      	movs	r0, #162	; 0xa2
 80023b6:	f7fe fb51 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80023ba:	20f2      	movs	r0, #242	; 0xf2
 80023bc:	f7fe fb2a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fb4b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80023c6:	2026      	movs	r0, #38	; 0x26
 80023c8:	f7fe fb24 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe fb45 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80023d2:	20e0      	movs	r0, #224	; 0xe0
 80023d4:	f7fe fb1e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80023d8:	200f      	movs	r0, #15
 80023da:	f7fe fb3f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80023de:	202a      	movs	r0, #42	; 0x2a
 80023e0:	f7fe fb3c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80023e4:	2028      	movs	r0, #40	; 0x28
 80023e6:	f7fe fb39 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80023ea:	2008      	movs	r0, #8
 80023ec:	f7fe fb36 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80023f0:	200e      	movs	r0, #14
 80023f2:	f7fe fb33 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80023f6:	2008      	movs	r0, #8
 80023f8:	f7fe fb30 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80023fc:	2054      	movs	r0, #84	; 0x54
 80023fe:	f7fe fb2d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002402:	20a9      	movs	r0, #169	; 0xa9
 8002404:	f7fe fb2a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002408:	2043      	movs	r0, #67	; 0x43
 800240a:	f7fe fb27 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800240e:	200a      	movs	r0, #10
 8002410:	f7fe fb24 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002414:	200f      	movs	r0, #15
 8002416:	f7fe fb21 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241a:	2000      	movs	r0, #0
 800241c:	f7fe fb1e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fb1b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe fb18 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fb15 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002432:	20e1      	movs	r0, #225	; 0xe1
 8002434:	f7fe faee 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fb0f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800243e:	2015      	movs	r0, #21
 8002440:	f7fe fb0c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002444:	2017      	movs	r0, #23
 8002446:	f7fe fb09 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800244a:	2007      	movs	r0, #7
 800244c:	f7fe fb06 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002450:	2011      	movs	r0, #17
 8002452:	f7fe fb03 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002456:	2006      	movs	r0, #6
 8002458:	f7fe fb00 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800245c:	202b      	movs	r0, #43	; 0x2b
 800245e:	f7fe fafd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002462:	2056      	movs	r0, #86	; 0x56
 8002464:	f7fe fafa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002468:	203c      	movs	r0, #60	; 0x3c
 800246a:	f7fe faf7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800246e:	2005      	movs	r0, #5
 8002470:	f7fe faf4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002474:	2010      	movs	r0, #16
 8002476:	f7fe faf1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800247a:	200f      	movs	r0, #15
 800247c:	f7fe faee 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002480:	203f      	movs	r0, #63	; 0x3f
 8002482:	f7fe faeb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002486:	203f      	movs	r0, #63	; 0x3f
 8002488:	f7fe fae8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800248c:	200f      	movs	r0, #15
 800248e:	f7fe fae5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002492:	202b      	movs	r0, #43	; 0x2b
 8002494:	f7fe fabe 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fadf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fadc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fe fad9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80024aa:	203f      	movs	r0, #63	; 0x3f
 80024ac:	f7fe fad6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80024b0:	202a      	movs	r0, #42	; 0x2a
 80024b2:	f7fe faaf 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fad0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe facd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe faca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80024c8:	20ef      	movs	r0, #239	; 0xef
 80024ca:	f7fe fac7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80024ce:	2011      	movs	r0, #17
 80024d0:	f7fe faa0 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(120);
 80024d4:	2078      	movs	r0, #120	; 0x78
 80024d6:	f005 f9a5 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80024da:	2029      	movs	r0, #41	; 0x29
 80024dc:	f7fe fa9a 	bl	8000a14 <LCD_WR_REG>
 80024e0:	f003 bcd8 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80024e4:	4b58      	ldr	r3, [pc, #352]	; (8002648 <LCD_Init+0x5e8>)
 80024e6:	889b      	ldrh	r3, [r3, #4]
 80024e8:	f646 0204 	movw	r2, #26628	; 0x6804
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f040 80ad 	bne.w	800264c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80024f2:	2011      	movs	r0, #17
 80024f4:	f7fe fa8e 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(20);
 80024f8:	2014      	movs	r0, #20
 80024fa:	f005 f993 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80024fe:	20d0      	movs	r0, #208	; 0xd0
 8002500:	f7fe fa88 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002504:	2007      	movs	r0, #7
 8002506:	f7fe faa9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800250a:	2042      	movs	r0, #66	; 0x42
 800250c:	f7fe faa6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002510:	201d      	movs	r0, #29
 8002512:	f7fe faa3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002516:	20d1      	movs	r0, #209	; 0xd1
 8002518:	f7fe fa7c 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fa9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002522:	201a      	movs	r0, #26
 8002524:	f7fe fa9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002528:	2009      	movs	r0, #9
 800252a:	f7fe fa97 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800252e:	20d2      	movs	r0, #210	; 0xd2
 8002530:	f7fe fa70 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe fa91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800253a:	2022      	movs	r0, #34	; 0x22
 800253c:	f7fe fa8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002540:	20c0      	movs	r0, #192	; 0xc0
 8002542:	f7fe fa67 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002546:	2010      	movs	r0, #16
 8002548:	f7fe fa88 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800254c:	203b      	movs	r0, #59	; 0x3b
 800254e:	f7fe fa85 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fa82 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002558:	2002      	movs	r0, #2
 800255a:	f7fe fa7f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800255e:	2011      	movs	r0, #17
 8002560:	f7fe fa7c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002564:	20c5      	movs	r0, #197	; 0xc5
 8002566:	f7fe fa55 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800256a:	2003      	movs	r0, #3
 800256c:	f7fe fa76 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002570:	20c8      	movs	r0, #200	; 0xc8
 8002572:	f7fe fa4f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe fa70 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800257c:	2025      	movs	r0, #37	; 0x25
 800257e:	f7fe fa6d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002582:	2021      	movs	r0, #33	; 0x21
 8002584:	f7fe fa6a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002588:	2005      	movs	r0, #5
 800258a:	f7fe fa67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fa64 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002594:	200a      	movs	r0, #10
 8002596:	f7fe fa61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800259a:	2065      	movs	r0, #101	; 0x65
 800259c:	f7fe fa5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80025a0:	2025      	movs	r0, #37	; 0x25
 80025a2:	f7fe fa5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80025a6:	2077      	movs	r0, #119	; 0x77
 80025a8:	f7fe fa58 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80025ac:	2050      	movs	r0, #80	; 0x50
 80025ae:	f7fe fa55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f7fe fa52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fa4f 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80025be:	20f8      	movs	r0, #248	; 0xf8
 80025c0:	f7fe fa28 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7fe fa49 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80025ca:	20fe      	movs	r0, #254	; 0xfe
 80025cc:	f7fe fa22 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe fa43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80025d6:	2002      	movs	r0, #2
 80025d8:	f7fe fa40 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80025dc:	2020      	movs	r0, #32
 80025de:	f7fe fa19 	bl	8000a14 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80025e2:	2036      	movs	r0, #54	; 0x36
 80025e4:	f7fe fa16 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80025e8:	2008      	movs	r0, #8
 80025ea:	f7fe fa37 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80025ee:	203a      	movs	r0, #58	; 0x3a
 80025f0:	f7fe fa10 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80025f4:	2055      	movs	r0, #85	; 0x55
 80025f6:	f7fe fa31 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80025fa:	202b      	movs	r0, #43	; 0x2b
 80025fc:	f7fe fa0a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fa2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fa28 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800260c:	2001      	movs	r0, #1
 800260e:	f7fe fa25 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002612:	203f      	movs	r0, #63	; 0x3f
 8002614:	f7fe fa22 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002618:	202a      	movs	r0, #42	; 0x2a
 800261a:	f7fe f9fb 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fa1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe fa19 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800262a:	2001      	movs	r0, #1
 800262c:	f7fe fa16 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002630:	20df      	movs	r0, #223	; 0xdf
 8002632:	f7fe fa13 	bl	8000a5c <LCD_WR_DATAX>
		HAL_Delay(120);
 8002636:	2078      	movs	r0, #120	; 0x78
 8002638:	f005 f8f4 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0X29);
 800263c:	2029      	movs	r0, #41	; 0x29
 800263e:	f7fe f9e9 	bl	8000a14 <LCD_WR_REG>
 8002642:	f003 bc27 	b.w	8005e94 <LCD_Init+0x3e34>
 8002646:	bf00      	nop
 8002648:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0x5310) {
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <LCD_Init+0x5fc>)
 800264e:	889b      	ldrh	r3, [r3, #4]
 8002650:	f245 3210 	movw	r2, #21264	; 0x5310
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 877c 	bne.w	8003552 <LCD_Init+0x14f2>
 800265a:	e001      	b.n	8002660 <LCD_Init+0x600>
 800265c:	200001f8 	.word	0x200001f8
		LCD_WR_REG(0xED);
 8002660:	20ed      	movs	r0, #237	; 0xed
 8002662:	f7fe f9d7 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002666:	2001      	movs	r0, #1
 8002668:	f7fe f9f8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800266c:	20fe      	movs	r0, #254	; 0xfe
 800266e:	f7fe f9f5 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002672:	20ee      	movs	r0, #238	; 0xee
 8002674:	f7fe f9ce 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002678:	20de      	movs	r0, #222	; 0xde
 800267a:	f7fe f9ef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800267e:	2021      	movs	r0, #33	; 0x21
 8002680:	f7fe f9ec 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002684:	20f1      	movs	r0, #241	; 0xf1
 8002686:	f7fe f9c5 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800268a:	2001      	movs	r0, #1
 800268c:	f7fe f9e6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002690:	20df      	movs	r0, #223	; 0xdf
 8002692:	f7fe f9bf 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002696:	2010      	movs	r0, #16
 8002698:	f7fe f9e0 	bl	8000a5c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800269c:	20c4      	movs	r0, #196	; 0xc4
 800269e:	f7fe f9b9 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80026a2:	208f      	movs	r0, #143	; 0x8f
 80026a4:	f7fe f9da 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80026a8:	20c6      	movs	r0, #198	; 0xc6
 80026aa:	f7fe f9b3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe f9d4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80026b4:	20e2      	movs	r0, #226	; 0xe2
 80026b6:	f7fe f9d1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80026ba:	20e2      	movs	r0, #226	; 0xe2
 80026bc:	f7fe f9ce 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80026c0:	20e2      	movs	r0, #226	; 0xe2
 80026c2:	f7fe f9cb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80026c6:	20bf      	movs	r0, #191	; 0xbf
 80026c8:	f7fe f9a4 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80026cc:	20aa      	movs	r0, #170	; 0xaa
 80026ce:	f7fe f9c5 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80026d2:	20b0      	movs	r0, #176	; 0xb0
 80026d4:	f7fe f99e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80026d8:	200d      	movs	r0, #13
 80026da:	f7fe f9bf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe f9bc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80026e4:	200d      	movs	r0, #13
 80026e6:	f7fe f9b9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f9b6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80026f0:	2011      	movs	r0, #17
 80026f2:	f7fe f9b3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe f9b0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80026fc:	2019      	movs	r0, #25
 80026fe:	f7fe f9ad 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe f9aa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002708:	2021      	movs	r0, #33	; 0x21
 800270a:	f7fe f9a7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe f9a4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002714:	202d      	movs	r0, #45	; 0x2d
 8002716:	f7fe f9a1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe f99e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002720:	203d      	movs	r0, #61	; 0x3d
 8002722:	f7fe f99b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe f998 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800272c:	205d      	movs	r0, #93	; 0x5d
 800272e:	f7fe f995 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe f992 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002738:	205d      	movs	r0, #93	; 0x5d
 800273a:	f7fe f98f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe f98c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002744:	20b1      	movs	r0, #177	; 0xb1
 8002746:	f7fe f965 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800274a:	2080      	movs	r0, #128	; 0x80
 800274c:	f7fe f986 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f983 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002756:	208b      	movs	r0, #139	; 0x8b
 8002758:	f7fe f980 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f97d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002762:	2096      	movs	r0, #150	; 0x96
 8002764:	f7fe f97a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f977 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800276e:	20b2      	movs	r0, #178	; 0xb2
 8002770:	f7fe f950 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f971 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe f96e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002780:	2002      	movs	r0, #2
 8002782:	f7fe f96b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe f968 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800278c:	2003      	movs	r0, #3
 800278e:	f7fe f965 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f962 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002798:	20b3      	movs	r0, #179	; 0xb3
 800279a:	f7fe f93b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe f95c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe f959 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe f956 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f953 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe f950 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f94d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe f94a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f947 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f944 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe f941 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe f93e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe f93b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f938 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe f935 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f932 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe f92f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f92c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe f929 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f926 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe f923 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f920 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe f91d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f91a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe f917 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800282e:	20b4      	movs	r0, #180	; 0xb4
 8002830:	f7fe f8f0 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002834:	208b      	movs	r0, #139	; 0x8b
 8002836:	f7fe f911 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f90e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002840:	2096      	movs	r0, #150	; 0x96
 8002842:	f7fe f90b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f908 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800284c:	20a1      	movs	r0, #161	; 0xa1
 800284e:	f7fe f905 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f902 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002858:	20b5      	movs	r0, #181	; 0xb5
 800285a:	f7fe f8db 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800285e:	2002      	movs	r0, #2
 8002860:	f7fe f8fc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe f8f9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800286a:	2003      	movs	r0, #3
 800286c:	f7fe f8f6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe f8f3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002876:	2004      	movs	r0, #4
 8002878:	f7fe f8f0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe f8ed 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002882:	20b6      	movs	r0, #182	; 0xb6
 8002884:	f7fe f8c6 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe f8e7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f8e4 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002894:	20b7      	movs	r0, #183	; 0xb7
 8002896:	f7fe f8bd 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f8de 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe f8db 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80028a6:	203f      	movs	r0, #63	; 0x3f
 80028a8:	f7fe f8d8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe f8d5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80028b2:	205e      	movs	r0, #94	; 0x5e
 80028b4:	f7fe f8d2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fe f8cf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80028be:	2064      	movs	r0, #100	; 0x64
 80028c0:	f7fe f8cc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe f8c9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80028ca:	208c      	movs	r0, #140	; 0x8c
 80028cc:	f7fe f8c6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe f8c3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80028d6:	20ac      	movs	r0, #172	; 0xac
 80028d8:	f7fe f8c0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe f8bd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80028e2:	20dc      	movs	r0, #220	; 0xdc
 80028e4:	f7fe f8ba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe f8b7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80028ee:	2070      	movs	r0, #112	; 0x70
 80028f0:	f7fe f8b4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe f8b1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80028fa:	2090      	movs	r0, #144	; 0x90
 80028fc:	f7fe f8ae 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe f8ab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002906:	20eb      	movs	r0, #235	; 0xeb
 8002908:	f7fe f8a8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f8a5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002912:	20dc      	movs	r0, #220	; 0xdc
 8002914:	f7fe f8a2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f89f 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800291e:	20b8      	movs	r0, #184	; 0xb8
 8002920:	f7fe f878 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe f899 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe f896 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe f893 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe f890 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe f88d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe f88a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe f887 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe f884 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002954:	20ba      	movs	r0, #186	; 0xba
 8002956:	f7fe f85d 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800295a:	2024      	movs	r0, #36	; 0x24
 800295c:	f7fe f87e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe f87b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe f878 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe f875 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002972:	20c1      	movs	r0, #193	; 0xc1
 8002974:	f7fe f84e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002978:	2020      	movs	r0, #32
 800297a:	f7fe f86f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe f86c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002984:	2054      	movs	r0, #84	; 0x54
 8002986:	f7fe f869 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe f866 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002990:	20ff      	movs	r0, #255	; 0xff
 8002992:	f7fe f863 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe f860 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800299c:	20c2      	movs	r0, #194	; 0xc2
 800299e:	f7fe f839 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f7fe f85a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe f857 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80029ae:	2004      	movs	r0, #4
 80029b0:	f7fe f854 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe f851 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80029ba:	20c3      	movs	r0, #195	; 0xc3
 80029bc:	f7fe f82a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80029c0:	203c      	movs	r0, #60	; 0x3c
 80029c2:	f7fe f84b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe f848 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80029cc:	203a      	movs	r0, #58	; 0x3a
 80029ce:	f7fe f845 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fe f842 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80029d8:	2039      	movs	r0, #57	; 0x39
 80029da:	f7fe f83f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe f83c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80029e4:	2037      	movs	r0, #55	; 0x37
 80029e6:	f7fe f839 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe f836 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80029f0:	203c      	movs	r0, #60	; 0x3c
 80029f2:	f7fe f833 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe f830 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80029fc:	2036      	movs	r0, #54	; 0x36
 80029fe:	f7fe f82d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe f82a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002a08:	2032      	movs	r0, #50	; 0x32
 8002a0a:	f7fe f827 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe f824 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002a14:	202f      	movs	r0, #47	; 0x2f
 8002a16:	f7fe f821 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe f81e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002a20:	202c      	movs	r0, #44	; 0x2c
 8002a22:	f7fe f81b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe f818 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002a2c:	2029      	movs	r0, #41	; 0x29
 8002a2e:	f7fe f815 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f812 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002a38:	2026      	movs	r0, #38	; 0x26
 8002a3a:	f7fe f80f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe f80c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002a44:	2024      	movs	r0, #36	; 0x24
 8002a46:	f7fe f809 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe f806 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002a50:	2024      	movs	r0, #36	; 0x24
 8002a52:	f7fe f803 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe f800 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002a5c:	2023      	movs	r0, #35	; 0x23
 8002a5e:	f7fd fffd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd fffa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002a68:	203c      	movs	r0, #60	; 0x3c
 8002a6a:	f7fd fff7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fd fff4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002a74:	2036      	movs	r0, #54	; 0x36
 8002a76:	f7fd fff1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fd ffee 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f7fd ffeb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fd ffe8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002a8c:	202f      	movs	r0, #47	; 0x2f
 8002a8e:	f7fd ffe5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fd ffe2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002a98:	202c      	movs	r0, #44	; 0x2c
 8002a9a:	f7fd ffdf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd ffdc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002aa4:	2029      	movs	r0, #41	; 0x29
 8002aa6:	f7fd ffd9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fd ffd6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002ab0:	2026      	movs	r0, #38	; 0x26
 8002ab2:	f7fd ffd3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fd ffd0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002abc:	2024      	movs	r0, #36	; 0x24
 8002abe:	f7fd ffcd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fd ffca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002ac8:	2024      	movs	r0, #36	; 0x24
 8002aca:	f7fd ffc7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fd ffc4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002ad4:	2023      	movs	r0, #35	; 0x23
 8002ad6:	f7fd ffc1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fd ffbe 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002ae0:	20c4      	movs	r0, #196	; 0xc4
 8002ae2:	f7fd ff97 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002ae6:	2062      	movs	r0, #98	; 0x62
 8002ae8:	f7fd ffb8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd ffb5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002af2:	2005      	movs	r0, #5
 8002af4:	f7fd ffb2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd ffaf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002afe:	2084      	movs	r0, #132	; 0x84
 8002b00:	f7fd ffac 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd ffa9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002b0a:	20f0      	movs	r0, #240	; 0xf0
 8002b0c:	f7fd ffa6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd ffa3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002b16:	2018      	movs	r0, #24
 8002b18:	f7fd ffa0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd ff9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002b22:	20a4      	movs	r0, #164	; 0xa4
 8002b24:	f7fd ff9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd ff97 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002b2e:	2018      	movs	r0, #24
 8002b30:	f7fd ff94 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd ff91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002b3a:	2050      	movs	r0, #80	; 0x50
 8002b3c:	f7fd ff8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd ff8b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002b46:	200c      	movs	r0, #12
 8002b48:	f7fd ff88 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd ff85 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002b52:	2017      	movs	r0, #23
 8002b54:	f7fd ff82 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd ff7f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002b5e:	2095      	movs	r0, #149	; 0x95
 8002b60:	f7fd ff7c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd ff79 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b6a:	20f3      	movs	r0, #243	; 0xf3
 8002b6c:	f7fd ff76 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd ff73 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002b76:	20e6      	movs	r0, #230	; 0xe6
 8002b78:	f7fd ff70 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fd ff6d 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002b82:	20c5      	movs	r0, #197	; 0xc5
 8002b84:	f7fd ff46 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002b88:	2032      	movs	r0, #50	; 0x32
 8002b8a:	f7fd ff67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fd ff64 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002b94:	2044      	movs	r0, #68	; 0x44
 8002b96:	f7fd ff61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd ff5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002ba0:	2065      	movs	r0, #101	; 0x65
 8002ba2:	f7fd ff5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd ff58 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002bac:	2076      	movs	r0, #118	; 0x76
 8002bae:	f7fd ff55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd ff52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002bb8:	2088      	movs	r0, #136	; 0x88
 8002bba:	f7fd ff4f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fd ff4c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002bc4:	20c6      	movs	r0, #198	; 0xc6
 8002bc6:	f7fd ff25 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002bca:	2020      	movs	r0, #32
 8002bcc:	f7fd ff46 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fd ff43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002bd6:	2017      	movs	r0, #23
 8002bd8:	f7fd ff40 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fd ff3d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fd ff3a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fd ff37 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002bee:	20c7      	movs	r0, #199	; 0xc7
 8002bf0:	f7fd ff10 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fd ff31 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd ff2e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fd ff2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd ff28 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002c0c:	20c8      	movs	r0, #200	; 0xc8
 8002c0e:	f7fd ff01 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fd ff22 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd ff1f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd ff1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd ff19 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002c2a:	20c9      	movs	r0, #201	; 0xc9
 8002c2c:	f7fd fef2 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd ff13 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fd ff10 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fd ff0d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fd ff0a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd ff07 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fd ff04 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd ff01 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fd fefe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd fefb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fd fef8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd fef5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fd fef2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd feef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fd feec 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fee9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fee6 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002c90:	20e0      	movs	r0, #224	; 0xe0
 8002c92:	f7fd febf 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c96:	2016      	movs	r0, #22
 8002c98:	f7fd fee0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd fedd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002ca2:	201c      	movs	r0, #28
 8002ca4:	f7fd feda 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd fed7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002cae:	2021      	movs	r0, #33	; 0x21
 8002cb0:	f7fd fed4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fd fed1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002cba:	2036      	movs	r0, #54	; 0x36
 8002cbc:	f7fd fece 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fecb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002cc6:	2046      	movs	r0, #70	; 0x46
 8002cc8:	f7fd fec8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fec5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002cd2:	2052      	movs	r0, #82	; 0x52
 8002cd4:	f7fd fec2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd febf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cde:	2064      	movs	r0, #100	; 0x64
 8002ce0:	f7fd febc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd feb9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002cea:	207a      	movs	r0, #122	; 0x7a
 8002cec:	f7fd feb6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd feb3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002cf6:	208b      	movs	r0, #139	; 0x8b
 8002cf8:	f7fd feb0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fead 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d02:	2099      	movs	r0, #153	; 0x99
 8002d04:	f7fd feaa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fd fea7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002d0e:	20a8      	movs	r0, #168	; 0xa8
 8002d10:	f7fd fea4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fd fea1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002d1a:	20b9      	movs	r0, #185	; 0xb9
 8002d1c:	f7fd fe9e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fd fe9b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d26:	20c4      	movs	r0, #196	; 0xc4
 8002d28:	f7fd fe98 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd fe95 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d32:	20ca      	movs	r0, #202	; 0xca
 8002d34:	f7fd fe92 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fd fe8f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d3e:	20d2      	movs	r0, #210	; 0xd2
 8002d40:	f7fd fe8c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fd fe89 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002d4a:	20d9      	movs	r0, #217	; 0xd9
 8002d4c:	f7fd fe86 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd fe83 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d56:	20e0      	movs	r0, #224	; 0xe0
 8002d58:	f7fd fe80 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fd fe7d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d62:	20f3      	movs	r0, #243	; 0xf3
 8002d64:	f7fd fe7a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd fe77 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002d6e:	20e1      	movs	r0, #225	; 0xe1
 8002d70:	f7fd fe50 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002d74:	2016      	movs	r0, #22
 8002d76:	f7fd fe71 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd fe6e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d80:	201c      	movs	r0, #28
 8002d82:	f7fd fe6b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd fe68 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002d8c:	2022      	movs	r0, #34	; 0x22
 8002d8e:	f7fd fe65 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd fe62 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002d98:	2036      	movs	r0, #54	; 0x36
 8002d9a:	f7fd fe5f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fe5c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002da4:	2045      	movs	r0, #69	; 0x45
 8002da6:	f7fd fe59 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fe56 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002db0:	2052      	movs	r0, #82	; 0x52
 8002db2:	f7fd fe53 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fe50 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	f7fd fe4d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fe4a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002dc8:	207a      	movs	r0, #122	; 0x7a
 8002dca:	f7fd fe47 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fd fe44 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002dd4:	208b      	movs	r0, #139	; 0x8b
 8002dd6:	f7fd fe41 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fe3e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002de0:	2099      	movs	r0, #153	; 0x99
 8002de2:	f7fd fe3b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fd fe38 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002dec:	20a8      	movs	r0, #168	; 0xa8
 8002dee:	f7fd fe35 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fd fe32 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002df8:	20b9      	movs	r0, #185	; 0xb9
 8002dfa:	f7fd fe2f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fd fe2c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e04:	20c4      	movs	r0, #196	; 0xc4
 8002e06:	f7fd fe29 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fd fe26 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002e10:	20ca      	movs	r0, #202	; 0xca
 8002e12:	f7fd fe23 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fd fe20 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002e1c:	20d2      	movs	r0, #210	; 0xd2
 8002e1e:	f7fd fe1d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fd fe1a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002e28:	20d8      	movs	r0, #216	; 0xd8
 8002e2a:	f7fd fe17 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fd fe14 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e34:	20e0      	movs	r0, #224	; 0xe0
 8002e36:	f7fd fe11 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fd fe0e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e40:	20f3      	movs	r0, #243	; 0xf3
 8002e42:	f7fd fe0b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fe08 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002e4c:	20e2      	movs	r0, #226	; 0xe2
 8002e4e:	f7fd fde1 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e52:	2005      	movs	r0, #5
 8002e54:	f7fd fe02 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fdff 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002e5e:	200b      	movs	r0, #11
 8002e60:	f7fd fdfc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fdf9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002e6a:	201b      	movs	r0, #27
 8002e6c:	f7fd fdf6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fdf3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002e76:	2034      	movs	r0, #52	; 0x34
 8002e78:	f7fd fdf0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fded 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e82:	2044      	movs	r0, #68	; 0x44
 8002e84:	f7fd fdea 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fde7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002e8e:	204f      	movs	r0, #79	; 0x4f
 8002e90:	f7fd fde4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fde1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002e9a:	2061      	movs	r0, #97	; 0x61
 8002e9c:	f7fd fdde 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fddb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002ea6:	2079      	movs	r0, #121	; 0x79
 8002ea8:	f7fd fdd8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fdd5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002eb2:	2088      	movs	r0, #136	; 0x88
 8002eb4:	f7fd fdd2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd fdcf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002ebe:	2097      	movs	r0, #151	; 0x97
 8002ec0:	f7fd fdcc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd fdc9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002eca:	20a6      	movs	r0, #166	; 0xa6
 8002ecc:	f7fd fdc6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fdc3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002ed6:	20b7      	movs	r0, #183	; 0xb7
 8002ed8:	f7fd fdc0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd fdbd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ee2:	20c2      	movs	r0, #194	; 0xc2
 8002ee4:	f7fd fdba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd fdb7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002eee:	20c7      	movs	r0, #199	; 0xc7
 8002ef0:	f7fd fdb4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd fdb1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002efa:	20d1      	movs	r0, #209	; 0xd1
 8002efc:	f7fd fdae 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fdab 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002f06:	20d6      	movs	r0, #214	; 0xd6
 8002f08:	f7fd fda8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fda5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f12:	20dd      	movs	r0, #221	; 0xdd
 8002f14:	f7fd fda2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fd9f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f1e:	20f3      	movs	r0, #243	; 0xf3
 8002f20:	f7fd fd9c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fd99 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002f2a:	20e3      	movs	r0, #227	; 0xe3
 8002f2c:	f7fd fd72 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f30:	2005      	movs	r0, #5
 8002f32:	f7fd fd93 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fd fd90 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002f3c:	200a      	movs	r0, #10
 8002f3e:	f7fd fd8d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fd8a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002f48:	201c      	movs	r0, #28
 8002f4a:	f7fd fd87 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fd84 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002f54:	2033      	movs	r0, #51	; 0x33
 8002f56:	f7fd fd81 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd fd7e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f60:	2044      	movs	r0, #68	; 0x44
 8002f62:	f7fd fd7b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fd78 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002f6c:	2050      	movs	r0, #80	; 0x50
 8002f6e:	f7fd fd75 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd fd72 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002f78:	2062      	movs	r0, #98	; 0x62
 8002f7a:	f7fd fd6f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fd6c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002f84:	2078      	movs	r0, #120	; 0x78
 8002f86:	f7fd fd69 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd fd66 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002f90:	2088      	movs	r0, #136	; 0x88
 8002f92:	f7fd fd63 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd fd60 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002f9c:	2097      	movs	r0, #151	; 0x97
 8002f9e:	f7fd fd5d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd fd5a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002fa8:	20a6      	movs	r0, #166	; 0xa6
 8002faa:	f7fd fd57 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd fd54 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002fb4:	20b7      	movs	r0, #183	; 0xb7
 8002fb6:	f7fd fd51 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd fd4e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002fc0:	20c2      	movs	r0, #194	; 0xc2
 8002fc2:	f7fd fd4b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fd48 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002fcc:	20c7      	movs	r0, #199	; 0xc7
 8002fce:	f7fd fd45 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fd fd42 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002fd8:	20d1      	movs	r0, #209	; 0xd1
 8002fda:	f7fd fd3f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd fd3c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002fe4:	20d5      	movs	r0, #213	; 0xd5
 8002fe6:	f7fd fd39 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd fd36 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ff0:	20dd      	movs	r0, #221	; 0xdd
 8002ff2:	f7fd fd33 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd fd30 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ffc:	20f3      	movs	r0, #243	; 0xf3
 8002ffe:	f7fd fd2d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd fd2a 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003008:	20e4      	movs	r0, #228	; 0xe4
 800300a:	f7fd fd03 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd fd24 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fd fd21 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800301a:	2001      	movs	r0, #1
 800301c:	f7fd fd1e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fd1b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003026:	2002      	movs	r0, #2
 8003028:	f7fd fd18 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fd15 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003032:	202a      	movs	r0, #42	; 0x2a
 8003034:	f7fd fd12 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fd0f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800303e:	203c      	movs	r0, #60	; 0x3c
 8003040:	f7fd fd0c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fd09 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800304a:	204b      	movs	r0, #75	; 0x4b
 800304c:	f7fd fd06 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fd03 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003056:	205d      	movs	r0, #93	; 0x5d
 8003058:	f7fd fd00 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fcfd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003062:	2074      	movs	r0, #116	; 0x74
 8003064:	f7fd fcfa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fd fcf7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800306e:	2084      	movs	r0, #132	; 0x84
 8003070:	f7fd fcf4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fcf1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800307a:	2093      	movs	r0, #147	; 0x93
 800307c:	f7fd fcee 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003080:	2000      	movs	r0, #0
 8003082:	f7fd fceb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003086:	20a2      	movs	r0, #162	; 0xa2
 8003088:	f7fd fce8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308c:	2000      	movs	r0, #0
 800308e:	f7fd fce5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003092:	20b3      	movs	r0, #179	; 0xb3
 8003094:	f7fd fce2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003098:	2000      	movs	r0, #0
 800309a:	f7fd fcdf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800309e:	20be      	movs	r0, #190	; 0xbe
 80030a0:	f7fd fcdc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fd fcd9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80030aa:	20c4      	movs	r0, #196	; 0xc4
 80030ac:	f7fd fcd6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fd fcd3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80030b6:	20cd      	movs	r0, #205	; 0xcd
 80030b8:	f7fd fcd0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fd fccd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80030c2:	20d3      	movs	r0, #211	; 0xd3
 80030c4:	f7fd fcca 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fd fcc7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80030ce:	20dd      	movs	r0, #221	; 0xdd
 80030d0:	f7fd fcc4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fd fcc1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030da:	20f3      	movs	r0, #243	; 0xf3
 80030dc:	f7fd fcbe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7fd fcbb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80030e6:	20e5      	movs	r0, #229	; 0xe5
 80030e8:	f7fd fc94 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fd fcb5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fcb2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7fd fcaf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fcac 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd fca9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fca6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003110:	2029      	movs	r0, #41	; 0x29
 8003112:	f7fd fca3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fca0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800311c:	203c      	movs	r0, #60	; 0x3c
 800311e:	f7fd fc9d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fd fc9a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003128:	204b      	movs	r0, #75	; 0x4b
 800312a:	f7fd fc97 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312e:	2000      	movs	r0, #0
 8003130:	f7fd fc94 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003134:	205d      	movs	r0, #93	; 0x5d
 8003136:	f7fd fc91 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fc8e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003140:	2074      	movs	r0, #116	; 0x74
 8003142:	f7fd fc8b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fd fc88 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800314c:	2084      	movs	r0, #132	; 0x84
 800314e:	f7fd fc85 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd fc82 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003158:	2093      	movs	r0, #147	; 0x93
 800315a:	f7fd fc7f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd fc7c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003164:	20a2      	movs	r0, #162	; 0xa2
 8003166:	f7fd fc79 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316a:	2000      	movs	r0, #0
 800316c:	f7fd fc76 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003170:	20b3      	movs	r0, #179	; 0xb3
 8003172:	f7fd fc73 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fd fc70 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800317c:	20be      	movs	r0, #190	; 0xbe
 800317e:	f7fd fc6d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003182:	2000      	movs	r0, #0
 8003184:	f7fd fc6a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003188:	20c4      	movs	r0, #196	; 0xc4
 800318a:	f7fd fc67 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318e:	2000      	movs	r0, #0
 8003190:	f7fd fc64 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003194:	20cd      	movs	r0, #205	; 0xcd
 8003196:	f7fd fc61 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f7fd fc5e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80031a0:	20d3      	movs	r0, #211	; 0xd3
 80031a2:	f7fd fc5b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd fc58 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80031ac:	20dc      	movs	r0, #220	; 0xdc
 80031ae:	f7fd fc55 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f7fd fc52 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80031b8:	20f3      	movs	r0, #243	; 0xf3
 80031ba:	f7fd fc4f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd fc4c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80031c4:	20e6      	movs	r0, #230	; 0xe6
 80031c6:	f7fd fc25 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80031ca:	2011      	movs	r0, #17
 80031cc:	f7fd fc46 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fc43 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80031d6:	2034      	movs	r0, #52	; 0x34
 80031d8:	f7fd fc40 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7fd fc3d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80031e2:	2056      	movs	r0, #86	; 0x56
 80031e4:	f7fd fc3a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fc37 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031ee:	2076      	movs	r0, #118	; 0x76
 80031f0:	f7fd fc34 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fc31 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80031fa:	2077      	movs	r0, #119	; 0x77
 80031fc:	f7fd fc2e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003200:	2000      	movs	r0, #0
 8003202:	f7fd fc2b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003206:	2066      	movs	r0, #102	; 0x66
 8003208:	f7fd fc28 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fc25 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003212:	2088      	movs	r0, #136	; 0x88
 8003214:	f7fd fc22 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fc1f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800321e:	2099      	movs	r0, #153	; 0x99
 8003220:	f7fd fc1c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fc19 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800322a:	20bb      	movs	r0, #187	; 0xbb
 800322c:	f7fd fc16 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fc13 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003236:	2099      	movs	r0, #153	; 0x99
 8003238:	f7fd fc10 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fc0d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003242:	2066      	movs	r0, #102	; 0x66
 8003244:	f7fd fc0a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fc07 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800324e:	2055      	movs	r0, #85	; 0x55
 8003250:	f7fd fc04 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fc01 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800325a:	2055      	movs	r0, #85	; 0x55
 800325c:	f7fd fbfe 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fbfb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003266:	2045      	movs	r0, #69	; 0x45
 8003268:	f7fd fbf8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd fbf5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003272:	2043      	movs	r0, #67	; 0x43
 8003274:	f7fd fbf2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fbef 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800327e:	2044      	movs	r0, #68	; 0x44
 8003280:	f7fd fbec 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd fbe9 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800328a:	20e7      	movs	r0, #231	; 0xe7
 800328c:	f7fd fbc2 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003290:	2032      	movs	r0, #50	; 0x32
 8003292:	f7fd fbe3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fbe0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800329c:	2055      	movs	r0, #85	; 0x55
 800329e:	f7fd fbdd 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd fbda 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80032a8:	2076      	movs	r0, #118	; 0x76
 80032aa:	f7fd fbd7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fbd4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032b4:	2066      	movs	r0, #102	; 0x66
 80032b6:	f7fd fbd1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fbce 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80032c0:	2067      	movs	r0, #103	; 0x67
 80032c2:	f7fd fbcb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fbc8 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80032cc:	2067      	movs	r0, #103	; 0x67
 80032ce:	f7fd fbc5 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd fbc2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80032d8:	2087      	movs	r0, #135	; 0x87
 80032da:	f7fd fbbf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd fbbc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032e4:	2099      	movs	r0, #153	; 0x99
 80032e6:	f7fd fbb9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7fd fbb6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032f0:	20bb      	movs	r0, #187	; 0xbb
 80032f2:	f7fd fbb3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fd fbb0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032fc:	2099      	movs	r0, #153	; 0x99
 80032fe:	f7fd fbad 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd fbaa 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003308:	2077      	movs	r0, #119	; 0x77
 800330a:	f7fd fba7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd fba4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003314:	2044      	movs	r0, #68	; 0x44
 8003316:	f7fd fba1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd fb9e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003320:	2056      	movs	r0, #86	; 0x56
 8003322:	f7fd fb9b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd fb98 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800332c:	2023      	movs	r0, #35	; 0x23
 800332e:	f7fd fb95 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fb92 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003338:	2033      	movs	r0, #51	; 0x33
 800333a:	f7fd fb8f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fb8c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003344:	2045      	movs	r0, #69	; 0x45
 8003346:	f7fd fb89 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd fb86 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003350:	20e8      	movs	r0, #232	; 0xe8
 8003352:	f7fd fb5f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fd fb80 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd fb7d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003362:	2099      	movs	r0, #153	; 0x99
 8003364:	f7fd fb7a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd fb77 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800336e:	2087      	movs	r0, #135	; 0x87
 8003370:	f7fd fb74 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003374:	2000      	movs	r0, #0
 8003376:	f7fd fb71 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800337a:	2088      	movs	r0, #136	; 0x88
 800337c:	f7fd fb6e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f7fd fb6b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003386:	2077      	movs	r0, #119	; 0x77
 8003388:	f7fd fb68 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f7fd fb65 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003392:	2066      	movs	r0, #102	; 0x66
 8003394:	f7fd fb62 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003398:	2000      	movs	r0, #0
 800339a:	f7fd fb5f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800339e:	2088      	movs	r0, #136	; 0x88
 80033a0:	f7fd fb5c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7fd fb59 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80033aa:	20aa      	movs	r0, #170	; 0xaa
 80033ac:	f7fd fb56 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd fb53 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80033b6:	20bb      	movs	r0, #187	; 0xbb
 80033b8:	f7fd fb50 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7fd fb4d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033c2:	2099      	movs	r0, #153	; 0x99
 80033c4:	f7fd fb4a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7fd fb47 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033ce:	2066      	movs	r0, #102	; 0x66
 80033d0:	f7fd fb44 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fd fb41 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033da:	2055      	movs	r0, #85	; 0x55
 80033dc:	f7fd fb3e 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fd fb3b 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033e6:	2055      	movs	r0, #85	; 0x55
 80033e8:	f7fd fb38 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd fb35 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033f2:	2044      	movs	r0, #68	; 0x44
 80033f4:	f7fd fb32 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fd fb2f 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033fe:	2044      	movs	r0, #68	; 0x44
 8003400:	f7fd fb2c 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003404:	2000      	movs	r0, #0
 8003406:	f7fd fb29 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800340a:	2055      	movs	r0, #85	; 0x55
 800340c:	f7fd fb26 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003410:	2000      	movs	r0, #0
 8003412:	f7fd fb23 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003416:	20e9      	movs	r0, #233	; 0xe9
 8003418:	f7fd fafc 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800341c:	20aa      	movs	r0, #170	; 0xaa
 800341e:	f7fd fb1d 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003422:	2000      	movs	r0, #0
 8003424:	f7fd fb1a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003428:	2000      	movs	r0, #0
 800342a:	f7fd fb17 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800342e:	2000      	movs	r0, #0
 8003430:	f7fd fb14 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003434:	2000      	movs	r0, #0
 8003436:	f7fd faed 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800343a:	20aa      	movs	r0, #170	; 0xaa
 800343c:	f7fd fb0e 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003440:	20cf      	movs	r0, #207	; 0xcf
 8003442:	f7fd fae7 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003446:	2000      	movs	r0, #0
 8003448:	f7fd fb08 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344c:	2000      	movs	r0, #0
 800344e:	f7fd fb05 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003452:	2000      	movs	r0, #0
 8003454:	f7fd fb02 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fd faff 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800345e:	2000      	movs	r0, #0
 8003460:	f7fd fafc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003464:	2000      	movs	r0, #0
 8003466:	f7fd faf9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346a:	2000      	movs	r0, #0
 800346c:	f7fd faf6 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003470:	2000      	movs	r0, #0
 8003472:	f7fd faf3 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003476:	2000      	movs	r0, #0
 8003478:	f7fd faf0 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd faed 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003482:	2000      	movs	r0, #0
 8003484:	f7fd faea 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003488:	2000      	movs	r0, #0
 800348a:	f7fd fae7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800348e:	2000      	movs	r0, #0
 8003490:	f7fd fae4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003494:	2000      	movs	r0, #0
 8003496:	f7fd fae1 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349a:	2000      	movs	r0, #0
 800349c:	f7fd fade 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fd fadb 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fad8 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80034ac:	20f0      	movs	r0, #240	; 0xf0
 80034ae:	f7fd fab1 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7fd fad2 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80034b8:	2050      	movs	r0, #80	; 0x50
 80034ba:	f7fd facf 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034be:	2000      	movs	r0, #0
 80034c0:	f7fd facc 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fd fac9 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7fd fac6 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80034d0:	20f3      	movs	r0, #243	; 0xf3
 80034d2:	f7fd fa9f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7fd fac0 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80034dc:	20f9      	movs	r0, #249	; 0xf9
 80034de:	f7fd fa99 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80034e2:	2006      	movs	r0, #6
 80034e4:	f7fd faba 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80034e8:	2010      	movs	r0, #16
 80034ea:	f7fd fab7 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80034ee:	2029      	movs	r0, #41	; 0x29
 80034f0:	f7fd fab4 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd fab1 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80034fa:	203a      	movs	r0, #58	; 0x3a
 80034fc:	f7fd fa8a 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003500:	2055      	movs	r0, #85	; 0x55
 8003502:	f7fd faab 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003506:	2011      	movs	r0, #17
 8003508:	f7fd fa84 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(100);
 800350c:	2064      	movs	r0, #100	; 0x64
 800350e:	f004 f989 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003512:	2029      	movs	r0, #41	; 0x29
 8003514:	f7fd fa7e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003518:	2035      	movs	r0, #53	; 0x35
 800351a:	f7fd fa7b 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800351e:	2000      	movs	r0, #0
 8003520:	f7fd fa9c 	bl	8000a5c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003524:	2051      	movs	r0, #81	; 0x51
 8003526:	f7fd fa75 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800352a:	20ff      	movs	r0, #255	; 0xff
 800352c:	f7fd fa96 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003530:	2053      	movs	r0, #83	; 0x53
 8003532:	f7fd fa6f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003536:	202c      	movs	r0, #44	; 0x2c
 8003538:	f7fd fa90 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800353c:	2055      	movs	r0, #85	; 0x55
 800353e:	f7fd fa69 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003542:	2082      	movs	r0, #130	; 0x82
 8003544:	f7fd fa8a 	bl	8000a5c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003548:	202c      	movs	r0, #44	; 0x2c
 800354a:	f7fd fa63 	bl	8000a14 <LCD_WR_REG>
 800354e:	f002 bca1 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <LCD_Init+0x1504>)
 8003554:	889b      	ldrh	r3, [r3, #4]
 8003556:	f245 5210 	movw	r2, #21776	; 0x5510
 800355a:	4293      	cmp	r3, r2
 800355c:	f040 8782 	bne.w	8004464 <LCD_Init+0x2404>
 8003560:	e002      	b.n	8003568 <LCD_Init+0x1508>
 8003562:	bf00      	nop
 8003564:	200001f8 	.word	0x200001f8
		LCD_WriteReg(0xF000, 0x55);
 8003568:	2155      	movs	r1, #85	; 0x55
 800356a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800356e:	f7fd fadd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003572:	21aa      	movs	r1, #170	; 0xaa
 8003574:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003578:	f7fd fad8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800357c:	2152      	movs	r1, #82	; 0x52
 800357e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003582:	f7fd fad3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003586:	2108      	movs	r1, #8
 8003588:	f24f 0003 	movw	r0, #61443	; 0xf003
 800358c:	f7fd face 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003590:	2101      	movs	r1, #1
 8003592:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003596:	f7fd fac9 	bl	8000b2c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800359a:	210d      	movs	r1, #13
 800359c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80035a0:	f7fd fac4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80035a4:	210d      	movs	r1, #13
 80035a6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80035aa:	f7fd fabf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80035ae:	210d      	movs	r1, #13
 80035b0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80035b4:	f7fd faba 	bl	8000b2c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80035b8:	2134      	movs	r1, #52	; 0x34
 80035ba:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80035be:	f7fd fab5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80035c2:	2134      	movs	r1, #52	; 0x34
 80035c4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80035c8:	f7fd fab0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80035cc:	2134      	movs	r1, #52	; 0x34
 80035ce:	f24b 6002 	movw	r0, #46594	; 0xb602
 80035d2:	f7fd faab 	bl	8000b2c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80035d6:	210d      	movs	r1, #13
 80035d8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80035dc:	f7fd faa6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80035e0:	210d      	movs	r1, #13
 80035e2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80035e6:	f7fd faa1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80035ea:	210d      	movs	r1, #13
 80035ec:	f24b 1002 	movw	r0, #45314	; 0xb102
 80035f0:	f7fd fa9c 	bl	8000b2c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80035f4:	2134      	movs	r1, #52	; 0x34
 80035f6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80035fa:	f7fd fa97 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80035fe:	2134      	movs	r1, #52	; 0x34
 8003600:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003604:	f7fd fa92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003608:	2134      	movs	r1, #52	; 0x34
 800360a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800360e:	f7fd fa8d 	bl	8000b2c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003612:	2100      	movs	r1, #0
 8003614:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003618:	f7fd fa88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800361c:	2100      	movs	r1, #0
 800361e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003622:	f7fd fa83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003626:	2100      	movs	r1, #0
 8003628:	f24b 2002 	movw	r0, #45570	; 0xb202
 800362c:	f7fd fa7e 	bl	8000b2c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003630:	2124      	movs	r1, #36	; 0x24
 8003632:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003636:	f7fd fa79 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800363a:	2124      	movs	r1, #36	; 0x24
 800363c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003640:	f7fd fa74 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003644:	2124      	movs	r1, #36	; 0x24
 8003646:	f64b 0002 	movw	r0, #47106	; 0xb802
 800364a:	f7fd fa6f 	bl	8000b2c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800364e:	2101      	movs	r1, #1
 8003650:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003654:	f7fd fa6a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003658:	210f      	movs	r1, #15
 800365a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800365e:	f7fd fa65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003662:	210f      	movs	r1, #15
 8003664:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003668:	f7fd fa60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800366c:	210f      	movs	r1, #15
 800366e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003672:	f7fd fa5b 	bl	8000b2c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003676:	2134      	movs	r1, #52	; 0x34
 8003678:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800367c:	f7fd fa56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003680:	2134      	movs	r1, #52	; 0x34
 8003682:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003686:	f7fd fa51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800368a:	2134      	movs	r1, #52	; 0x34
 800368c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003690:	f7fd fa4c 	bl	8000b2c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003694:	2108      	movs	r1, #8
 8003696:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800369a:	f7fd fa47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800369e:	2108      	movs	r1, #8
 80036a0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80036a4:	f7fd fa42 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80036a8:	2108      	movs	r1, #8
 80036aa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80036ae:	f7fd fa3d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80036b2:	2103      	movs	r1, #3
 80036b4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80036b8:	f7fd fa38 	bl	8000b2c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80036bc:	2124      	movs	r1, #36	; 0x24
 80036be:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80036c2:	f7fd fa33 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80036c6:	2124      	movs	r1, #36	; 0x24
 80036c8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80036cc:	f7fd fa2e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80036d0:	2124      	movs	r1, #36	; 0x24
 80036d2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80036d6:	f7fd fa29 	bl	8000b2c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80036da:	2100      	movs	r1, #0
 80036dc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80036e0:	f7fd fa24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80036e4:	2178      	movs	r1, #120	; 0x78
 80036e6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80036ea:	f7fd fa1f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80036ee:	2100      	movs	r1, #0
 80036f0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80036f4:	f7fd fa1a 	bl	8000b2c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80036f8:	2100      	movs	r1, #0
 80036fa:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80036fe:	f7fd fa15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003702:	2178      	movs	r1, #120	; 0x78
 8003704:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003708:	f7fd fa10 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800370c:	2100      	movs	r1, #0
 800370e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003712:	f7fd fa0b 	bl	8000b2c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003716:	2100      	movs	r1, #0
 8003718:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800371c:	f7fd fa06 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003726:	f7fd fa01 	bl	8000b2c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800372a:	2100      	movs	r1, #0
 800372c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003730:	f7fd f9fc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003734:	2133      	movs	r1, #51	; 0x33
 8003736:	f24d 1001 	movw	r0, #53505	; 0xd101
 800373a:	f7fd f9f7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800373e:	2100      	movs	r1, #0
 8003740:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003744:	f7fd f9f2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003748:	2134      	movs	r1, #52	; 0x34
 800374a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800374e:	f7fd f9ed 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003752:	2100      	movs	r1, #0
 8003754:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003758:	f7fd f9e8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800375c:	213a      	movs	r1, #58	; 0x3a
 800375e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003762:	f7fd f9e3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003766:	2100      	movs	r1, #0
 8003768:	f24d 1006 	movw	r0, #53510	; 0xd106
 800376c:	f7fd f9de 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003770:	214a      	movs	r1, #74	; 0x4a
 8003772:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003776:	f7fd f9d9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800377a:	2100      	movs	r1, #0
 800377c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003780:	f7fd f9d4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003784:	215c      	movs	r1, #92	; 0x5c
 8003786:	f24d 1009 	movw	r0, #53513	; 0xd109
 800378a:	f7fd f9cf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800378e:	2100      	movs	r1, #0
 8003790:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003794:	f7fd f9ca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003798:	2181      	movs	r1, #129	; 0x81
 800379a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800379e:	f7fd f9c5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80037a8:	f7fd f9c0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80037ac:	21a6      	movs	r1, #166	; 0xa6
 80037ae:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80037b2:	f7fd f9bb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80037b6:	2100      	movs	r1, #0
 80037b8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80037bc:	f7fd f9b6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80037c0:	21e5      	movs	r1, #229	; 0xe5
 80037c2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80037c6:	f7fd f9b1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80037ca:	2101      	movs	r1, #1
 80037cc:	f24d 1010 	movw	r0, #53520	; 0xd110
 80037d0:	f7fd f9ac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80037d4:	2113      	movs	r1, #19
 80037d6:	f24d 1011 	movw	r0, #53521	; 0xd111
 80037da:	f7fd f9a7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80037de:	2101      	movs	r1, #1
 80037e0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80037e4:	f7fd f9a2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80037e8:	2154      	movs	r1, #84	; 0x54
 80037ea:	f24d 1013 	movw	r0, #53523	; 0xd113
 80037ee:	f7fd f99d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80037f2:	2101      	movs	r1, #1
 80037f4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80037f8:	f7fd f998 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80037fc:	2182      	movs	r1, #130	; 0x82
 80037fe:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003802:	f7fd f993 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003806:	2101      	movs	r1, #1
 8003808:	f24d 1016 	movw	r0, #53526	; 0xd116
 800380c:	f7fd f98e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003810:	21ca      	movs	r1, #202	; 0xca
 8003812:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003816:	f7fd f989 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800381a:	2102      	movs	r1, #2
 800381c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003820:	f7fd f984 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003824:	2100      	movs	r1, #0
 8003826:	f24d 1019 	movw	r0, #53529	; 0xd119
 800382a:	f7fd f97f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800382e:	2102      	movs	r1, #2
 8003830:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003834:	f7fd f97a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003838:	2101      	movs	r1, #1
 800383a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800383e:	f7fd f975 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003842:	2102      	movs	r1, #2
 8003844:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003848:	f7fd f970 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800384c:	2134      	movs	r1, #52	; 0x34
 800384e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003852:	f7fd f96b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003856:	2102      	movs	r1, #2
 8003858:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800385c:	f7fd f966 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003860:	2167      	movs	r1, #103	; 0x67
 8003862:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003866:	f7fd f961 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800386a:	2102      	movs	r1, #2
 800386c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003870:	f7fd f95c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003874:	2184      	movs	r1, #132	; 0x84
 8003876:	f24d 1021 	movw	r0, #53537	; 0xd121
 800387a:	f7fd f957 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800387e:	2102      	movs	r1, #2
 8003880:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003884:	f7fd f952 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003888:	21a4      	movs	r1, #164	; 0xa4
 800388a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800388e:	f7fd f94d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003892:	2102      	movs	r1, #2
 8003894:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003898:	f7fd f948 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800389c:	21b7      	movs	r1, #183	; 0xb7
 800389e:	f24d 1025 	movw	r0, #53541	; 0xd125
 80038a2:	f7fd f943 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80038a6:	2102      	movs	r1, #2
 80038a8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80038ac:	f7fd f93e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80038b0:	21cf      	movs	r1, #207	; 0xcf
 80038b2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80038b6:	f7fd f939 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80038ba:	2102      	movs	r1, #2
 80038bc:	f24d 1028 	movw	r0, #53544	; 0xd128
 80038c0:	f7fd f934 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80038c4:	21de      	movs	r1, #222	; 0xde
 80038c6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80038ca:	f7fd f92f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80038ce:	2102      	movs	r1, #2
 80038d0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80038d4:	f7fd f92a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80038d8:	21f2      	movs	r1, #242	; 0xf2
 80038da:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80038de:	f7fd f925 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80038e2:	2102      	movs	r1, #2
 80038e4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80038e8:	f7fd f920 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80038ec:	21fe      	movs	r1, #254	; 0xfe
 80038ee:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80038f2:	f7fd f91b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80038f6:	2103      	movs	r1, #3
 80038f8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80038fc:	f7fd f916 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003900:	2110      	movs	r1, #16
 8003902:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003906:	f7fd f911 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 800390a:	2103      	movs	r1, #3
 800390c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003910:	f7fd f90c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003914:	2133      	movs	r1, #51	; 0x33
 8003916:	f24d 1031 	movw	r0, #53553	; 0xd131
 800391a:	f7fd f907 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800391e:	2103      	movs	r1, #3
 8003920:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003924:	f7fd f902 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003928:	216d      	movs	r1, #109	; 0x6d
 800392a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800392e:	f7fd f8fd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003932:	2100      	movs	r1, #0
 8003934:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003938:	f7fd f8f8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800393c:	2133      	movs	r1, #51	; 0x33
 800393e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003942:	f7fd f8f3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003946:	2100      	movs	r1, #0
 8003948:	f24d 2002 	movw	r0, #53762	; 0xd202
 800394c:	f7fd f8ee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003950:	2134      	movs	r1, #52	; 0x34
 8003952:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003956:	f7fd f8e9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800395a:	2100      	movs	r1, #0
 800395c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003960:	f7fd f8e4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003964:	213a      	movs	r1, #58	; 0x3a
 8003966:	f24d 2005 	movw	r0, #53765	; 0xd205
 800396a:	f7fd f8df 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800396e:	2100      	movs	r1, #0
 8003970:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003974:	f7fd f8da 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003978:	214a      	movs	r1, #74	; 0x4a
 800397a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800397e:	f7fd f8d5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003982:	2100      	movs	r1, #0
 8003984:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003988:	f7fd f8d0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800398c:	215c      	movs	r1, #92	; 0x5c
 800398e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003992:	f7fd f8cb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003996:	2100      	movs	r1, #0
 8003998:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800399c:	f7fd f8c6 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80039a0:	2181      	movs	r1, #129	; 0x81
 80039a2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80039a6:	f7fd f8c1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80039aa:	2100      	movs	r1, #0
 80039ac:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80039b0:	f7fd f8bc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80039b4:	21a6      	movs	r1, #166	; 0xa6
 80039b6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80039ba:	f7fd f8b7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80039c4:	f7fd f8b2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80039c8:	21e5      	movs	r1, #229	; 0xe5
 80039ca:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80039ce:	f7fd f8ad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80039d2:	2101      	movs	r1, #1
 80039d4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80039d8:	f7fd f8a8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80039dc:	2113      	movs	r1, #19
 80039de:	f24d 2011 	movw	r0, #53777	; 0xd211
 80039e2:	f7fd f8a3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80039e6:	2101      	movs	r1, #1
 80039e8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80039ec:	f7fd f89e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80039f0:	2154      	movs	r1, #84	; 0x54
 80039f2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80039f6:	f7fd f899 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80039fa:	2101      	movs	r1, #1
 80039fc:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003a00:	f7fd f894 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003a04:	2182      	movs	r1, #130	; 0x82
 8003a06:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003a0a:	f7fd f88f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003a14:	f7fd f88a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003a18:	21ca      	movs	r1, #202	; 0xca
 8003a1a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003a1e:	f7fd f885 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003a22:	2102      	movs	r1, #2
 8003a24:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003a28:	f7fd f880 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003a32:	f7fd f87b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003a36:	2102      	movs	r1, #2
 8003a38:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003a3c:	f7fd f876 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003a40:	2101      	movs	r1, #1
 8003a42:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003a46:	f7fd f871 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003a50:	f7fd f86c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003a54:	2134      	movs	r1, #52	; 0x34
 8003a56:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003a5a:	f7fd f867 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003a5e:	2102      	movs	r1, #2
 8003a60:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003a64:	f7fd f862 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003a68:	2167      	movs	r1, #103	; 0x67
 8003a6a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003a6e:	f7fd f85d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003a72:	2102      	movs	r1, #2
 8003a74:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003a78:	f7fd f858 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003a7c:	2184      	movs	r1, #132	; 0x84
 8003a7e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003a82:	f7fd f853 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003a86:	2102      	movs	r1, #2
 8003a88:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003a8c:	f7fd f84e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003a90:	21a4      	movs	r1, #164	; 0xa4
 8003a92:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003a96:	f7fd f849 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003aa0:	f7fd f844 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003aa4:	21b7      	movs	r1, #183	; 0xb7
 8003aa6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003aaa:	f7fd f83f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003ab4:	f7fd f83a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003ab8:	21cf      	movs	r1, #207	; 0xcf
 8003aba:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003abe:	f7fd f835 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003ac8:	f7fd f830 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003acc:	21de      	movs	r1, #222	; 0xde
 8003ace:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003ad2:	f7fd f82b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003adc:	f7fd f826 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003ae0:	21f2      	movs	r1, #242	; 0xf2
 8003ae2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003ae6:	f7fd f821 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003aea:	2102      	movs	r1, #2
 8003aec:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003af0:	f7fd f81c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003af4:	21fe      	movs	r1, #254	; 0xfe
 8003af6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003afa:	f7fd f817 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003afe:	2103      	movs	r1, #3
 8003b00:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003b04:	f7fd f812 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003b08:	2110      	movs	r1, #16
 8003b0a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003b0e:	f7fd f80d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003b12:	2103      	movs	r1, #3
 8003b14:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003b18:	f7fd f808 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003b1c:	2133      	movs	r1, #51	; 0x33
 8003b1e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003b22:	f7fd f803 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003b26:	2103      	movs	r1, #3
 8003b28:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003b2c:	f7fc fffe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003b30:	216d      	movs	r1, #109	; 0x6d
 8003b32:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003b36:	f7fc fff9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003b40:	f7fc fff4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003b44:	2133      	movs	r1, #51	; 0x33
 8003b46:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003b4a:	f7fc ffef 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003b54:	f7fc ffea 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003b58:	2134      	movs	r1, #52	; 0x34
 8003b5a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003b5e:	f7fc ffe5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003b62:	2100      	movs	r1, #0
 8003b64:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003b68:	f7fc ffe0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003b6c:	213a      	movs	r1, #58	; 0x3a
 8003b6e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003b72:	f7fc ffdb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003b76:	2100      	movs	r1, #0
 8003b78:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003b7c:	f7fc ffd6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003b80:	214a      	movs	r1, #74	; 0x4a
 8003b82:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003b86:	f7fc ffd1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003b90:	f7fc ffcc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003b94:	215c      	movs	r1, #92	; 0x5c
 8003b96:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003b9a:	f7fc ffc7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003ba4:	f7fc ffc2 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003ba8:	2181      	movs	r1, #129	; 0x81
 8003baa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003bae:	f7fc ffbd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003bb8:	f7fc ffb8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003bbc:	21a6      	movs	r1, #166	; 0xa6
 8003bbe:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003bc2:	f7fc ffb3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003bcc:	f7fc ffae 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003bd0:	21e5      	movs	r1, #229	; 0xe5
 8003bd2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003bd6:	f7fc ffa9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003bda:	2101      	movs	r1, #1
 8003bdc:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003be0:	f7fc ffa4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003be4:	2113      	movs	r1, #19
 8003be6:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003bea:	f7fc ff9f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003bee:	2101      	movs	r1, #1
 8003bf0:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003bf4:	f7fc ff9a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003bf8:	2154      	movs	r1, #84	; 0x54
 8003bfa:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003bfe:	f7fc ff95 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003c02:	2101      	movs	r1, #1
 8003c04:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003c08:	f7fc ff90 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003c0c:	2182      	movs	r1, #130	; 0x82
 8003c0e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003c12:	f7fc ff8b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003c16:	2101      	movs	r1, #1
 8003c18:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003c1c:	f7fc ff86 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003c20:	21ca      	movs	r1, #202	; 0xca
 8003c22:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003c26:	f7fc ff81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003c30:	f7fc ff7c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003c34:	2100      	movs	r1, #0
 8003c36:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003c3a:	f7fc ff77 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003c3e:	2102      	movs	r1, #2
 8003c40:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003c44:	f7fc ff72 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003c48:	2101      	movs	r1, #1
 8003c4a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003c4e:	f7fc ff6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003c52:	2102      	movs	r1, #2
 8003c54:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003c58:	f7fc ff68 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003c5c:	2134      	movs	r1, #52	; 0x34
 8003c5e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003c62:	f7fc ff63 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003c66:	2102      	movs	r1, #2
 8003c68:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003c6c:	f7fc ff5e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003c70:	2167      	movs	r1, #103	; 0x67
 8003c72:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003c76:	f7fc ff59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003c80:	f7fc ff54 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003c84:	2184      	movs	r1, #132	; 0x84
 8003c86:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003c8a:	f7fc ff4f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003c94:	f7fc ff4a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003c98:	21a4      	movs	r1, #164	; 0xa4
 8003c9a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003c9e:	f7fc ff45 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003ca8:	f7fc ff40 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003cac:	21b7      	movs	r1, #183	; 0xb7
 8003cae:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003cb2:	f7fc ff3b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003cbc:	f7fc ff36 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003cc0:	21cf      	movs	r1, #207	; 0xcf
 8003cc2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003cc6:	f7fc ff31 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003cd0:	f7fc ff2c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003cd4:	21de      	movs	r1, #222	; 0xde
 8003cd6:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003cda:	f7fc ff27 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003cde:	2102      	movs	r1, #2
 8003ce0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003ce4:	f7fc ff22 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003ce8:	21f2      	movs	r1, #242	; 0xf2
 8003cea:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003cee:	f7fc ff1d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003cf8:	f7fc ff18 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003cfc:	21fe      	movs	r1, #254	; 0xfe
 8003cfe:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003d02:	f7fc ff13 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003d06:	2103      	movs	r1, #3
 8003d08:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003d0c:	f7fc ff0e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003d10:	2110      	movs	r1, #16
 8003d12:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003d16:	f7fc ff09 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003d1a:	2103      	movs	r1, #3
 8003d1c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003d20:	f7fc ff04 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003d24:	2133      	movs	r1, #51	; 0x33
 8003d26:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003d2a:	f7fc feff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003d2e:	2103      	movs	r1, #3
 8003d30:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003d34:	f7fc fefa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003d38:	216d      	movs	r1, #109	; 0x6d
 8003d3a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003d3e:	f7fc fef5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003d42:	2100      	movs	r1, #0
 8003d44:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003d48:	f7fc fef0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003d4c:	2133      	movs	r1, #51	; 0x33
 8003d4e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003d52:	f7fc feeb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003d56:	2100      	movs	r1, #0
 8003d58:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003d5c:	f7fc fee6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003d60:	2134      	movs	r1, #52	; 0x34
 8003d62:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003d66:	f7fc fee1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003d70:	f7fc fedc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003d74:	213a      	movs	r1, #58	; 0x3a
 8003d76:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003d7a:	f7fc fed7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003d84:	f7fc fed2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003d88:	214a      	movs	r1, #74	; 0x4a
 8003d8a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003d8e:	f7fc fecd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003d92:	2100      	movs	r1, #0
 8003d94:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003d98:	f7fc fec8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003d9c:	215c      	movs	r1, #92	; 0x5c
 8003d9e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003da2:	f7fc fec3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003da6:	2100      	movs	r1, #0
 8003da8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003dac:	f7fc febe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003db0:	2181      	movs	r1, #129	; 0x81
 8003db2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003db6:	f7fc feb9 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003dc0:	f7fc feb4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003dc4:	21a6      	movs	r1, #166	; 0xa6
 8003dc6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003dca:	f7fc feaf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003dd4:	f7fc feaa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003dd8:	21e5      	movs	r1, #229	; 0xe5
 8003dda:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003dde:	f7fc fea5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003de2:	2101      	movs	r1, #1
 8003de4:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003de8:	f7fc fea0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003dec:	2113      	movs	r1, #19
 8003dee:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003df2:	f7fc fe9b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003df6:	2101      	movs	r1, #1
 8003df8:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003dfc:	f7fc fe96 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003e00:	2154      	movs	r1, #84	; 0x54
 8003e02:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003e06:	f7fc fe91 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003e10:	f7fc fe8c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003e14:	2182      	movs	r1, #130	; 0x82
 8003e16:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003e1a:	f7fc fe87 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003e24:	f7fc fe82 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003e28:	21ca      	movs	r1, #202	; 0xca
 8003e2a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003e2e:	f7fc fe7d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003e32:	2102      	movs	r1, #2
 8003e34:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003e38:	f7fc fe78 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003e42:	f7fc fe73 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003e46:	2102      	movs	r1, #2
 8003e48:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003e4c:	f7fc fe6e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003e50:	2101      	movs	r1, #1
 8003e52:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003e56:	f7fc fe69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003e60:	f7fc fe64 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003e64:	2134      	movs	r1, #52	; 0x34
 8003e66:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003e6a:	f7fc fe5f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003e6e:	2102      	movs	r1, #2
 8003e70:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003e74:	f7fc fe5a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003e78:	2167      	movs	r1, #103	; 0x67
 8003e7a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003e7e:	f7fc fe55 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003e88:	f7fc fe50 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003e8c:	2184      	movs	r1, #132	; 0x84
 8003e8e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003e92:	f7fc fe4b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003e96:	2102      	movs	r1, #2
 8003e98:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003e9c:	f7fc fe46 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003ea0:	21a4      	movs	r1, #164	; 0xa4
 8003ea2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003ea6:	f7fc fe41 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003eb0:	f7fc fe3c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003eb4:	21b7      	movs	r1, #183	; 0xb7
 8003eb6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003eba:	f7fc fe37 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ec4:	f7fc fe32 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003ec8:	21cf      	movs	r1, #207	; 0xcf
 8003eca:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003ece:	f7fc fe2d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003ed8:	f7fc fe28 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003edc:	21de      	movs	r1, #222	; 0xde
 8003ede:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003ee2:	f7fc fe23 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003eec:	f7fc fe1e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003ef0:	21f2      	movs	r1, #242	; 0xf2
 8003ef2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003ef6:	f7fc fe19 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003efa:	2102      	movs	r1, #2
 8003efc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003f00:	f7fc fe14 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003f04:	21fe      	movs	r1, #254	; 0xfe
 8003f06:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003f0a:	f7fc fe0f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003f0e:	2103      	movs	r1, #3
 8003f10:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003f14:	f7fc fe0a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003f18:	2110      	movs	r1, #16
 8003f1a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003f1e:	f7fc fe05 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003f22:	2103      	movs	r1, #3
 8003f24:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003f28:	f7fc fe00 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003f2c:	2133      	movs	r1, #51	; 0x33
 8003f2e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003f32:	f7fc fdfb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003f36:	2103      	movs	r1, #3
 8003f38:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003f3c:	f7fc fdf6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003f40:	216d      	movs	r1, #109	; 0x6d
 8003f42:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003f46:	f7fc fdf1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003f50:	f7fc fdec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003f54:	2133      	movs	r1, #51	; 0x33
 8003f56:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003f5a:	f7fc fde7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003f64:	f7fc fde2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003f68:	2134      	movs	r1, #52	; 0x34
 8003f6a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003f6e:	f7fc fddd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003f72:	2100      	movs	r1, #0
 8003f74:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003f78:	f7fc fdd8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003f7c:	213a      	movs	r1, #58	; 0x3a
 8003f7e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003f82:	f7fc fdd3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003f86:	2100      	movs	r1, #0
 8003f88:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003f8c:	f7fc fdce 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003f90:	214a      	movs	r1, #74	; 0x4a
 8003f92:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003f96:	f7fc fdc9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003fa0:	f7fc fdc4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003fa4:	215c      	movs	r1, #92	; 0x5c
 8003fa6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003faa:	f7fc fdbf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003fb4:	f7fc fdba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003fb8:	2181      	movs	r1, #129	; 0x81
 8003fba:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003fbe:	f7fc fdb5 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003fc8:	f7fc fdb0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003fcc:	21a6      	movs	r1, #166	; 0xa6
 8003fce:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003fd2:	f7fc fdab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003fdc:	f7fc fda6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003fe0:	21e5      	movs	r1, #229	; 0xe5
 8003fe2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003fe6:	f7fc fda1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003fea:	2101      	movs	r1, #1
 8003fec:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003ff0:	f7fc fd9c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003ff4:	2113      	movs	r1, #19
 8003ff6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003ffa:	f7fc fd97 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003ffe:	2101      	movs	r1, #1
 8004000:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004004:	f7fc fd92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004008:	2154      	movs	r1, #84	; 0x54
 800400a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800400e:	f7fc fd8d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004012:	2101      	movs	r1, #1
 8004014:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004018:	f7fc fd88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800401c:	2182      	movs	r1, #130	; 0x82
 800401e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004022:	f7fc fd83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004026:	2101      	movs	r1, #1
 8004028:	f24d 5016 	movw	r0, #54550	; 0xd516
 800402c:	f7fc fd7e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004030:	21ca      	movs	r1, #202	; 0xca
 8004032:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004036:	f7fc fd79 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800403a:	2102      	movs	r1, #2
 800403c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004040:	f7fc fd74 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004044:	2100      	movs	r1, #0
 8004046:	f24d 5019 	movw	r0, #54553	; 0xd519
 800404a:	f7fc fd6f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800404e:	2102      	movs	r1, #2
 8004050:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004054:	f7fc fd6a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004058:	2101      	movs	r1, #1
 800405a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800405e:	f7fc fd65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004062:	2102      	movs	r1, #2
 8004064:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004068:	f7fc fd60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800406c:	2134      	movs	r1, #52	; 0x34
 800406e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8004072:	f7fc fd5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8004076:	2102      	movs	r1, #2
 8004078:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800407c:	f7fc fd56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004080:	2167      	movs	r1, #103	; 0x67
 8004082:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004086:	f7fc fd51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800408a:	2102      	movs	r1, #2
 800408c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004090:	f7fc fd4c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8004094:	2184      	movs	r1, #132	; 0x84
 8004096:	f24d 5021 	movw	r0, #54561	; 0xd521
 800409a:	f7fc fd47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800409e:	2102      	movs	r1, #2
 80040a0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80040a4:	f7fc fd42 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80040a8:	21a4      	movs	r1, #164	; 0xa4
 80040aa:	f24d 5023 	movw	r0, #54563	; 0xd523
 80040ae:	f7fc fd3d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80040b2:	2102      	movs	r1, #2
 80040b4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80040b8:	f7fc fd38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80040bc:	21b7      	movs	r1, #183	; 0xb7
 80040be:	f24d 5025 	movw	r0, #54565	; 0xd525
 80040c2:	f7fc fd33 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80040c6:	2102      	movs	r1, #2
 80040c8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80040cc:	f7fc fd2e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80040d0:	21cf      	movs	r1, #207	; 0xcf
 80040d2:	f24d 5027 	movw	r0, #54567	; 0xd527
 80040d6:	f7fc fd29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80040da:	2102      	movs	r1, #2
 80040dc:	f24d 5028 	movw	r0, #54568	; 0xd528
 80040e0:	f7fc fd24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80040e4:	21de      	movs	r1, #222	; 0xde
 80040e6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80040ea:	f7fc fd1f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80040ee:	2102      	movs	r1, #2
 80040f0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80040f4:	f7fc fd1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80040f8:	21f2      	movs	r1, #242	; 0xf2
 80040fa:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80040fe:	f7fc fd15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004102:	2102      	movs	r1, #2
 8004104:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004108:	f7fc fd10 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800410c:	21fe      	movs	r1, #254	; 0xfe
 800410e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004112:	f7fc fd0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004116:	2103      	movs	r1, #3
 8004118:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800411c:	f7fc fd06 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004120:	2110      	movs	r1, #16
 8004122:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004126:	f7fc fd01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800412a:	2103      	movs	r1, #3
 800412c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004130:	f7fc fcfc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004134:	2133      	movs	r1, #51	; 0x33
 8004136:	f24d 5031 	movw	r0, #54577	; 0xd531
 800413a:	f7fc fcf7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800413e:	2103      	movs	r1, #3
 8004140:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004144:	f7fc fcf2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004148:	216d      	movs	r1, #109	; 0x6d
 800414a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800414e:	f7fc fced 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004152:	2100      	movs	r1, #0
 8004154:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004158:	f7fc fce8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800415c:	2133      	movs	r1, #51	; 0x33
 800415e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004162:	f7fc fce3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004166:	2100      	movs	r1, #0
 8004168:	f24d 6002 	movw	r0, #54786	; 0xd602
 800416c:	f7fc fcde 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004170:	2134      	movs	r1, #52	; 0x34
 8004172:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004176:	f7fc fcd9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800417a:	2100      	movs	r1, #0
 800417c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004180:	f7fc fcd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004184:	213a      	movs	r1, #58	; 0x3a
 8004186:	f24d 6005 	movw	r0, #54789	; 0xd605
 800418a:	f7fc fccf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800418e:	2100      	movs	r1, #0
 8004190:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004194:	f7fc fcca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004198:	214a      	movs	r1, #74	; 0x4a
 800419a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800419e:	f7fc fcc5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80041a2:	2100      	movs	r1, #0
 80041a4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80041a8:	f7fc fcc0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80041ac:	215c      	movs	r1, #92	; 0x5c
 80041ae:	f24d 6009 	movw	r0, #54793	; 0xd609
 80041b2:	f7fc fcbb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80041b6:	2100      	movs	r1, #0
 80041b8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80041bc:	f7fc fcb6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80041c0:	2181      	movs	r1, #129	; 0x81
 80041c2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80041c6:	f7fc fcb1 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80041ca:	2100      	movs	r1, #0
 80041cc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80041d0:	f7fc fcac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80041d4:	21a6      	movs	r1, #166	; 0xa6
 80041d6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80041da:	f7fc fca7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80041de:	2100      	movs	r1, #0
 80041e0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80041e4:	f7fc fca2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80041e8:	21e5      	movs	r1, #229	; 0xe5
 80041ea:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80041ee:	f7fc fc9d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80041f2:	2101      	movs	r1, #1
 80041f4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80041f8:	f7fc fc98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80041fc:	2113      	movs	r1, #19
 80041fe:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004202:	f7fc fc93 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004206:	2101      	movs	r1, #1
 8004208:	f24d 6012 	movw	r0, #54802	; 0xd612
 800420c:	f7fc fc8e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004210:	2154      	movs	r1, #84	; 0x54
 8004212:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004216:	f7fc fc89 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800421a:	2101      	movs	r1, #1
 800421c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004220:	f7fc fc84 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004224:	2182      	movs	r1, #130	; 0x82
 8004226:	f24d 6015 	movw	r0, #54805	; 0xd615
 800422a:	f7fc fc7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800422e:	2101      	movs	r1, #1
 8004230:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004234:	f7fc fc7a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004238:	21ca      	movs	r1, #202	; 0xca
 800423a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800423e:	f7fc fc75 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004242:	2102      	movs	r1, #2
 8004244:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004248:	f7fc fc70 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800424c:	2100      	movs	r1, #0
 800424e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004252:	f7fc fc6b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004256:	2102      	movs	r1, #2
 8004258:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800425c:	f7fc fc66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004260:	2101      	movs	r1, #1
 8004262:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004266:	f7fc fc61 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800426a:	2102      	movs	r1, #2
 800426c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004270:	f7fc fc5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004274:	2134      	movs	r1, #52	; 0x34
 8004276:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800427a:	f7fc fc57 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800427e:	2102      	movs	r1, #2
 8004280:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004284:	f7fc fc52 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004288:	2167      	movs	r1, #103	; 0x67
 800428a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800428e:	f7fc fc4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004292:	2102      	movs	r1, #2
 8004294:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004298:	f7fc fc48 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800429c:	2184      	movs	r1, #132	; 0x84
 800429e:	f24d 6021 	movw	r0, #54817	; 0xd621
 80042a2:	f7fc fc43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80042a6:	2102      	movs	r1, #2
 80042a8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80042ac:	f7fc fc3e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80042b0:	21a4      	movs	r1, #164	; 0xa4
 80042b2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80042b6:	f7fc fc39 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80042ba:	2102      	movs	r1, #2
 80042bc:	f24d 6024 	movw	r0, #54820	; 0xd624
 80042c0:	f7fc fc34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80042c4:	21b7      	movs	r1, #183	; 0xb7
 80042c6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80042ca:	f7fc fc2f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80042ce:	2102      	movs	r1, #2
 80042d0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80042d4:	f7fc fc2a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80042d8:	21cf      	movs	r1, #207	; 0xcf
 80042da:	f24d 6027 	movw	r0, #54823	; 0xd627
 80042de:	f7fc fc25 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80042e2:	2102      	movs	r1, #2
 80042e4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80042e8:	f7fc fc20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80042ec:	21de      	movs	r1, #222	; 0xde
 80042ee:	f24d 6029 	movw	r0, #54825	; 0xd629
 80042f2:	f7fc fc1b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80042f6:	2102      	movs	r1, #2
 80042f8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80042fc:	f7fc fc16 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004300:	21f2      	movs	r1, #242	; 0xf2
 8004302:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004306:	f7fc fc11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800430a:	2102      	movs	r1, #2
 800430c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004310:	f7fc fc0c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004314:	21fe      	movs	r1, #254	; 0xfe
 8004316:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800431a:	f7fc fc07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800431e:	2103      	movs	r1, #3
 8004320:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004324:	f7fc fc02 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004328:	2110      	movs	r1, #16
 800432a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800432e:	f7fc fbfd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004332:	2103      	movs	r1, #3
 8004334:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004338:	f7fc fbf8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800433c:	2133      	movs	r1, #51	; 0x33
 800433e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004342:	f7fc fbf3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004346:	2103      	movs	r1, #3
 8004348:	f24d 6032 	movw	r0, #54834	; 0xd632
 800434c:	f7fc fbee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004350:	216d      	movs	r1, #109	; 0x6d
 8004352:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004356:	f7fc fbe9 	bl	8000b2c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800435a:	2155      	movs	r1, #85	; 0x55
 800435c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004360:	f7fc fbe4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004364:	21aa      	movs	r1, #170	; 0xaa
 8004366:	f24f 0001 	movw	r0, #61441	; 0xf001
 800436a:	f7fc fbdf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800436e:	2152      	movs	r1, #82	; 0x52
 8004370:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004374:	f7fc fbda 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004378:	2108      	movs	r1, #8
 800437a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800437e:	f7fc fbd5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004382:	2100      	movs	r1, #0
 8004384:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004388:	f7fc fbd0 	bl	8000b2c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800438c:	21cc      	movs	r1, #204	; 0xcc
 800438e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004392:	f7fc fbcb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004396:	2100      	movs	r1, #0
 8004398:	f24b 1001 	movw	r0, #45313	; 0xb101
 800439c:	f7fc fbc6 	bl	8000b2c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80043a0:	2105      	movs	r1, #5
 80043a2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80043a6:	f7fc fbc1 	bl	8000b2c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80043aa:	2170      	movs	r1, #112	; 0x70
 80043ac:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80043b0:	f7fc fbbc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80043b4:	2170      	movs	r1, #112	; 0x70
 80043b6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80043ba:	f7fc fbb7 	bl	8000b2c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80043be:	2101      	movs	r1, #1
 80043c0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80043c4:	f7fc fbb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80043c8:	2103      	movs	r1, #3
 80043ca:	f64b 0001 	movw	r0, #47105	; 0xb801
 80043ce:	f7fc fbad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80043d2:	2103      	movs	r1, #3
 80043d4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80043d8:	f7fc fba8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80043dc:	2103      	movs	r1, #3
 80043de:	f64b 0003 	movw	r0, #47107	; 0xb803
 80043e2:	f7fc fba3 	bl	8000b2c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80043ec:	f7fc fb9e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80043f0:	2100      	movs	r1, #0
 80043f2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80043f6:	f7fc fb99 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80043fa:	2100      	movs	r1, #0
 80043fc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004400:	f7fc fb94 	bl	8000b2c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004404:	21d0      	movs	r1, #208	; 0xd0
 8004406:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800440a:	f7fc fb8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800440e:	2102      	movs	r1, #2
 8004410:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004414:	f7fc fb8a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004418:	2150      	movs	r1, #80	; 0x50
 800441a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800441e:	f7fc fb85 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004422:	2150      	movs	r1, #80	; 0x50
 8004424:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004428:	f7fc fb80 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800442c:	2150      	movs	r1, #80	; 0x50
 800442e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004432:	f7fc fb7b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004436:	2100      	movs	r1, #0
 8004438:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800443c:	f7fc fb76 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004440:	2155      	movs	r1, #85	; 0x55
 8004442:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004446:	f7fc fb71 	bl	8000b2c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800444a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800444e:	f7fc fae1 	bl	8000a14 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004452:	2001      	movs	r0, #1
 8004454:	f003 f9e6 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004458:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800445c:	f7fc fada 	bl	8000a14 <LCD_WR_REG>
 8004460:	f001 bd18 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004464:	4bec      	ldr	r3, [pc, #944]	; (8004818 <LCD_Init+0x27b8>)
 8004466:	889b      	ldrh	r3, [r3, #4]
 8004468:	f249 3225 	movw	r2, #37669	; 0x9325
 800446c:	4293      	cmp	r3, r2
 800446e:	f040 80d7 	bne.w	8004620 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004472:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004476:	20e5      	movs	r0, #229	; 0xe5
 8004478:	f7fc fb58 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800447c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004480:	2001      	movs	r0, #1
 8004482:	f7fc fb53 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004486:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800448a:	2002      	movs	r0, #2
 800448c:	f7fc fb4e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004490:	f241 0130 	movw	r1, #4144	; 0x1030
 8004494:	2003      	movs	r0, #3
 8004496:	f7fc fb49 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800449a:	2100      	movs	r1, #0
 800449c:	2004      	movs	r0, #4
 800449e:	f7fc fb45 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80044a2:	f240 2102 	movw	r1, #514	; 0x202
 80044a6:	2008      	movs	r0, #8
 80044a8:	f7fc fb40 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80044ac:	2100      	movs	r1, #0
 80044ae:	2009      	movs	r0, #9
 80044b0:	f7fc fb3c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80044b4:	2100      	movs	r1, #0
 80044b6:	200a      	movs	r0, #10
 80044b8:	f7fc fb38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80044bc:	2100      	movs	r1, #0
 80044be:	200c      	movs	r0, #12
 80044c0:	f7fc fb34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80044c4:	2100      	movs	r1, #0
 80044c6:	200d      	movs	r0, #13
 80044c8:	f7fc fb30 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80044cc:	2100      	movs	r1, #0
 80044ce:	200f      	movs	r0, #15
 80044d0:	f7fc fb2c 	bl	8000b2c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80044d4:	2100      	movs	r1, #0
 80044d6:	2010      	movs	r0, #16
 80044d8:	f7fc fb28 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80044dc:	2107      	movs	r1, #7
 80044de:	2011      	movs	r0, #17
 80044e0:	f7fc fb24 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80044e4:	2100      	movs	r1, #0
 80044e6:	2012      	movs	r0, #18
 80044e8:	f7fc fb20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80044ec:	2100      	movs	r1, #0
 80044ee:	2013      	movs	r0, #19
 80044f0:	f7fc fb1c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80044f4:	2100      	movs	r1, #0
 80044f6:	2007      	movs	r0, #7
 80044f8:	f7fc fb18 	bl	8000b2c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80044fc:	f241 6190 	movw	r1, #5776	; 0x1690
 8004500:	2010      	movs	r0, #16
 8004502:	f7fc fb13 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004506:	f240 2127 	movw	r1, #551	; 0x227
 800450a:	2011      	movs	r0, #17
 800450c:	f7fc fb0e 	bl	8000b2c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004510:	219d      	movs	r1, #157	; 0x9d
 8004512:	2012      	movs	r0, #18
 8004514:	f7fc fb0a 	bl	8000b2c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004518:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800451c:	2013      	movs	r0, #19
 800451e:	f7fc fb05 	bl	8000b2c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004522:	2125      	movs	r1, #37	; 0x25
 8004524:	2029      	movs	r0, #41	; 0x29
 8004526:	f7fc fb01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800452a:	210d      	movs	r1, #13
 800452c:	202b      	movs	r0, #43	; 0x2b
 800452e:	f7fc fafd 	bl	8000b2c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004532:	2107      	movs	r1, #7
 8004534:	2030      	movs	r0, #48	; 0x30
 8004536:	f7fc faf9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800453a:	f240 3103 	movw	r1, #771	; 0x303
 800453e:	2031      	movs	r0, #49	; 0x31
 8004540:	f7fc faf4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004544:	2103      	movs	r1, #3
 8004546:	2032      	movs	r0, #50	; 0x32
 8004548:	f7fc faf0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800454c:	f240 2106 	movw	r1, #518	; 0x206
 8004550:	2035      	movs	r0, #53	; 0x35
 8004552:	f7fc faeb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004556:	2108      	movs	r1, #8
 8004558:	2036      	movs	r0, #54	; 0x36
 800455a:	f7fc fae7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800455e:	f240 4106 	movw	r1, #1030	; 0x406
 8004562:	2037      	movs	r0, #55	; 0x37
 8004564:	f7fc fae2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004568:	f44f 7141 	mov.w	r1, #772	; 0x304
 800456c:	2038      	movs	r0, #56	; 0x38
 800456e:	f7fc fadd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004572:	2107      	movs	r1, #7
 8004574:	2039      	movs	r0, #57	; 0x39
 8004576:	f7fc fad9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800457a:	f240 6102 	movw	r1, #1538	; 0x602
 800457e:	203c      	movs	r0, #60	; 0x3c
 8004580:	f7fc fad4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004584:	2108      	movs	r1, #8
 8004586:	203d      	movs	r0, #61	; 0x3d
 8004588:	f7fc fad0 	bl	8000b2c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800458c:	2100      	movs	r1, #0
 800458e:	2050      	movs	r0, #80	; 0x50
 8004590:	f7fc facc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004594:	21ef      	movs	r1, #239	; 0xef
 8004596:	2051      	movs	r0, #81	; 0x51
 8004598:	f7fc fac8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800459c:	2100      	movs	r1, #0
 800459e:	2052      	movs	r0, #82	; 0x52
 80045a0:	f7fc fac4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80045a4:	f240 113f 	movw	r1, #319	; 0x13f
 80045a8:	2053      	movs	r0, #83	; 0x53
 80045aa:	f7fc fabf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80045ae:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80045b2:	2060      	movs	r0, #96	; 0x60
 80045b4:	f7fc faba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80045b8:	2101      	movs	r1, #1
 80045ba:	2061      	movs	r0, #97	; 0x61
 80045bc:	f7fc fab6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80045c0:	2100      	movs	r1, #0
 80045c2:	206a      	movs	r0, #106	; 0x6a
 80045c4:	f7fc fab2 	bl	8000b2c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80045c8:	2100      	movs	r1, #0
 80045ca:	2080      	movs	r0, #128	; 0x80
 80045cc:	f7fc faae 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80045d0:	2100      	movs	r1, #0
 80045d2:	2081      	movs	r0, #129	; 0x81
 80045d4:	f7fc faaa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80045d8:	2100      	movs	r1, #0
 80045da:	2082      	movs	r0, #130	; 0x82
 80045dc:	f7fc faa6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80045e0:	2100      	movs	r1, #0
 80045e2:	2083      	movs	r0, #131	; 0x83
 80045e4:	f7fc faa2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045e8:	2100      	movs	r1, #0
 80045ea:	2084      	movs	r0, #132	; 0x84
 80045ec:	f7fc fa9e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045f0:	2100      	movs	r1, #0
 80045f2:	2085      	movs	r0, #133	; 0x85
 80045f4:	f7fc fa9a 	bl	8000b2c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80045f8:	2110      	movs	r1, #16
 80045fa:	2090      	movs	r0, #144	; 0x90
 80045fc:	f7fc fa96 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004600:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004604:	2092      	movs	r0, #146	; 0x92
 8004606:	f7fc fa91 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800460a:	f240 1133 	movw	r1, #307	; 0x133
 800460e:	2007      	movs	r0, #7
 8004610:	f7fc fa8c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004614:	2122      	movs	r1, #34	; 0x22
 8004616:	2000      	movs	r0, #0
 8004618:	f7fc fa88 	bl	8000b2c <LCD_WriteReg>
 800461c:	f001 bc3a 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004620:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <LCD_Init+0x27b8>)
 8004622:	889b      	ldrh	r3, [r3, #4]
 8004624:	f249 3228 	movw	r2, #37672	; 0x9328
 8004628:	4293      	cmp	r3, r2
 800462a:	f040 80f7 	bne.w	800481c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800462e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004632:	20ec      	movs	r0, #236	; 0xec
 8004634:	f7fc fa7a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004638:	f241 2134 	movw	r1, #4660	; 0x1234
 800463c:	20ef      	movs	r0, #239	; 0xef
 800463e:	f7fc fa75 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004646:	2001      	movs	r0, #1
 8004648:	f7fc fa70 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800464c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004650:	2002      	movs	r0, #2
 8004652:	f7fc fa6b 	bl	8000b2c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004656:	f241 0130 	movw	r1, #4144	; 0x1030
 800465a:	2003      	movs	r0, #3
 800465c:	f7fc fa66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2004      	movs	r0, #4
 8004664:	f7fc fa62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004668:	f240 2102 	movw	r1, #514	; 0x202
 800466c:	2008      	movs	r0, #8
 800466e:	f7fc fa5d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004672:	2100      	movs	r1, #0
 8004674:	2009      	movs	r0, #9
 8004676:	f7fc fa59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800467a:	2100      	movs	r1, #0
 800467c:	200a      	movs	r0, #10
 800467e:	f7fc fa55 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004682:	2101      	movs	r1, #1
 8004684:	200c      	movs	r0, #12
 8004686:	f7fc fa51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800468a:	2100      	movs	r1, #0
 800468c:	200d      	movs	r0, #13
 800468e:	f7fc fa4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004692:	2100      	movs	r1, #0
 8004694:	200f      	movs	r0, #15
 8004696:	f7fc fa49 	bl	8000b2c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800469a:	2100      	movs	r1, #0
 800469c:	2010      	movs	r0, #16
 800469e:	f7fc fa45 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80046a2:	2107      	movs	r1, #7
 80046a4:	2011      	movs	r0, #17
 80046a6:	f7fc fa41 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80046aa:	2100      	movs	r1, #0
 80046ac:	2012      	movs	r0, #18
 80046ae:	f7fc fa3d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80046b2:	2100      	movs	r1, #0
 80046b4:	2013      	movs	r0, #19
 80046b6:	f7fc fa39 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80046ba:	2101      	movs	r1, #1
 80046bc:	2007      	movs	r0, #7
 80046be:	f7fc fa35 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 80046c2:	2032      	movs	r0, #50	; 0x32
 80046c4:	f003 f8ae 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80046c8:	f241 4190 	movw	r1, #5264	; 0x1490
 80046cc:	2010      	movs	r0, #16
 80046ce:	f7fc fa2d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80046d2:	f240 2127 	movw	r1, #551	; 0x227
 80046d6:	2011      	movs	r0, #17
 80046d8:	f7fc fa28 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 80046dc:	2032      	movs	r0, #50	; 0x32
 80046de:	f003 f8a1 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80046e2:	218a      	movs	r1, #138	; 0x8a
 80046e4:	2012      	movs	r0, #18
 80046e6:	f7fc fa21 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 80046ea:	2032      	movs	r0, #50	; 0x32
 80046ec:	f003 f89a 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80046f0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80046f4:	2013      	movs	r0, #19
 80046f6:	f7fc fa19 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80046fa:	2106      	movs	r1, #6
 80046fc:	2029      	movs	r0, #41	; 0x29
 80046fe:	f7fc fa15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004702:	210d      	movs	r1, #13
 8004704:	202b      	movs	r0, #43	; 0x2b
 8004706:	f7fc fa11 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800470a:	2032      	movs	r0, #50	; 0x32
 800470c:	f003 f88a 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004710:	2100      	movs	r1, #0
 8004712:	2020      	movs	r0, #32
 8004714:	f7fc fa0a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004718:	2100      	movs	r1, #0
 800471a:	2021      	movs	r0, #33	; 0x21
 800471c:	f7fc fa06 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004720:	2032      	movs	r0, #50	; 0x32
 8004722:	f003 f87f 	bl	8007824 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004726:	2100      	movs	r1, #0
 8004728:	2030      	movs	r0, #48	; 0x30
 800472a:	f7fc f9ff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800472e:	f240 6104 	movw	r1, #1540	; 0x604
 8004732:	2031      	movs	r0, #49	; 0x31
 8004734:	f7fc f9fa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004738:	f240 3105 	movw	r1, #773	; 0x305
 800473c:	2032      	movs	r0, #50	; 0x32
 800473e:	f7fc f9f5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	2035      	movs	r0, #53	; 0x35
 8004746:	f7fc f9f1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800474a:	f640 4109 	movw	r1, #3081	; 0xc09
 800474e:	2036      	movs	r0, #54	; 0x36
 8004750:	f7fc f9ec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004754:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004758:	2037      	movs	r0, #55	; 0x37
 800475a:	f7fc f9e7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800475e:	f240 3101 	movw	r1, #769	; 0x301
 8004762:	2038      	movs	r0, #56	; 0x38
 8004764:	f7fc f9e2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004768:	f240 7107 	movw	r1, #1799	; 0x707
 800476c:	2039      	movs	r0, #57	; 0x39
 800476e:	f7fc f9dd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004772:	2100      	movs	r1, #0
 8004774:	203c      	movs	r0, #60	; 0x3c
 8004776:	f7fc f9d9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800477a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800477e:	203d      	movs	r0, #61	; 0x3d
 8004780:	f7fc f9d4 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004784:	2032      	movs	r0, #50	; 0x32
 8004786:	f003 f84d 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800478a:	2100      	movs	r1, #0
 800478c:	2050      	movs	r0, #80	; 0x50
 800478e:	f7fc f9cd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004792:	21ef      	movs	r1, #239	; 0xef
 8004794:	2051      	movs	r0, #81	; 0x51
 8004796:	f7fc f9c9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800479a:	2100      	movs	r1, #0
 800479c:	2052      	movs	r0, #82	; 0x52
 800479e:	f7fc f9c5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80047a2:	f240 113f 	movw	r1, #319	; 0x13f
 80047a6:	2053      	movs	r0, #83	; 0x53
 80047a8:	f7fc f9c0 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80047ac:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80047b0:	2060      	movs	r0, #96	; 0x60
 80047b2:	f7fc f9bb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80047b6:	2101      	movs	r1, #1
 80047b8:	2061      	movs	r0, #97	; 0x61
 80047ba:	f7fc f9b7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80047be:	2100      	movs	r1, #0
 80047c0:	206a      	movs	r0, #106	; 0x6a
 80047c2:	f7fc f9b3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80047c6:	2100      	movs	r1, #0
 80047c8:	2080      	movs	r0, #128	; 0x80
 80047ca:	f7fc f9af 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80047ce:	2100      	movs	r1, #0
 80047d0:	2081      	movs	r0, #129	; 0x81
 80047d2:	f7fc f9ab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80047d6:	2100      	movs	r1, #0
 80047d8:	2082      	movs	r0, #130	; 0x82
 80047da:	f7fc f9a7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80047de:	2100      	movs	r1, #0
 80047e0:	2083      	movs	r0, #131	; 0x83
 80047e2:	f7fc f9a3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80047e6:	2100      	movs	r1, #0
 80047e8:	2084      	movs	r0, #132	; 0x84
 80047ea:	f7fc f99f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80047ee:	2100      	movs	r1, #0
 80047f0:	2085      	movs	r0, #133	; 0x85
 80047f2:	f7fc f99b 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80047f6:	2110      	movs	r1, #16
 80047f8:	2090      	movs	r0, #144	; 0x90
 80047fa:	f7fc f997 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80047fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004802:	2092      	movs	r0, #146	; 0x92
 8004804:	f7fc f992 	bl	8000b2c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004808:	f240 1133 	movw	r1, #307	; 0x133
 800480c:	2007      	movs	r0, #7
 800480e:	f7fc f98d 	bl	8000b2c <LCD_WriteReg>
 8004812:	f001 bb3f 	b.w	8005e94 <LCD_Init+0x3e34>
 8004816:	bf00      	nop
 8004818:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0x9320) //测试OK.
 800481c:	4bce      	ldr	r3, [pc, #824]	; (8004b58 <LCD_Init+0x2af8>)
 800481e:	889b      	ldrh	r3, [r3, #4]
 8004820:	f249 3220 	movw	r2, #37664	; 0x9320
 8004824:	4293      	cmp	r3, r2
 8004826:	f040 80ad 	bne.w	8004984 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800482a:	2100      	movs	r1, #0
 800482c:	2000      	movs	r0, #0
 800482e:	f7fc f97d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004836:	2001      	movs	r0, #1
 8004838:	f7fc f978 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800483c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004840:	2002      	movs	r0, #2
 8004842:	f7fc f973 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004846:	f241 0130 	movw	r1, #4144	; 0x1030
 800484a:	2003      	movs	r0, #3
 800484c:	f7fc f96e 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004850:	2100      	movs	r1, #0
 8004852:	2004      	movs	r0, #4
 8004854:	f7fc f96a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004858:	f240 2102 	movw	r1, #514	; 0x202
 800485c:	2008      	movs	r0, #8
 800485e:	f7fc f965 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004862:	2100      	movs	r1, #0
 8004864:	2009      	movs	r0, #9
 8004866:	f7fc f961 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800486a:	2100      	movs	r1, #0
 800486c:	200a      	movs	r0, #10
 800486e:	f7fc f95d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004872:	2101      	movs	r1, #1
 8004874:	200c      	movs	r0, #12
 8004876:	f7fc f959 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800487a:	2100      	movs	r1, #0
 800487c:	200d      	movs	r0, #13
 800487e:	f7fc f955 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004882:	2100      	movs	r1, #0
 8004884:	200f      	movs	r0, #15
 8004886:	f7fc f951 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800488a:	2032      	movs	r0, #50	; 0x32
 800488c:	f002 ffca 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004890:	f240 1101 	movw	r1, #257	; 0x101
 8004894:	2007      	movs	r0, #7
 8004896:	f7fc f949 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 800489a:	2032      	movs	r0, #50	; 0x32
 800489c:	f002 ffc2 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80048a0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80048a4:	2010      	movs	r0, #16
 80048a6:	f7fc f941 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80048aa:	2107      	movs	r1, #7
 80048ac:	2011      	movs	r0, #17
 80048ae:	f7fc f93d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80048b2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048b6:	2012      	movs	r0, #18
 80048b8:	f7fc f938 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80048bc:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80048c0:	2013      	movs	r0, #19
 80048c2:	f7fc f933 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80048c6:	2100      	movs	r1, #0
 80048c8:	2029      	movs	r0, #41	; 0x29
 80048ca:	f7fc f92f 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80048ce:	f244 0110 	movw	r1, #16400	; 0x4010
 80048d2:	202b      	movs	r0, #43	; 0x2b
 80048d4:	f7fc f92a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80048d8:	2100      	movs	r1, #0
 80048da:	2050      	movs	r0, #80	; 0x50
 80048dc:	f7fc f926 	bl	8000b2c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80048e0:	21ef      	movs	r1, #239	; 0xef
 80048e2:	2051      	movs	r0, #81	; 0x51
 80048e4:	f7fc f922 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80048e8:	2100      	movs	r1, #0
 80048ea:	2052      	movs	r0, #82	; 0x52
 80048ec:	f7fc f91e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80048f0:	f240 113f 	movw	r1, #319	; 0x13f
 80048f4:	2053      	movs	r0, #83	; 0x53
 80048f6:	f7fc f919 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80048fa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80048fe:	2060      	movs	r0, #96	; 0x60
 8004900:	f7fc f914 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004904:	2101      	movs	r1, #1
 8004906:	2061      	movs	r0, #97	; 0x61
 8004908:	f7fc f910 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 800490c:	2100      	movs	r1, #0
 800490e:	206a      	movs	r0, #106	; 0x6a
 8004910:	f7fc f90c 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004914:	2100      	movs	r1, #0
 8004916:	2080      	movs	r0, #128	; 0x80
 8004918:	f7fc f908 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800491c:	2100      	movs	r1, #0
 800491e:	2081      	movs	r0, #129	; 0x81
 8004920:	f7fc f904 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004924:	2100      	movs	r1, #0
 8004926:	2082      	movs	r0, #130	; 0x82
 8004928:	f7fc f900 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800492c:	2100      	movs	r1, #0
 800492e:	2083      	movs	r0, #131	; 0x83
 8004930:	f7fc f8fc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004934:	2100      	movs	r1, #0
 8004936:	2084      	movs	r0, #132	; 0x84
 8004938:	f7fc f8f8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800493c:	2100      	movs	r1, #0
 800493e:	2085      	movs	r0, #133	; 0x85
 8004940:	f7fc f8f4 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004944:	2110      	movs	r1, #16
 8004946:	2090      	movs	r0, #144	; 0x90
 8004948:	f7fc f8f0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800494c:	2100      	movs	r1, #0
 800494e:	2092      	movs	r0, #146	; 0x92
 8004950:	f7fc f8ec 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004954:	2101      	movs	r1, #1
 8004956:	2093      	movs	r0, #147	; 0x93
 8004958:	f7fc f8e8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800495c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004960:	2095      	movs	r0, #149	; 0x95
 8004962:	f7fc f8e3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004966:	2100      	movs	r1, #0
 8004968:	2097      	movs	r0, #151	; 0x97
 800496a:	f7fc f8df 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800496e:	2100      	movs	r1, #0
 8004970:	2098      	movs	r0, #152	; 0x98
 8004972:	f7fc f8db 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004976:	f240 1173 	movw	r1, #371	; 0x173
 800497a:	2007      	movs	r0, #7
 800497c:	f7fc f8d6 	bl	8000b2c <LCD_WriteReg>
 8004980:	f001 ba88 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004984:	4b74      	ldr	r3, [pc, #464]	; (8004b58 <LCD_Init+0x2af8>)
 8004986:	889b      	ldrh	r3, [r3, #4]
 8004988:	f249 3231 	movw	r2, #37681	; 0x9331
 800498c:	4293      	cmp	r3, r2
 800498e:	f040 80e5 	bne.w	8004b5c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004992:	f241 0114 	movw	r1, #4116	; 0x1014
 8004996:	20e7      	movs	r0, #231	; 0xe7
 8004998:	f7fc f8c8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800499c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049a0:	2001      	movs	r0, #1
 80049a2:	f7fc f8c3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80049a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049aa:	2002      	movs	r0, #2
 80049ac:	f7fc f8be 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80049b0:	f241 0138 	movw	r1, #4152	; 0x1038
 80049b4:	2003      	movs	r0, #3
 80049b6:	f7fc f8b9 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80049ba:	f240 2102 	movw	r1, #514	; 0x202
 80049be:	2008      	movs	r0, #8
 80049c0:	f7fc f8b4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80049c4:	2100      	movs	r1, #0
 80049c6:	2009      	movs	r0, #9
 80049c8:	f7fc f8b0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80049cc:	2100      	movs	r1, #0
 80049ce:	200a      	movs	r0, #10
 80049d0:	f7fc f8ac 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80049d4:	2100      	movs	r1, #0
 80049d6:	200c      	movs	r0, #12
 80049d8:	f7fc f8a8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80049dc:	2100      	movs	r1, #0
 80049de:	200d      	movs	r0, #13
 80049e0:	f7fc f8a4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80049e4:	2100      	movs	r1, #0
 80049e6:	200f      	movs	r0, #15
 80049e8:	f7fc f8a0 	bl	8000b2c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80049ec:	2100      	movs	r1, #0
 80049ee:	2010      	movs	r0, #16
 80049f0:	f7fc f89c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80049f4:	2107      	movs	r1, #7
 80049f6:	2011      	movs	r0, #17
 80049f8:	f7fc f898 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80049fc:	2100      	movs	r1, #0
 80049fe:	2012      	movs	r0, #18
 8004a00:	f7fc f894 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004a04:	2100      	movs	r1, #0
 8004a06:	2013      	movs	r0, #19
 8004a08:	f7fc f890 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004a0c:	20c8      	movs	r0, #200	; 0xc8
 8004a0e:	f002 ff09 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004a12:	f241 6190 	movw	r1, #5776	; 0x1690
 8004a16:	2010      	movs	r0, #16
 8004a18:	f7fc f888 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004a1c:	f240 2127 	movw	r1, #551	; 0x227
 8004a20:	2011      	movs	r0, #17
 8004a22:	f7fc f883 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004a26:	2032      	movs	r0, #50	; 0x32
 8004a28:	f002 fefc 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004a2c:	210c      	movs	r1, #12
 8004a2e:	2012      	movs	r0, #18
 8004a30:	f7fc f87c 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004a34:	2032      	movs	r0, #50	; 0x32
 8004a36:	f002 fef5 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a3e:	2013      	movs	r0, #19
 8004a40:	f7fc f874 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004a44:	2111      	movs	r1, #17
 8004a46:	2029      	movs	r0, #41	; 0x29
 8004a48:	f7fc f870 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004a4c:	210b      	movs	r1, #11
 8004a4e:	202b      	movs	r0, #43	; 0x2b
 8004a50:	f7fc f86c 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004a54:	2032      	movs	r0, #50	; 0x32
 8004a56:	f002 fee5 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2020      	movs	r0, #32
 8004a5e:	f7fc f865 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004a62:	f240 113f 	movw	r1, #319	; 0x13f
 8004a66:	2021      	movs	r0, #33	; 0x21
 8004a68:	f7fc f860 	bl	8000b2c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2030      	movs	r0, #48	; 0x30
 8004a70:	f7fc f85c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004a74:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004a78:	2031      	movs	r0, #49	; 0x31
 8004a7a:	f7fc f857 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	2032      	movs	r0, #50	; 0x32
 8004a82:	f7fc f853 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004a86:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004a8a:	2035      	movs	r0, #53	; 0x35
 8004a8c:	f7fc f84e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004a90:	f241 610a 	movw	r1, #5642	; 0x160a
 8004a94:	2036      	movs	r0, #54	; 0x36
 8004a96:	f7fc f849 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004a9a:	f240 7107 	movw	r1, #1799	; 0x707
 8004a9e:	2037      	movs	r0, #55	; 0x37
 8004aa0:	f7fc f844 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004aa4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004aa8:	2038      	movs	r0, #56	; 0x38
 8004aaa:	f7fc f83f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004aae:	f240 7107 	movw	r1, #1799	; 0x707
 8004ab2:	2039      	movs	r0, #57	; 0x39
 8004ab4:	f7fc f83a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004ab8:	f240 4102 	movw	r1, #1026	; 0x402
 8004abc:	203c      	movs	r0, #60	; 0x3c
 8004abe:	f7fc f835 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004ac2:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004ac6:	203d      	movs	r0, #61	; 0x3d
 8004ac8:	f7fc f830 	bl	8000b2c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004acc:	2100      	movs	r1, #0
 8004ace:	2050      	movs	r0, #80	; 0x50
 8004ad0:	f7fc f82c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004ad4:	21ef      	movs	r1, #239	; 0xef
 8004ad6:	2051      	movs	r0, #81	; 0x51
 8004ad8:	f7fc f828 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004adc:	2100      	movs	r1, #0
 8004ade:	2052      	movs	r0, #82	; 0x52
 8004ae0:	f7fc f824 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004ae4:	f240 113f 	movw	r1, #319	; 0x13f
 8004ae8:	2053      	movs	r0, #83	; 0x53
 8004aea:	f7fc f81f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004aee:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004af2:	2060      	movs	r0, #96	; 0x60
 8004af4:	f7fc f81a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004af8:	2101      	movs	r1, #1
 8004afa:	2061      	movs	r0, #97	; 0x61
 8004afc:	f7fc f816 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004b00:	2100      	movs	r1, #0
 8004b02:	206a      	movs	r0, #106	; 0x6a
 8004b04:	f7fc f812 	bl	8000b2c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004b08:	2100      	movs	r1, #0
 8004b0a:	2080      	movs	r0, #128	; 0x80
 8004b0c:	f7fc f80e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004b10:	2100      	movs	r1, #0
 8004b12:	2081      	movs	r0, #129	; 0x81
 8004b14:	f7fc f80a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004b18:	2100      	movs	r1, #0
 8004b1a:	2082      	movs	r0, #130	; 0x82
 8004b1c:	f7fc f806 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004b20:	2100      	movs	r1, #0
 8004b22:	2083      	movs	r0, #131	; 0x83
 8004b24:	f7fc f802 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2084      	movs	r0, #132	; 0x84
 8004b2c:	f7fb fffe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004b30:	2100      	movs	r1, #0
 8004b32:	2085      	movs	r0, #133	; 0x85
 8004b34:	f7fb fffa 	bl	8000b2c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004b38:	2110      	movs	r1, #16
 8004b3a:	2090      	movs	r0, #144	; 0x90
 8004b3c:	f7fb fff6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004b40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b44:	2092      	movs	r0, #146	; 0x92
 8004b46:	f7fb fff1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004b4a:	f240 1133 	movw	r1, #307	; 0x133
 8004b4e:	2007      	movs	r0, #7
 8004b50:	f7fb ffec 	bl	8000b2c <LCD_WriteReg>
 8004b54:	f001 b99e 	b.w	8005e94 <LCD_Init+0x3e34>
 8004b58:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0x5408) {
 8004b5c:	4be2      	ldr	r3, [pc, #904]	; (8004ee8 <LCD_Init+0x2e88>)
 8004b5e:	889b      	ldrh	r3, [r3, #4]
 8004b60:	f245 4208 	movw	r2, #21512	; 0x5408
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 80a3 	bne.w	8004cb0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fb ffdc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004b74:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f7fb ffd7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004b7e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004b82:	2003      	movs	r0, #3
 8004b84:	f7fb ffd2 	bl	8000b2c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004b88:	2100      	movs	r1, #0
 8004b8a:	2004      	movs	r0, #4
 8004b8c:	f7fb ffce 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004b90:	f240 2107 	movw	r1, #519	; 0x207
 8004b94:	2008      	movs	r0, #8
 8004b96:	f7fb ffc9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2009      	movs	r0, #9
 8004b9e:	f7fb ffc5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	f7fb ffc1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004baa:	2100      	movs	r1, #0
 8004bac:	200c      	movs	r0, #12
 8004bae:	f7fb ffbd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	200d      	movs	r0, #13
 8004bb6:	f7fb ffb9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004bba:	2100      	movs	r1, #0
 8004bbc:	200f      	movs	r0, #15
 8004bbe:	f7fb ffb5 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004bc2:	2014      	movs	r0, #20
 8004bc4:	f002 fe2e 	bl	8007824 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004bc8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004bcc:	2010      	movs	r0, #16
 8004bce:	f7fb ffad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	2011      	movs	r0, #17
 8004bd6:	f7fb ffa9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004bda:	2101      	movs	r1, #1
 8004bdc:	2017      	movs	r0, #23
 8004bde:	f7fb ffa5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004be2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004be6:	2012      	movs	r0, #18
 8004be8:	f7fb ffa0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bf0:	2013      	movs	r0, #19
 8004bf2:	f7fb ff9b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004bf6:	2109      	movs	r1, #9
 8004bf8:	2029      	movs	r0, #41	; 0x29
 8004bfa:	f7fb ff97 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004bfe:	2109      	movs	r1, #9
 8004c00:	202a      	movs	r0, #42	; 0x2a
 8004c02:	f7fb ff93 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004c06:	2100      	movs	r1, #0
 8004c08:	20a4      	movs	r0, #164	; 0xa4
 8004c0a:	f7fb ff8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2050      	movs	r0, #80	; 0x50
 8004c12:	f7fb ff8b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004c16:	21ef      	movs	r1, #239	; 0xef
 8004c18:	2051      	movs	r0, #81	; 0x51
 8004c1a:	f7fb ff87 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2052      	movs	r0, #82	; 0x52
 8004c22:	f7fb ff83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004c26:	f240 113f 	movw	r1, #319	; 0x13f
 8004c2a:	2053      	movs	r0, #83	; 0x53
 8004c2c:	f7fb ff7e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004c30:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c34:	2060      	movs	r0, #96	; 0x60
 8004c36:	f7fb ff79 	bl	8000b2c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	2061      	movs	r0, #97	; 0x61
 8004c3e:	f7fb ff75 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004c42:	2100      	movs	r1, #0
 8004c44:	206a      	movs	r0, #106	; 0x6a
 8004c46:	f7fb ff71 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2080      	movs	r0, #128	; 0x80
 8004c4e:	f7fb ff6d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004c52:	2100      	movs	r1, #0
 8004c54:	2081      	movs	r0, #129	; 0x81
 8004c56:	f7fb ff69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2082      	movs	r0, #130	; 0x82
 8004c5e:	f7fb ff65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004c62:	2100      	movs	r1, #0
 8004c64:	2083      	movs	r0, #131	; 0x83
 8004c66:	f7fb ff61 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	2084      	movs	r0, #132	; 0x84
 8004c6e:	f7fb ff5d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004c72:	2100      	movs	r1, #0
 8004c74:	2085      	movs	r0, #133	; 0x85
 8004c76:	f7fb ff59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004c7a:	2113      	movs	r1, #19
 8004c7c:	2090      	movs	r0, #144	; 0x90
 8004c7e:	f7fb ff55 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004c82:	2100      	movs	r1, #0
 8004c84:	2092      	movs	r0, #146	; 0x92
 8004c86:	f7fb ff51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004c8a:	2103      	movs	r1, #3
 8004c8c:	2093      	movs	r0, #147	; 0x93
 8004c8e:	f7fb ff4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004c92:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004c96:	2095      	movs	r0, #149	; 0x95
 8004c98:	f7fb ff48 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004c9c:	f240 1173 	movw	r1, #371	; 0x173
 8004ca0:	2007      	movs	r0, #7
 8004ca2:	f7fb ff43 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004ca6:	2032      	movs	r0, #50	; 0x32
 8004ca8:	f002 fdbc 	bl	8007824 <HAL_Delay>
 8004cac:	f001 b8f2 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004cb0:	4b8d      	ldr	r3, [pc, #564]	; (8004ee8 <LCD_Init+0x2e88>)
 8004cb2:	889b      	ldrh	r3, [r3, #4]
 8004cb4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f040 8117 	bne.w	8004eec <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	2007      	movs	r0, #7
 8004cc2:	f7fb ff33 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004cc6:	2032      	movs	r0, #50	; 0x32
 8004cc8:	f002 fdac 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004ccc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004cd0:	2012      	movs	r0, #18
 8004cd2:	f7fb ff2b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	20a4      	movs	r0, #164	; 0xa4
 8004cda:	f7fb ff27 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004cde:	210f      	movs	r1, #15
 8004ce0:	2008      	movs	r0, #8
 8004ce2:	f7fb ff23 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	200a      	movs	r0, #10
 8004cea:	f7fb ff1f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004cee:	2108      	movs	r1, #8
 8004cf0:	200d      	movs	r0, #13
 8004cf2:	f7fb ff1b 	bl	8000b2c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004cf6:	f240 7107 	movw	r1, #1799	; 0x707
 8004cfa:	2030      	movs	r0, #48	; 0x30
 8004cfc:	f7fb ff16 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004d00:	2107      	movs	r1, #7
 8004d02:	2031      	movs	r0, #49	; 0x31
 8004d04:	f7fb ff12 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004d08:	f240 6103 	movw	r1, #1539	; 0x603
 8004d0c:	2032      	movs	r0, #50	; 0x32
 8004d0e:	f7fb ff0d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004d12:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d16:	2033      	movs	r0, #51	; 0x33
 8004d18:	f7fb ff08 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004d1c:	f240 2102 	movw	r1, #514	; 0x202
 8004d20:	2034      	movs	r0, #52	; 0x34
 8004d22:	f7fb ff03 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004d26:	2102      	movs	r1, #2
 8004d28:	2035      	movs	r0, #53	; 0x35
 8004d2a:	f7fb feff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004d2e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004d32:	2036      	movs	r0, #54	; 0x36
 8004d34:	f7fb fefa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004d38:	f240 7107 	movw	r1, #1799	; 0x707
 8004d3c:	2037      	movs	r0, #55	; 0x37
 8004d3e:	f7fb fef5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004d42:	2100      	movs	r1, #0
 8004d44:	2038      	movs	r0, #56	; 0x38
 8004d46:	f7fb fef1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2039      	movs	r0, #57	; 0x39
 8004d4e:	f7fb feed 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004d52:	f240 7107 	movw	r1, #1799	; 0x707
 8004d56:	203a      	movs	r0, #58	; 0x3a
 8004d58:	f7fb fee8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	203b      	movs	r0, #59	; 0x3b
 8004d60:	f7fb fee4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004d64:	2107      	movs	r1, #7
 8004d66:	203c      	movs	r0, #60	; 0x3c
 8004d68:	f7fb fee0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	203d      	movs	r0, #61	; 0x3d
 8004d70:	f7fb fedc 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004d74:	2032      	movs	r0, #50	; 0x32
 8004d76:	f002 fd55 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	2007      	movs	r0, #7
 8004d7e:	f7fb fed5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004d82:	2101      	movs	r1, #1
 8004d84:	2017      	movs	r0, #23
 8004d86:	f7fb fed1 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(50);
 8004d8a:	2032      	movs	r0, #50	; 0x32
 8004d8c:	f002 fd4a 	bl	8007824 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004d90:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004d94:	2010      	movs	r0, #16
 8004d96:	f7fb fec9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004d9a:	f240 2117 	movw	r1, #535	; 0x217
 8004d9e:	2011      	movs	r0, #17
 8004da0:	f7fb fec4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004da4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004da8:	2012      	movs	r0, #18
 8004daa:	f7fb febf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004dae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004db2:	2013      	movs	r0, #19
 8004db4:	f7fb feba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004db8:	2100      	movs	r1, #0
 8004dba:	202a      	movs	r0, #42	; 0x2a
 8004dbc:	f7fb feb6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004dc0:	210a      	movs	r1, #10
 8004dc2:	2029      	movs	r0, #41	; 0x29
 8004dc4:	f7fb feb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004dc8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004dcc:	2012      	movs	r0, #18
 8004dce:	f7fb fead 	bl	8000b2c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2050      	movs	r0, #80	; 0x50
 8004dd6:	f7fb fea9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004dda:	21ef      	movs	r1, #239	; 0xef
 8004ddc:	2051      	movs	r0, #81	; 0x51
 8004dde:	f7fb fea5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004de2:	2100      	movs	r1, #0
 8004de4:	2052      	movs	r0, #82	; 0x52
 8004de6:	f7fb fea1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004dea:	f240 113f 	movw	r1, #319	; 0x13f
 8004dee:	2053      	movs	r0, #83	; 0x53
 8004df0:	f7fb fe9c 	bl	8000b2c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004df4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004df8:	2060      	movs	r0, #96	; 0x60
 8004dfa:	f7fb fe97 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004dfe:	2101      	movs	r1, #1
 8004e00:	2061      	movs	r0, #97	; 0x61
 8004e02:	f7fb fe93 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004e06:	2100      	movs	r1, #0
 8004e08:	206a      	movs	r0, #106	; 0x6a
 8004e0a:	f7fb fe8f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2080      	movs	r0, #128	; 0x80
 8004e12:	f7fb fe8b 	bl	8000b2c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004e16:	2100      	movs	r1, #0
 8004e18:	2081      	movs	r0, #129	; 0x81
 8004e1a:	f7fb fe87 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2082      	movs	r0, #130	; 0x82
 8004e22:	f7fb fe83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004e26:	2100      	movs	r1, #0
 8004e28:	2083      	movs	r0, #131	; 0x83
 8004e2a:	f7fb fe7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	2084      	movs	r0, #132	; 0x84
 8004e32:	f7fb fe7b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004e36:	2100      	movs	r1, #0
 8004e38:	2085      	movs	r0, #133	; 0x85
 8004e3a:	f7fb fe77 	bl	8000b2c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004e3e:	2113      	movs	r1, #19
 8004e40:	2090      	movs	r0, #144	; 0x90
 8004e42:	f7fb fe73 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004e46:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e4a:	2092      	movs	r0, #146	; 0x92
 8004e4c:	f7fb fe6e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004e50:	2105      	movs	r1, #5
 8004e52:	2093      	movs	r0, #147	; 0x93
 8004e54:	f7fb fe6a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2095      	movs	r0, #149	; 0x95
 8004e5c:	f7fb fe66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004e60:	2100      	movs	r1, #0
 8004e62:	2097      	movs	r0, #151	; 0x97
 8004e64:	f7fb fe62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	2098      	movs	r0, #152	; 0x98
 8004e6c:	f7fb fe5e 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fb fe59 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e7a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7fb fe54 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e84:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f7fb fe4f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	2004      	movs	r0, #4
 8004e92:	f7fb fe4b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004e96:	2100      	movs	r1, #0
 8004e98:	200c      	movs	r0, #12
 8004e9a:	f7fb fe47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	200f      	movs	r0, #15
 8004ea2:	f7fb fe43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2020      	movs	r0, #32
 8004eaa:	f7fb fe3f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2021      	movs	r0, #33	; 0x21
 8004eb2:	f7fb fe3b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004eb6:	2121      	movs	r1, #33	; 0x21
 8004eb8:	2007      	movs	r0, #7
 8004eba:	f7fb fe37 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004ebe:	2014      	movs	r0, #20
 8004ec0:	f002 fcb0 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ec4:	2161      	movs	r1, #97	; 0x61
 8004ec6:	2007      	movs	r0, #7
 8004ec8:	f7fb fe30 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004ecc:	2014      	movs	r0, #20
 8004ece:	f002 fca9 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004ed2:	f240 1173 	movw	r1, #371	; 0x173
 8004ed6:	2007      	movs	r0, #7
 8004ed8:	f7fb fe28 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004edc:	2014      	movs	r0, #20
 8004ede:	f002 fca1 	bl	8007824 <HAL_Delay>
 8004ee2:	f000 bfd7 	b.w	8005e94 <LCD_Init+0x3e34>
 8004ee6:	bf00      	nop
 8004ee8:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0xB505) {
 8004eec:	4bf0      	ldr	r3, [pc, #960]	; (80052b0 <LCD_Init+0x3250>)
 8004eee:	889b      	ldrh	r3, [r3, #4]
 8004ef0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	f040 8103 	bne.w	8005100 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004efa:	2100      	movs	r1, #0
 8004efc:	2000      	movs	r0, #0
 8004efe:	f7fb fe15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f02:	2100      	movs	r1, #0
 8004f04:	2000      	movs	r0, #0
 8004f06:	f7fb fe11 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fb fe0d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f12:	2100      	movs	r1, #0
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fb fe09 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	20a4      	movs	r0, #164	; 0xa4
 8004f1e:	f7fb fe05 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004f22:	2014      	movs	r0, #20
 8004f24:	f002 fc7e 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004f28:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f2c:	2060      	movs	r0, #96	; 0x60
 8004f2e:	f7fb fdfd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f32:	f240 2102 	movw	r1, #514	; 0x202
 8004f36:	2008      	movs	r0, #8
 8004f38:	f7fb fdf8 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004f3c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004f40:	2030      	movs	r0, #48	; 0x30
 8004f42:	f7fb fdf3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004f46:	f243 7115 	movw	r1, #14101	; 0x3715
 8004f4a:	2031      	movs	r0, #49	; 0x31
 8004f4c:	f7fb fdee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004f50:	f240 6104 	movw	r1, #1540	; 0x604
 8004f54:	2032      	movs	r0, #50	; 0x32
 8004f56:	f7fb fde9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004f5a:	f640 6116 	movw	r1, #3606	; 0xe16
 8004f5e:	2033      	movs	r0, #51	; 0x33
 8004f60:	f7fb fde4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004f64:	f242 2111 	movw	r1, #8721	; 0x2211
 8004f68:	2034      	movs	r0, #52	; 0x34
 8004f6a:	f7fb fddf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004f6e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004f72:	2035      	movs	r0, #53	; 0x35
 8004f74:	f7fb fdda 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004f78:	f248 5107 	movw	r1, #34055	; 0x8507
 8004f7c:	2036      	movs	r0, #54	; 0x36
 8004f7e:	f7fb fdd5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004f82:	f241 4107 	movw	r1, #5127	; 0x1407
 8004f86:	2037      	movs	r0, #55	; 0x37
 8004f88:	f7fb fdd0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004f8c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004f90:	2038      	movs	r0, #56	; 0x38
 8004f92:	f7fb fdcb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004f96:	2120      	movs	r1, #32
 8004f98:	2039      	movs	r0, #57	; 0x39
 8004f9a:	f7fb fdc7 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004f9e:	211a      	movs	r1, #26
 8004fa0:	2090      	movs	r0, #144	; 0x90
 8004fa2:	f7fb fdc3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	2010      	movs	r0, #16
 8004faa:	f7fb fdbf 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004fae:	2107      	movs	r1, #7
 8004fb0:	2011      	movs	r0, #17
 8004fb2:	f7fb fdbb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2012      	movs	r0, #18
 8004fba:	f7fb fdb7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2013      	movs	r0, #19
 8004fc2:	f7fb fdb3 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004fc6:	2014      	movs	r0, #20
 8004fc8:	f002 fc2c 	bl	8007824 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004fcc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004fd0:	2010      	movs	r0, #16
 8004fd2:	f7fb fdab 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004fd6:	f240 1137 	movw	r1, #311	; 0x137
 8004fda:	2011      	movs	r0, #17
 8004fdc:	f7fb fda6 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004fe0:	2014      	movs	r0, #20
 8004fe2:	f002 fc1f 	bl	8007824 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004fe6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004fea:	2012      	movs	r0, #18
 8004fec:	f7fb fd9e 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8004ff0:	2014      	movs	r0, #20
 8004ff2:	f002 fc17 	bl	8007824 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004ff6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ffa:	2013      	movs	r0, #19
 8004ffc:	f7fb fd96 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	202a      	movs	r0, #42	; 0x2a
 8005004:	f7fb fd92 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005008:	2148      	movs	r1, #72	; 0x48
 800500a:	2029      	movs	r0, #41	; 0x29
 800500c:	f7fb fd8e 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 8005010:	2014      	movs	r0, #20
 8005012:	f002 fc07 	bl	8007824 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800501a:	2001      	movs	r0, #1
 800501c:	f7fb fd86 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005020:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005024:	2002      	movs	r0, #2
 8005026:	f7fb fd81 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800502a:	f241 0138 	movw	r1, #4152	; 0x1038
 800502e:	2003      	movs	r0, #3
 8005030:	f7fb fd7c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005034:	f240 2102 	movw	r1, #514	; 0x202
 8005038:	2008      	movs	r0, #8
 800503a:	f7fb fd77 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	200a      	movs	r0, #10
 8005042:	f7fb fd73 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005046:	2100      	movs	r1, #0
 8005048:	200c      	movs	r0, #12
 800504a:	f7fb fd6f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800504e:	2100      	movs	r1, #0
 8005050:	200d      	movs	r0, #13
 8005052:	f7fb fd6b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005056:	2130      	movs	r1, #48	; 0x30
 8005058:	200e      	movs	r0, #14
 800505a:	f7fb fd67 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800505e:	2100      	movs	r1, #0
 8005060:	2050      	movs	r0, #80	; 0x50
 8005062:	f7fb fd63 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005066:	21ef      	movs	r1, #239	; 0xef
 8005068:	2051      	movs	r0, #81	; 0x51
 800506a:	f7fb fd5f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800506e:	2100      	movs	r1, #0
 8005070:	2052      	movs	r0, #82	; 0x52
 8005072:	f7fb fd5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8005076:	f240 113f 	movw	r1, #319	; 0x13f
 800507a:	2053      	movs	r0, #83	; 0x53
 800507c:	f7fb fd56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005080:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005084:	2060      	movs	r0, #96	; 0x60
 8005086:	f7fb fd51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800508a:	2101      	movs	r1, #1
 800508c:	2061      	movs	r0, #97	; 0x61
 800508e:	f7fb fd4d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005092:	2100      	movs	r1, #0
 8005094:	206a      	movs	r0, #106	; 0x6a
 8005096:	f7fb fd49 	bl	8000b2c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800509a:	2111      	movs	r1, #17
 800509c:	2090      	movs	r0, #144	; 0x90
 800509e:	f7fb fd45 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80050a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050a6:	2092      	movs	r0, #146	; 0x92
 80050a8:	f7fb fd40 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80050ac:	f240 4102 	movw	r1, #1026	; 0x402
 80050b0:	2093      	movs	r0, #147	; 0x93
 80050b2:	f7fb fd3b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80050b6:	2102      	movs	r1, #2
 80050b8:	2094      	movs	r0, #148	; 0x94
 80050ba:	f7fb fd37 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 80050be:	2014      	movs	r0, #20
 80050c0:	f002 fbb0 	bl	8007824 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80050c4:	2101      	movs	r1, #1
 80050c6:	2007      	movs	r0, #7
 80050c8:	f7fb fd30 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 80050cc:	2014      	movs	r0, #20
 80050ce:	f002 fba9 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80050d2:	2161      	movs	r1, #97	; 0x61
 80050d4:	2007      	movs	r0, #7
 80050d6:	f7fb fd29 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80050da:	f240 1173 	movw	r1, #371	; 0x173
 80050de:	2007      	movs	r0, #7
 80050e0:	f7fb fd24 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80050e4:	2100      	movs	r1, #0
 80050e6:	2020      	movs	r0, #32
 80050e8:	f7fb fd20 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80050ec:	2100      	movs	r1, #0
 80050ee:	2021      	movs	r0, #33	; 0x21
 80050f0:	f7fb fd1c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80050f4:	2122      	movs	r1, #34	; 0x22
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fb fd18 	bl	8000b2c <LCD_WriteReg>
 80050fc:	f000 beca 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005100:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <LCD_Init+0x3250>)
 8005102:	889b      	ldrh	r3, [r3, #4]
 8005104:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005108:	4293      	cmp	r3, r2
 800510a:	f040 80d3 	bne.w	80052b4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	2000      	movs	r0, #0
 8005112:	f7fb fd0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005116:	2100      	movs	r1, #0
 8005118:	2000      	movs	r0, #0
 800511a:	f7fb fd07 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 800511e:	2014      	movs	r0, #20
 8005120:	f002 fb80 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005124:	2100      	movs	r1, #0
 8005126:	2000      	movs	r0, #0
 8005128:	f7fb fd00 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800512c:	2100      	movs	r1, #0
 800512e:	2000      	movs	r0, #0
 8005130:	f7fb fcfc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005134:	2100      	movs	r1, #0
 8005136:	2000      	movs	r0, #0
 8005138:	f7fb fcf8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800513c:	2100      	movs	r1, #0
 800513e:	2000      	movs	r0, #0
 8005140:	f7fb fcf4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005144:	2101      	movs	r1, #1
 8005146:	20a4      	movs	r0, #164	; 0xa4
 8005148:	f7fb fcf0 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 800514c:	2014      	movs	r0, #20
 800514e:	f002 fb69 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005152:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005156:	2060      	movs	r0, #96	; 0x60
 8005158:	f7fb fce8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800515c:	f640 0106 	movw	r1, #2054	; 0x806
 8005160:	2008      	movs	r0, #8
 8005162:	f7fb fce3 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005166:	f240 7103 	movw	r1, #1795	; 0x703
 800516a:	2030      	movs	r0, #48	; 0x30
 800516c:	f7fb fcde 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005170:	2101      	movs	r1, #1
 8005172:	2031      	movs	r0, #49	; 0x31
 8005174:	f7fb fcda 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005178:	2104      	movs	r1, #4
 800517a:	2032      	movs	r0, #50	; 0x32
 800517c:	f7fb fcd6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005180:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005184:	2033      	movs	r0, #51	; 0x33
 8005186:	f7fb fcd1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800518a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800518e:	2034      	movs	r0, #52	; 0x34
 8005190:	f7fb fccc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005194:	f240 1103 	movw	r1, #259	; 0x103
 8005198:	2035      	movs	r0, #53	; 0x35
 800519a:	f7fb fcc7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800519e:	211f      	movs	r1, #31
 80051a0:	2036      	movs	r0, #54	; 0x36
 80051a2:	f7fb fcc3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80051a6:	f240 7103 	movw	r1, #1795	; 0x703
 80051aa:	2037      	movs	r0, #55	; 0x37
 80051ac:	f7fb fcbe 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80051b0:	2101      	movs	r1, #1
 80051b2:	2038      	movs	r0, #56	; 0x38
 80051b4:	f7fb fcba 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80051b8:	2104      	movs	r1, #4
 80051ba:	2039      	movs	r0, #57	; 0x39
 80051bc:	f7fb fcb6 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80051c0:	2115      	movs	r1, #21
 80051c2:	2090      	movs	r0, #144	; 0x90
 80051c4:	f7fb fcb2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80051c8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80051cc:	2010      	movs	r0, #16
 80051ce:	f7fb fcad 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80051d2:	f240 2147 	movw	r1, #583	; 0x247
 80051d6:	2011      	movs	r0, #17
 80051d8:	f7fb fca8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80051dc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80051e0:	2012      	movs	r0, #18
 80051e2:	f7fb fca3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80051e6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80051ea:	2013      	movs	r0, #19
 80051ec:	f7fb fc9e 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(120);
 80051f0:	2078      	movs	r0, #120	; 0x78
 80051f2:	f002 fb17 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80051f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051fa:	2001      	movs	r0, #1
 80051fc:	f7fb fc96 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005204:	2002      	movs	r0, #2
 8005206:	f7fb fc91 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800520a:	f241 0130 	movw	r1, #4144	; 0x1030
 800520e:	2003      	movs	r0, #3
 8005210:	f7fb fc8c 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005214:	2108      	movs	r1, #8
 8005216:	200a      	movs	r0, #10
 8005218:	f7fb fc88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800521c:	2100      	movs	r1, #0
 800521e:	200c      	movs	r0, #12
 8005220:	f7fb fc84 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005224:	2120      	movs	r1, #32
 8005226:	200e      	movs	r0, #14
 8005228:	f7fb fc80 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800522c:	2100      	movs	r1, #0
 800522e:	200f      	movs	r0, #15
 8005230:	f7fb fc7c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005234:	2100      	movs	r1, #0
 8005236:	2020      	movs	r0, #32
 8005238:	f7fb fc78 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800523c:	2100      	movs	r1, #0
 800523e:	2021      	movs	r0, #33	; 0x21
 8005240:	f7fb fc74 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005244:	213d      	movs	r1, #61	; 0x3d
 8005246:	202a      	movs	r0, #42	; 0x2a
 8005248:	f7fb fc70 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(20);
 800524c:	2014      	movs	r0, #20
 800524e:	f002 fae9 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005252:	212d      	movs	r1, #45	; 0x2d
 8005254:	2029      	movs	r0, #41	; 0x29
 8005256:	f7fb fc69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800525a:	2100      	movs	r1, #0
 800525c:	2050      	movs	r0, #80	; 0x50
 800525e:	f7fb fc65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005262:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005266:	2051      	movs	r0, #81	; 0x51
 8005268:	f7fb fc60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800526c:	2100      	movs	r1, #0
 800526e:	2052      	movs	r0, #82	; 0x52
 8005270:	f7fb fc5c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005274:	f240 113f 	movw	r1, #319	; 0x13f
 8005278:	2053      	movs	r0, #83	; 0x53
 800527a:	f7fb fc57 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800527e:	2100      	movs	r1, #0
 8005280:	2061      	movs	r0, #97	; 0x61
 8005282:	f7fb fc53 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005286:	2100      	movs	r1, #0
 8005288:	206a      	movs	r0, #106	; 0x6a
 800528a:	f7fb fc4f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800528e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005292:	2092      	movs	r0, #146	; 0x92
 8005294:	f7fb fc4a 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005298:	2105      	movs	r1, #5
 800529a:	2093      	movs	r0, #147	; 0x93
 800529c:	f7fb fc46 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80052a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a4:	2007      	movs	r0, #7
 80052a6:	f7fb fc41 	bl	8000b2c <LCD_WriteReg>
 80052aa:	f000 bdf3 	b.w	8005e94 <LCD_Init+0x3e34>
 80052ae:	bf00      	nop
 80052b0:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80052b4:	4bc2      	ldr	r3, [pc, #776]	; (80055c0 <LCD_Init+0x3560>)
 80052b6:	889b      	ldrh	r3, [r3, #4]
 80052b8:	f648 1289 	movw	r2, #35209	; 0x8989
 80052bc:	4293      	cmp	r3, r2
 80052be:	f040 80bc 	bne.w	800543a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80052c2:	2101      	movs	r1, #1
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7fb fc31 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80052ca:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80052ce:	2003      	movs	r0, #3
 80052d0:	f7fb fc2c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80052d4:	2100      	movs	r1, #0
 80052d6:	200c      	movs	r0, #12
 80052d8:	f7fb fc28 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80052dc:	f640 010c 	movw	r1, #2060	; 0x80c
 80052e0:	200d      	movs	r0, #13
 80052e2:	f7fb fc23 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80052e6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80052ea:	200e      	movs	r0, #14
 80052ec:	f7fb fc1e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80052f0:	21b0      	movs	r1, #176	; 0xb0
 80052f2:	201e      	movs	r0, #30
 80052f4:	f7fb fc1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80052f8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80052fc:	2001      	movs	r0, #1
 80052fe:	f7fb fc15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005302:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005306:	2002      	movs	r0, #2
 8005308:	f7fb fc10 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800530c:	2100      	movs	r1, #0
 800530e:	2010      	movs	r0, #16
 8005310:	f7fb fc0c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005314:	f246 0178 	movw	r1, #24696	; 0x6078
 8005318:	2011      	movs	r0, #17
 800531a:	f7fb fc07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800531e:	2100      	movs	r1, #0
 8005320:	2005      	movs	r0, #5
 8005322:	f7fb fc03 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005326:	2100      	movs	r1, #0
 8005328:	2006      	movs	r0, #6
 800532a:	f7fb fbff 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800532e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005332:	2016      	movs	r0, #22
 8005334:	f7fb fbfa 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005338:	2103      	movs	r1, #3
 800533a:	2017      	movs	r0, #23
 800533c:	f7fb fbf6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005340:	f240 2133 	movw	r1, #563	; 0x233
 8005344:	2007      	movs	r0, #7
 8005346:	f7fb fbf1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800534a:	2100      	movs	r1, #0
 800534c:	200b      	movs	r0, #11
 800534e:	f7fb fbed 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005352:	2100      	movs	r1, #0
 8005354:	200f      	movs	r0, #15
 8005356:	f7fb fbe9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800535a:	2100      	movs	r1, #0
 800535c:	2041      	movs	r0, #65	; 0x41
 800535e:	f7fb fbe5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005362:	2100      	movs	r1, #0
 8005364:	2042      	movs	r0, #66	; 0x42
 8005366:	f7fb fbe1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800536a:	2100      	movs	r1, #0
 800536c:	2048      	movs	r0, #72	; 0x48
 800536e:	f7fb fbdd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005372:	f240 113f 	movw	r1, #319	; 0x13f
 8005376:	2049      	movs	r0, #73	; 0x49
 8005378:	f7fb fbd8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800537c:	2100      	movs	r1, #0
 800537e:	204a      	movs	r0, #74	; 0x4a
 8005380:	f7fb fbd4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005384:	2100      	movs	r1, #0
 8005386:	204b      	movs	r0, #75	; 0x4b
 8005388:	f7fb fbd0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800538c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005390:	2044      	movs	r0, #68	; 0x44
 8005392:	f7fb fbcb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005396:	2100      	movs	r1, #0
 8005398:	2045      	movs	r0, #69	; 0x45
 800539a:	f7fb fbc7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800539e:	f240 113f 	movw	r1, #319	; 0x13f
 80053a2:	2046      	movs	r0, #70	; 0x46
 80053a4:	f7fb fbc2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80053a8:	f240 7107 	movw	r1, #1799	; 0x707
 80053ac:	2030      	movs	r0, #48	; 0x30
 80053ae:	f7fb fbbd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80053b2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80053b6:	2031      	movs	r0, #49	; 0x31
 80053b8:	f7fb fbb8 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80053bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80053c0:	2032      	movs	r0, #50	; 0x32
 80053c2:	f7fb fbb3 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80053c6:	f240 5102 	movw	r1, #1282	; 0x502
 80053ca:	2033      	movs	r0, #51	; 0x33
 80053cc:	f7fb fbae 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80053d0:	f240 5107 	movw	r1, #1287	; 0x507
 80053d4:	2034      	movs	r0, #52	; 0x34
 80053d6:	f7fb fba9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80053da:	f44f 7101 	mov.w	r1, #516	; 0x204
 80053de:	2035      	movs	r0, #53	; 0x35
 80053e0:	f7fb fba4 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80053e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80053e8:	2036      	movs	r0, #54	; 0x36
 80053ea:	f7fb fb9f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80053ee:	f240 5102 	movw	r1, #1282	; 0x502
 80053f2:	2037      	movs	r0, #55	; 0x37
 80053f4:	f7fb fb9a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80053f8:	f240 3102 	movw	r1, #770	; 0x302
 80053fc:	203a      	movs	r0, #58	; 0x3a
 80053fe:	f7fb fb95 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005402:	f240 3102 	movw	r1, #770	; 0x302
 8005406:	203b      	movs	r0, #59	; 0x3b
 8005408:	f7fb fb90 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800540c:	2100      	movs	r1, #0
 800540e:	2023      	movs	r0, #35	; 0x23
 8005410:	f7fb fb8c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005414:	2100      	movs	r1, #0
 8005416:	2024      	movs	r0, #36	; 0x24
 8005418:	f7fb fb88 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800541c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005420:	2025      	movs	r0, #37	; 0x25
 8005422:	f7fb fb83 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005426:	2100      	movs	r1, #0
 8005428:	204f      	movs	r0, #79	; 0x4f
 800542a:	f7fb fb7f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800542e:	2100      	movs	r1, #0
 8005430:	204e      	movs	r0, #78	; 0x4e
 8005432:	f7fb fb7b 	bl	8000b2c <LCD_WriteReg>
 8005436:	f000 bd2d 	b.w	8005e94 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800543a:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <LCD_Init+0x3560>)
 800543c:	889b      	ldrh	r3, [r3, #4]
 800543e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005442:	4293      	cmp	r3, r2
 8005444:	f040 80be 	bne.w	80055c4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005448:	2101      	movs	r1, #1
 800544a:	2000      	movs	r0, #0
 800544c:	f7fb fb6e 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8005450:	200a      	movs	r0, #10
 8005452:	f002 f9e7 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005456:	f241 6128 	movw	r1, #5672	; 0x1628
 800545a:	2010      	movs	r0, #16
 800545c:	f7fb fb66 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005460:	210e      	movs	r1, #14
 8005462:	2012      	movs	r0, #18
 8005464:	f7fb fb62 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005468:	f640 2139 	movw	r1, #2617	; 0xa39
 800546c:	2013      	movs	r0, #19
 800546e:	f7fb fb5d 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8005472:	200a      	movs	r0, #10
 8005474:	f002 f9d6 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005478:	2140      	movs	r1, #64	; 0x40
 800547a:	2011      	movs	r0, #17
 800547c:	f7fb fb56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005480:	2150      	movs	r1, #80	; 0x50
 8005482:	2015      	movs	r0, #21
 8005484:	f7fb fb52 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8005488:	200a      	movs	r0, #10
 800548a:	f002 f9cb 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800548e:	211e      	movs	r1, #30
 8005490:	2012      	movs	r0, #18
 8005492:	f7fb fb4b 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 8005496:	200a      	movs	r0, #10
 8005498:	f002 f9c4 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800549c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80054a0:	2010      	movs	r0, #16
 80054a2:	f7fb fb43 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80054a6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80054aa:	2013      	movs	r0, #19
 80054ac:	f7fb fb3e 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(10);
 80054b0:	200a      	movs	r0, #10
 80054b2:	f002 f9b7 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80054b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ba:	2001      	movs	r0, #1
 80054bc:	f7fb fb36 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80054c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054c4:	2002      	movs	r0, #2
 80054c6:	f7fb fb31 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80054ca:	f241 0138 	movw	r1, #4152	; 0x1038
 80054ce:	2003      	movs	r0, #3
 80054d0:	f7fb fb2c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80054d4:	f240 2102 	movw	r1, #514	; 0x202
 80054d8:	2008      	movs	r0, #8
 80054da:	f7fb fb27 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80054de:	2108      	movs	r1, #8
 80054e0:	200a      	movs	r0, #10
 80054e2:	f7fb fb23 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80054e6:	2100      	movs	r1, #0
 80054e8:	2030      	movs	r0, #48	; 0x30
 80054ea:	f7fb fb1f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80054ee:	f240 4102 	movw	r1, #1026	; 0x402
 80054f2:	2031      	movs	r0, #49	; 0x31
 80054f4:	f7fb fb1a 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80054f8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80054fc:	2032      	movs	r0, #50	; 0x32
 80054fe:	f7fb fb15 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005502:	f240 5103 	movw	r1, #1283	; 0x503
 8005506:	2033      	movs	r0, #51	; 0x33
 8005508:	f7fb fb10 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800550c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005510:	2034      	movs	r0, #52	; 0x34
 8005512:	f7fb fb0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005516:	f240 3101 	movw	r1, #769	; 0x301
 800551a:	2035      	movs	r0, #53	; 0x35
 800551c:	f7fb fb06 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005520:	f240 7107 	movw	r1, #1799	; 0x707
 8005524:	2036      	movs	r0, #54	; 0x36
 8005526:	f7fb fb01 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800552a:	f240 3105 	movw	r1, #773	; 0x305
 800552e:	2037      	movs	r0, #55	; 0x37
 8005530:	f7fb fafc 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005534:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005538:	2038      	movs	r0, #56	; 0x38
 800553a:	f7fb faf7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800553e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005542:	2039      	movs	r0, #57	; 0x39
 8005544:	f7fb faf2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005548:	2102      	movs	r1, #2
 800554a:	2041      	movs	r0, #65	; 0x41
 800554c:	f7fb faee 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005550:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005554:	2060      	movs	r0, #96	; 0x60
 8005556:	f7fb fae9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800555a:	2101      	movs	r1, #1
 800555c:	2061      	movs	r0, #97	; 0x61
 800555e:	f7fb fae5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005562:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005566:	2090      	movs	r0, #144	; 0x90
 8005568:	f7fb fae0 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800556c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005570:	2092      	movs	r0, #146	; 0x92
 8005572:	f7fb fadb 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005576:	2104      	movs	r1, #4
 8005578:	2093      	movs	r0, #147	; 0x93
 800557a:	f7fb fad7 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800557e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005582:	20a0      	movs	r0, #160	; 0xa0
 8005584:	f7fb fad2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005588:	2101      	movs	r1, #1
 800558a:	2007      	movs	r0, #7
 800558c:	f7fb face 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005590:	2121      	movs	r1, #33	; 0x21
 8005592:	2007      	movs	r0, #7
 8005594:	f7fb faca 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005598:	2123      	movs	r1, #35	; 0x23
 800559a:	2007      	movs	r0, #7
 800559c:	f7fb fac6 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80055a0:	2133      	movs	r1, #51	; 0x33
 80055a2:	2007      	movs	r0, #7
 80055a4:	f7fb fac2 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80055a8:	f240 1133 	movw	r1, #307	; 0x133
 80055ac:	2007      	movs	r0, #7
 80055ae:	f7fb fabd 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80055b2:	2100      	movs	r1, #0
 80055b4:	20a0      	movs	r0, #160	; 0xa0
 80055b6:	f7fb fab9 	bl	8000b2c <LCD_WriteReg>
 80055ba:	f000 bc6b 	b.w	8005e94 <LCD_Init+0x3e34>
 80055be:	bf00      	nop
 80055c0:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0x4535) {
 80055c4:	4b5b      	ldr	r3, [pc, #364]	; (8005734 <LCD_Init+0x36d4>)
 80055c6:	889b      	ldrh	r3, [r3, #4]
 80055c8:	f244 5235 	movw	r2, #17717	; 0x4535
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f040 80b3 	bne.w	8005738 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80055d2:	2130      	movs	r1, #48	; 0x30
 80055d4:	2015      	movs	r0, #21
 80055d6:	f7fb faa9 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80055da:	2110      	movs	r1, #16
 80055dc:	209a      	movs	r0, #154	; 0x9a
 80055de:	f7fb faa5 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80055e2:	2120      	movs	r1, #32
 80055e4:	2011      	movs	r0, #17
 80055e6:	f7fb faa1 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80055ea:	f243 4128 	movw	r1, #13352	; 0x3428
 80055ee:	2010      	movs	r0, #16
 80055f0:	f7fb fa9c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80055f4:	2102      	movs	r1, #2
 80055f6:	2012      	movs	r0, #18
 80055f8:	f7fb fa98 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80055fc:	f241 0138 	movw	r1, #4152	; 0x1038
 8005600:	2013      	movs	r0, #19
 8005602:	f7fb fa93 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(40);
 8005606:	2028      	movs	r0, #40	; 0x28
 8005608:	f002 f90c 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800560c:	2112      	movs	r1, #18
 800560e:	2012      	movs	r0, #18
 8005610:	f7fb fa8c 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(40);
 8005614:	2028      	movs	r0, #40	; 0x28
 8005616:	f002 f905 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800561a:	f243 4120 	movw	r1, #13344	; 0x3420
 800561e:	2010      	movs	r0, #16
 8005620:	f7fb fa84 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005624:	f243 0138 	movw	r1, #12344	; 0x3038
 8005628:	2013      	movs	r0, #19
 800562a:	f7fb fa7f 	bl	8000b2c <LCD_WriteReg>
		HAL_Delay(70);
 800562e:	2046      	movs	r0, #70	; 0x46
 8005630:	f002 f8f8 	bl	8007824 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005634:	2100      	movs	r1, #0
 8005636:	2030      	movs	r0, #48	; 0x30
 8005638:	f7fb fa78 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800563c:	f240 4102 	movw	r1, #1026	; 0x402
 8005640:	2031      	movs	r0, #49	; 0x31
 8005642:	f7fb fa73 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005646:	f240 3107 	movw	r1, #775	; 0x307
 800564a:	2032      	movs	r0, #50	; 0x32
 800564c:	f7fb fa6e 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005650:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005654:	2033      	movs	r0, #51	; 0x33
 8005656:	f7fb fa69 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800565a:	2104      	movs	r1, #4
 800565c:	2034      	movs	r0, #52	; 0x34
 800565e:	f7fb fa65 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005662:	f240 4101 	movw	r1, #1025	; 0x401
 8005666:	2035      	movs	r0, #53	; 0x35
 8005668:	f7fb fa60 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800566c:	f240 7107 	movw	r1, #1799	; 0x707
 8005670:	2036      	movs	r0, #54	; 0x36
 8005672:	f7fb fa5b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005676:	f240 3105 	movw	r1, #773	; 0x305
 800567a:	2037      	movs	r0, #55	; 0x37
 800567c:	f7fb fa56 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005680:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005684:	2038      	movs	r0, #56	; 0x38
 8005686:	f7fb fa51 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800568a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800568e:	2039      	movs	r0, #57	; 0x39
 8005690:	f7fb fa4c 	bl	8000b2c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005698:	2001      	movs	r0, #1
 800569a:	f7fb fa47 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800569e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80056a2:	2002      	movs	r0, #2
 80056a4:	f7fb fa42 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80056a8:	f241 0130 	movw	r1, #4144	; 0x1030
 80056ac:	2003      	movs	r0, #3
 80056ae:	f7fb fa3d 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80056b2:	f640 0108 	movw	r1, #2056	; 0x808
 80056b6:	2008      	movs	r0, #8
 80056b8:	f7fb fa38 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80056bc:	2108      	movs	r1, #8
 80056be:	200a      	movs	r0, #10
 80056c0:	f7fb fa34 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80056c4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80056c8:	2060      	movs	r0, #96	; 0x60
 80056ca:	f7fb fa2f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80056ce:	2101      	movs	r1, #1
 80056d0:	2061      	movs	r0, #97	; 0x61
 80056d2:	f7fb fa2b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80056d6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80056da:	2090      	movs	r0, #144	; 0x90
 80056dc:	f7fb fa26 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80056e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056e4:	2092      	movs	r0, #146	; 0x92
 80056e6:	f7fb fa21 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80056ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ee:	2093      	movs	r0, #147	; 0x93
 80056f0:	f7fb fa1c 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80056f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056f8:	20a0      	movs	r0, #160	; 0xa0
 80056fa:	f7fb fa17 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80056fe:	2110      	movs	r1, #16
 8005700:	20a3      	movs	r0, #163	; 0xa3
 8005702:	f7fb fa13 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005706:	2101      	movs	r1, #1
 8005708:	2007      	movs	r0, #7
 800570a:	f7fb fa0f 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800570e:	2121      	movs	r1, #33	; 0x21
 8005710:	2007      	movs	r0, #7
 8005712:	f7fb fa0b 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005716:	2123      	movs	r1, #35	; 0x23
 8005718:	2007      	movs	r0, #7
 800571a:	f7fb fa07 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800571e:	2133      	movs	r1, #51	; 0x33
 8005720:	2007      	movs	r0, #7
 8005722:	f7fb fa03 	bl	8000b2c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005726:	f240 1133 	movw	r1, #307	; 0x133
 800572a:	2007      	movs	r0, #7
 800572c:	f7fb f9fe 	bl	8000b2c <LCD_WriteReg>
 8005730:	e3b0      	b.n	8005e94 <LCD_Init+0x3e34>
 8005732:	bf00      	nop
 8005734:	200001f8 	.word	0x200001f8
	} else if (lcddev.id == 0X1963) {
 8005738:	4ba8      	ldr	r3, [pc, #672]	; (80059dc <LCD_Init+0x397c>)
 800573a:	889b      	ldrh	r3, [r3, #4]
 800573c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005740:	4293      	cmp	r3, r2
 8005742:	f040 83a7 	bne.w	8005e94 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005746:	20e2      	movs	r0, #226	; 0xe2
 8005748:	f7fb f964 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800574c:	4ba4      	ldr	r3, [pc, #656]	; (80059e0 <LCD_Init+0x3980>)
 800574e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	4ba2      	ldr	r3, [pc, #648]	; (80059e0 <LCD_Init+0x3980>)
 8005756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575a:	615a      	str	r2, [r3, #20]
 800575c:	4ba1      	ldr	r3, [pc, #644]	; (80059e4 <LCD_Init+0x3984>)
 800575e:	221d      	movs	r2, #29
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	4b9f      	ldr	r3, [pc, #636]	; (80059e0 <LCD_Init+0x3980>)
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	615a      	str	r2, [r3, #20]
 8005768:	4b9d      	ldr	r3, [pc, #628]	; (80059e0 <LCD_Init+0x3980>)
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b9c      	ldr	r3, [pc, #624]	; (80059e0 <LCD_Init+0x3980>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005776:	4b9a      	ldr	r3, [pc, #616]	; (80059e0 <LCD_Init+0x3980>)
 8005778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	4b98      	ldr	r3, [pc, #608]	; (80059e0 <LCD_Init+0x3980>)
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	615a      	str	r2, [r3, #20]
 8005786:	4b97      	ldr	r3, [pc, #604]	; (80059e4 <LCD_Init+0x3984>)
 8005788:	2202      	movs	r2, #2
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	4b94      	ldr	r3, [pc, #592]	; (80059e0 <LCD_Init+0x3980>)
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	615a      	str	r2, [r3, #20]
 8005792:	4b93      	ldr	r3, [pc, #588]	; (80059e0 <LCD_Init+0x3980>)
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	4b91      	ldr	r3, [pc, #580]	; (80059e0 <LCD_Init+0x3980>)
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80057a0:	4b8f      	ldr	r3, [pc, #572]	; (80059e0 <LCD_Init+0x3980>)
 80057a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a6:	611a      	str	r2, [r3, #16]
 80057a8:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <LCD_Init+0x3980>)
 80057aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ae:	615a      	str	r2, [r3, #20]
 80057b0:	4b8c      	ldr	r3, [pc, #560]	; (80059e4 <LCD_Init+0x3984>)
 80057b2:	2204      	movs	r2, #4
 80057b4:	60da      	str	r2, [r3, #12]
 80057b6:	4b8a      	ldr	r3, [pc, #552]	; (80059e0 <LCD_Init+0x3980>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	615a      	str	r2, [r3, #20]
 80057bc:	4b88      	ldr	r3, [pc, #544]	; (80059e0 <LCD_Init+0x3980>)
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	4b87      	ldr	r3, [pc, #540]	; (80059e0 <LCD_Init+0x3980>)
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80057ca:	2001      	movs	r0, #1
 80057cc:	f002 f82a 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80057d0:	20e0      	movs	r0, #224	; 0xe0
 80057d2:	f7fb f91f 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80057d6:	4b82      	ldr	r3, [pc, #520]	; (80059e0 <LCD_Init+0x3980>)
 80057d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057dc:	611a      	str	r2, [r3, #16]
 80057de:	4b80      	ldr	r3, [pc, #512]	; (80059e0 <LCD_Init+0x3980>)
 80057e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <LCD_Init+0x3984>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	4b7c      	ldr	r3, [pc, #496]	; (80059e0 <LCD_Init+0x3980>)
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	615a      	str	r2, [r3, #20]
 80057f2:	4b7b      	ldr	r3, [pc, #492]	; (80059e0 <LCD_Init+0x3980>)
 80057f4:	2280      	movs	r2, #128	; 0x80
 80057f6:	611a      	str	r2, [r3, #16]
 80057f8:	4b79      	ldr	r3, [pc, #484]	; (80059e0 <LCD_Init+0x3980>)
 80057fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fe:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005800:	200a      	movs	r0, #10
 8005802:	f002 f80f 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005806:	20e0      	movs	r0, #224	; 0xe0
 8005808:	f7fb f904 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800580c:	4b74      	ldr	r3, [pc, #464]	; (80059e0 <LCD_Init+0x3980>)
 800580e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005812:	611a      	str	r2, [r3, #16]
 8005814:	4b72      	ldr	r3, [pc, #456]	; (80059e0 <LCD_Init+0x3980>)
 8005816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581a:	615a      	str	r2, [r3, #20]
 800581c:	4b71      	ldr	r3, [pc, #452]	; (80059e4 <LCD_Init+0x3984>)
 800581e:	2203      	movs	r2, #3
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	4b6f      	ldr	r3, [pc, #444]	; (80059e0 <LCD_Init+0x3980>)
 8005824:	2280      	movs	r2, #128	; 0x80
 8005826:	615a      	str	r2, [r3, #20]
 8005828:	4b6d      	ldr	r3, [pc, #436]	; (80059e0 <LCD_Init+0x3980>)
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	611a      	str	r2, [r3, #16]
 800582e:	4b6c      	ldr	r3, [pc, #432]	; (80059e0 <LCD_Init+0x3980>)
 8005830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005834:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005836:	200c      	movs	r0, #12
 8005838:	f001 fff4 	bl	8007824 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800583c:	2001      	movs	r0, #1
 800583e:	f7fb f8e9 	bl	8000a14 <LCD_WR_REG>
		HAL_Delay(10);
 8005842:	200a      	movs	r0, #10
 8005844:	f001 ffee 	bl	8007824 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005848:	20e6      	movs	r0, #230	; 0xe6
 800584a:	f7fb f8e3 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800584e:	4b64      	ldr	r3, [pc, #400]	; (80059e0 <LCD_Init+0x3980>)
 8005850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005854:	611a      	str	r2, [r3, #16]
 8005856:	4b62      	ldr	r3, [pc, #392]	; (80059e0 <LCD_Init+0x3980>)
 8005858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585c:	615a      	str	r2, [r3, #20]
 800585e:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <LCD_Init+0x3984>)
 8005860:	222f      	movs	r2, #47	; 0x2f
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	4b5e      	ldr	r3, [pc, #376]	; (80059e0 <LCD_Init+0x3980>)
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	615a      	str	r2, [r3, #20]
 800586a:	4b5d      	ldr	r3, [pc, #372]	; (80059e0 <LCD_Init+0x3980>)
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	611a      	str	r2, [r3, #16]
 8005870:	4b5b      	ldr	r3, [pc, #364]	; (80059e0 <LCD_Init+0x3980>)
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005878:	4b59      	ldr	r3, [pc, #356]	; (80059e0 <LCD_Init+0x3980>)
 800587a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587e:	611a      	str	r2, [r3, #16]
 8005880:	4b57      	ldr	r3, [pc, #348]	; (80059e0 <LCD_Init+0x3980>)
 8005882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005886:	615a      	str	r2, [r3, #20]
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <LCD_Init+0x3984>)
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	4b54      	ldr	r3, [pc, #336]	; (80059e0 <LCD_Init+0x3980>)
 8005890:	2280      	movs	r2, #128	; 0x80
 8005892:	615a      	str	r2, [r3, #20]
 8005894:	4b52      	ldr	r3, [pc, #328]	; (80059e0 <LCD_Init+0x3980>)
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	611a      	str	r2, [r3, #16]
 800589a:	4b51      	ldr	r3, [pc, #324]	; (80059e0 <LCD_Init+0x3980>)
 800589c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80058a2:	4b4f      	ldr	r3, [pc, #316]	; (80059e0 <LCD_Init+0x3980>)
 80058a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	4b4d      	ldr	r3, [pc, #308]	; (80059e0 <LCD_Init+0x3980>)
 80058ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b0:	615a      	str	r2, [r3, #20]
 80058b2:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <LCD_Init+0x3984>)
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	4b49      	ldr	r3, [pc, #292]	; (80059e0 <LCD_Init+0x3980>)
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	615a      	str	r2, [r3, #20]
 80058be:	4b48      	ldr	r3, [pc, #288]	; (80059e0 <LCD_Init+0x3980>)
 80058c0:	2280      	movs	r2, #128	; 0x80
 80058c2:	611a      	str	r2, [r3, #16]
 80058c4:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <LCD_Init+0x3980>)
 80058c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80058cc:	20b0      	movs	r0, #176	; 0xb0
 80058ce:	f7fb f8a1 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80058d2:	4b43      	ldr	r3, [pc, #268]	; (80059e0 <LCD_Init+0x3980>)
 80058d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <LCD_Init+0x3980>)
 80058dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e0:	615a      	str	r2, [r3, #20]
 80058e2:	4b40      	ldr	r3, [pc, #256]	; (80059e4 <LCD_Init+0x3984>)
 80058e4:	2220      	movs	r2, #32
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	4b3d      	ldr	r3, [pc, #244]	; (80059e0 <LCD_Init+0x3980>)
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	615a      	str	r2, [r3, #20]
 80058ee:	4b3c      	ldr	r3, [pc, #240]	; (80059e0 <LCD_Init+0x3980>)
 80058f0:	2280      	movs	r2, #128	; 0x80
 80058f2:	611a      	str	r2, [r3, #16]
 80058f4:	4b3a      	ldr	r3, [pc, #232]	; (80059e0 <LCD_Init+0x3980>)
 80058f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80058fc:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <LCD_Init+0x3980>)
 80058fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005902:	611a      	str	r2, [r3, #16]
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <LCD_Init+0x3980>)
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	615a      	str	r2, [r3, #20]
 800590c:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <LCD_Init+0x3984>)
 800590e:	2200      	movs	r2, #0
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <LCD_Init+0x3980>)
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	615a      	str	r2, [r3, #20]
 8005918:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <LCD_Init+0x3980>)
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	611a      	str	r2, [r3, #16]
 800591e:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <LCD_Init+0x3980>)
 8005920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005924:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005926:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <LCD_Init+0x3980>)
 8005928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592c:	611a      	str	r2, [r3, #16]
 800592e:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <LCD_Init+0x3980>)
 8005930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005934:	615a      	str	r2, [r3, #20]
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <LCD_Init+0x3984>)
 8005938:	2203      	movs	r2, #3
 800593a:	60da      	str	r2, [r3, #12]
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <LCD_Init+0x3980>)
 800593e:	2280      	movs	r2, #128	; 0x80
 8005940:	615a      	str	r2, [r3, #20]
 8005942:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <LCD_Init+0x3980>)
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	611a      	str	r2, [r3, #16]
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <LCD_Init+0x3980>)
 800594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005950:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <LCD_Init+0x3980>)
 8005952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005956:	611a      	str	r2, [r3, #16]
 8005958:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <LCD_Init+0x3980>)
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	615a      	str	r2, [r3, #20]
 8005960:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <LCD_Init+0x3984>)
 8005962:	f240 321f 	movw	r2, #799	; 0x31f
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <LCD_Init+0x3980>)
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	615a      	str	r2, [r3, #20]
 800596e:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <LCD_Init+0x3980>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	611a      	str	r2, [r3, #16]
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <LCD_Init+0x3980>)
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800597c:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <LCD_Init+0x3980>)
 800597e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005982:	611a      	str	r2, [r3, #16]
 8005984:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <LCD_Init+0x3980>)
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <LCD_Init+0x3984>)
 800598e:	2201      	movs	r2, #1
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <LCD_Init+0x3980>)
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	615a      	str	r2, [r3, #20]
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <LCD_Init+0x3980>)
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <LCD_Init+0x3980>)
 80059a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <LCD_Init+0x3980>)
 80059a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <LCD_Init+0x3980>)
 80059b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b4:	615a      	str	r2, [r3, #20]
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <LCD_Init+0x3984>)
 80059b8:	f240 12df 	movw	r2, #479	; 0x1df
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <LCD_Init+0x3980>)
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <LCD_Init+0x3980>)
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <LCD_Init+0x3980>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80059d2:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <LCD_Init+0x3980>)
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	e006      	b.n	80059e8 <LCD_Init+0x3988>
 80059da:	bf00      	nop
 80059dc:	200001f8 	.word	0x200001f8
 80059e0:	40011000 	.word	0x40011000
 80059e4:	40010c00 	.word	0x40010c00
 80059e8:	611a      	str	r2, [r3, #16]
 80059ea:	4ba3      	ldr	r3, [pc, #652]	; (8005c78 <LCD_Init+0x3c18>)
 80059ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	4ba2      	ldr	r3, [pc, #648]	; (8005c7c <LCD_Init+0x3c1c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	4b9f      	ldr	r3, [pc, #636]	; (8005c78 <LCD_Init+0x3c18>)
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	4b9e      	ldr	r3, [pc, #632]	; (8005c78 <LCD_Init+0x3c18>)
 8005a00:	2280      	movs	r2, #128	; 0x80
 8005a02:	611a      	str	r2, [r3, #16]
 8005a04:	4b9c      	ldr	r3, [pc, #624]	; (8005c78 <LCD_Init+0x3c18>)
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005a0c:	20b4      	movs	r0, #180	; 0xb4
 8005a0e:	f7fb f801 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005a12:	4b99      	ldr	r3, [pc, #612]	; (8005c78 <LCD_Init+0x3c18>)
 8005a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a18:	611a      	str	r2, [r3, #16]
 8005a1a:	4b97      	ldr	r3, [pc, #604]	; (8005c78 <LCD_Init+0x3c18>)
 8005a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a20:	615a      	str	r2, [r3, #20]
 8005a22:	4b96      	ldr	r3, [pc, #600]	; (8005c7c <LCD_Init+0x3c1c>)
 8005a24:	2204      	movs	r2, #4
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	4b93      	ldr	r3, [pc, #588]	; (8005c78 <LCD_Init+0x3c18>)
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	615a      	str	r2, [r3, #20]
 8005a2e:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <LCD_Init+0x3c18>)
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	4b90      	ldr	r3, [pc, #576]	; (8005c78 <LCD_Init+0x3c18>)
 8005a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005a3c:	4b8e      	ldr	r3, [pc, #568]	; (8005c78 <LCD_Init+0x3c18>)
 8005a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a42:	611a      	str	r2, [r3, #16]
 8005a44:	4b8c      	ldr	r3, [pc, #560]	; (8005c78 <LCD_Init+0x3c18>)
 8005a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4a:	615a      	str	r2, [r3, #20]
 8005a4c:	4b8b      	ldr	r3, [pc, #556]	; (8005c7c <LCD_Init+0x3c1c>)
 8005a4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005a52:	60da      	str	r2, [r3, #12]
 8005a54:	4b88      	ldr	r3, [pc, #544]	; (8005c78 <LCD_Init+0x3c18>)
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	615a      	str	r2, [r3, #20]
 8005a5a:	4b87      	ldr	r3, [pc, #540]	; (8005c78 <LCD_Init+0x3c18>)
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	611a      	str	r2, [r3, #16]
 8005a60:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <LCD_Init+0x3c18>)
 8005a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005a68:	4b83      	ldr	r3, [pc, #524]	; (8005c78 <LCD_Init+0x3c18>)
 8005a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
 8005a70:	4b81      	ldr	r3, [pc, #516]	; (8005c78 <LCD_Init+0x3c18>)
 8005a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a76:	615a      	str	r2, [r3, #20]
 8005a78:	4b80      	ldr	r3, [pc, #512]	; (8005c7c <LCD_Init+0x3c1c>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	4b7e      	ldr	r3, [pc, #504]	; (8005c78 <LCD_Init+0x3c18>)
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	615a      	str	r2, [r3, #20]
 8005a84:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <LCD_Init+0x3c18>)
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	4b7b      	ldr	r3, [pc, #492]	; (8005c78 <LCD_Init+0x3c18>)
 8005a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005a92:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <LCD_Init+0x3c18>)
 8005a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a98:	611a      	str	r2, [r3, #16]
 8005a9a:	4b77      	ldr	r3, [pc, #476]	; (8005c78 <LCD_Init+0x3c18>)
 8005a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa0:	615a      	str	r2, [r3, #20]
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <LCD_Init+0x3c1c>)
 8005aa4:	222e      	movs	r2, #46	; 0x2e
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	4b73      	ldr	r3, [pc, #460]	; (8005c78 <LCD_Init+0x3c18>)
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	615a      	str	r2, [r3, #20]
 8005aae:	4b72      	ldr	r3, [pc, #456]	; (8005c78 <LCD_Init+0x3c18>)
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <LCD_Init+0x3c18>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005abc:	4b6e      	ldr	r3, [pc, #440]	; (8005c78 <LCD_Init+0x3c18>)
 8005abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac2:	611a      	str	r2, [r3, #16]
 8005ac4:	4b6c      	ldr	r3, [pc, #432]	; (8005c78 <LCD_Init+0x3c18>)
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	615a      	str	r2, [r3, #20]
 8005acc:	4b6b      	ldr	r3, [pc, #428]	; (8005c7c <LCD_Init+0x3c1c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	4b69      	ldr	r3, [pc, #420]	; (8005c78 <LCD_Init+0x3c18>)
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	615a      	str	r2, [r3, #20]
 8005ad8:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <LCD_Init+0x3c18>)
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <LCD_Init+0x3c18>)
 8005ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ae6:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <LCD_Init+0x3c18>)
 8005ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aec:	611a      	str	r2, [r3, #16]
 8005aee:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <LCD_Init+0x3c18>)
 8005af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af4:	615a      	str	r2, [r3, #20]
 8005af6:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <LCD_Init+0x3c1c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <LCD_Init+0x3c18>)
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	4b5d      	ldr	r3, [pc, #372]	; (8005c78 <LCD_Init+0x3c18>)
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	611a      	str	r2, [r3, #16]
 8005b08:	4b5b      	ldr	r3, [pc, #364]	; (8005c78 <LCD_Init+0x3c18>)
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <LCD_Init+0x3c18>)
 8005b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b16:	611a      	str	r2, [r3, #16]
 8005b18:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <LCD_Init+0x3c18>)
 8005b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1e:	615a      	str	r2, [r3, #20]
 8005b20:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <LCD_Init+0x3c1c>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	4b54      	ldr	r3, [pc, #336]	; (8005c78 <LCD_Init+0x3c18>)
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	4b52      	ldr	r3, [pc, #328]	; (8005c78 <LCD_Init+0x3c18>)
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b51      	ldr	r3, [pc, #324]	; (8005c78 <LCD_Init+0x3c18>)
 8005b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b3a:	4b4f      	ldr	r3, [pc, #316]	; (8005c78 <LCD_Init+0x3c18>)
 8005b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	4b4d      	ldr	r3, [pc, #308]	; (8005c78 <LCD_Init+0x3c18>)
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <LCD_Init+0x3c1c>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	4b49      	ldr	r3, [pc, #292]	; (8005c78 <LCD_Init+0x3c18>)
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	4b48      	ldr	r3, [pc, #288]	; (8005c78 <LCD_Init+0x3c18>)
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	4b46      	ldr	r3, [pc, #280]	; (8005c78 <LCD_Init+0x3c18>)
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005b64:	20b6      	movs	r0, #182	; 0xb6
 8005b66:	f7fa ff55 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005b6a:	4b43      	ldr	r3, [pc, #268]	; (8005c78 <LCD_Init+0x3c18>)
 8005b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b70:	611a      	str	r2, [r3, #16]
 8005b72:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <LCD_Init+0x3c18>)
 8005b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b78:	615a      	str	r2, [r3, #20]
 8005b7a:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <LCD_Init+0x3c1c>)
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <LCD_Init+0x3c18>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	615a      	str	r2, [r3, #20]
 8005b86:	4b3c      	ldr	r3, [pc, #240]	; (8005c78 <LCD_Init+0x3c18>)
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	611a      	str	r2, [r3, #16]
 8005b8c:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <LCD_Init+0x3c18>)
 8005b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b92:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005b94:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <LCD_Init+0x3c18>)
 8005b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9a:	611a      	str	r2, [r3, #16]
 8005b9c:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <LCD_Init+0x3c18>)
 8005b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba2:	615a      	str	r2, [r3, #20]
 8005ba4:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <LCD_Init+0x3c1c>)
 8005ba6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <LCD_Init+0x3c18>)
 8005bae:	2280      	movs	r2, #128	; 0x80
 8005bb0:	615a      	str	r2, [r3, #20]
 8005bb2:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <LCD_Init+0x3c18>)
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	611a      	str	r2, [r3, #16]
 8005bb8:	4b2f      	ldr	r3, [pc, #188]	; (8005c78 <LCD_Init+0x3c18>)
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <LCD_Init+0x3c18>)
 8005bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc6:	611a      	str	r2, [r3, #16]
 8005bc8:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <LCD_Init+0x3c18>)
 8005bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bce:	615a      	str	r2, [r3, #20]
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <LCD_Init+0x3c1c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <LCD_Init+0x3c18>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	615a      	str	r2, [r3, #20]
 8005bdc:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <LCD_Init+0x3c18>)
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	611a      	str	r2, [r3, #16]
 8005be2:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <LCD_Init+0x3c18>)
 8005be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <LCD_Init+0x3c18>)
 8005bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf0:	611a      	str	r2, [r3, #16]
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <LCD_Init+0x3c18>)
 8005bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf8:	615a      	str	r2, [r3, #20]
 8005bfa:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <LCD_Init+0x3c1c>)
 8005bfc:	2217      	movs	r2, #23
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <LCD_Init+0x3c18>)
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	615a      	str	r2, [r3, #20]
 8005c06:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <LCD_Init+0x3c18>)
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	611a      	str	r2, [r3, #16]
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <LCD_Init+0x3c18>)
 8005c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <LCD_Init+0x3c18>)
 8005c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1a:	611a      	str	r2, [r3, #16]
 8005c1c:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <LCD_Init+0x3c18>)
 8005c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c22:	615a      	str	r2, [r3, #20]
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <LCD_Init+0x3c1c>)
 8005c26:	2215      	movs	r2, #21
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <LCD_Init+0x3c18>)
 8005c2c:	2280      	movs	r2, #128	; 0x80
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <LCD_Init+0x3c18>)
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	611a      	str	r2, [r3, #16]
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <LCD_Init+0x3c18>)
 8005c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <LCD_Init+0x3c18>)
 8005c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c44:	611a      	str	r2, [r3, #16]
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <LCD_Init+0x3c18>)
 8005c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4c:	615a      	str	r2, [r3, #20]
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <LCD_Init+0x3c1c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <LCD_Init+0x3c18>)
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	615a      	str	r2, [r3, #20]
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <LCD_Init+0x3c18>)
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	611a      	str	r2, [r3, #16]
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <LCD_Init+0x3c18>)
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <LCD_Init+0x3c18>)
 8005c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	4b01      	ldr	r3, [pc, #4]	; (8005c78 <LCD_Init+0x3c18>)
 8005c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c76:	e003      	b.n	8005c80 <LCD_Init+0x3c20>
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	40010c00 	.word	0x40010c00
 8005c80:	615a      	str	r2, [r3, #20]
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <LCD_Init+0x3e50>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	4b8a      	ldr	r3, [pc, #552]	; (8005eb4 <LCD_Init+0x3e54>)
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	4b89      	ldr	r3, [pc, #548]	; (8005eb4 <LCD_Init+0x3e54>)
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	4b87      	ldr	r3, [pc, #540]	; (8005eb4 <LCD_Init+0x3e54>)
 8005c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005c9c:	20f0      	movs	r0, #240	; 0xf0
 8005c9e:	f7fa feb9 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005ca2:	4b84      	ldr	r3, [pc, #528]	; (8005eb4 <LCD_Init+0x3e54>)
 8005ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb0:	615a      	str	r2, [r3, #20]
 8005cb2:	4b7f      	ldr	r3, [pc, #508]	; (8005eb0 <LCD_Init+0x3e50>)
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	4b7e      	ldr	r3, [pc, #504]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cba:	2280      	movs	r2, #128	; 0x80
 8005cbc:	615a      	str	r2, [r3, #20]
 8005cbe:	4b7d      	ldr	r3, [pc, #500]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	611a      	str	r2, [r3, #16]
 8005cc4:	4b7b      	ldr	r3, [pc, #492]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005ccc:	2029      	movs	r0, #41	; 0x29
 8005cce:	f7fa fea1 	bl	8000a14 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005cd2:	20d0      	movs	r0, #208	; 0xd0
 8005cd4:	f7fa fe9e 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005cd8:	4b76      	ldr	r3, [pc, #472]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cde:	611a      	str	r2, [r3, #16]
 8005ce0:	4b74      	ldr	r3, [pc, #464]	; (8005eb4 <LCD_Init+0x3e54>)
 8005ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce6:	615a      	str	r2, [r3, #20]
 8005ce8:	4b71      	ldr	r3, [pc, #452]	; (8005eb0 <LCD_Init+0x3e50>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	4b71      	ldr	r3, [pc, #452]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	615a      	str	r2, [r3, #20]
 8005cf4:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b6e      	ldr	r3, [pc, #440]	; (8005eb4 <LCD_Init+0x3e54>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005d02:	20be      	movs	r0, #190	; 0xbe
 8005d04:	f7fa fe86 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005d08:	4b6a      	ldr	r3, [pc, #424]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d0e:	611a      	str	r2, [r3, #16]
 8005d10:	4b68      	ldr	r3, [pc, #416]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d16:	615a      	str	r2, [r3, #20]
 8005d18:	4b65      	ldr	r3, [pc, #404]	; (8005eb0 <LCD_Init+0x3e50>)
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	4b65      	ldr	r3, [pc, #404]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	615a      	str	r2, [r3, #20]
 8005d24:	4b63      	ldr	r3, [pc, #396]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	4b62      	ldr	r3, [pc, #392]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005d32:	4b60      	ldr	r3, [pc, #384]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d38:	611a      	str	r2, [r3, #16]
 8005d3a:	4b5e      	ldr	r3, [pc, #376]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d40:	615a      	str	r2, [r3, #20]
 8005d42:	4b5b      	ldr	r3, [pc, #364]	; (8005eb0 <LCD_Init+0x3e50>)
 8005d44:	22fe      	movs	r2, #254	; 0xfe
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	4b5a      	ldr	r3, [pc, #360]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	615a      	str	r2, [r3, #20]
 8005d4e:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	611a      	str	r2, [r3, #16]
 8005d54:	4b57      	ldr	r3, [pc, #348]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005d5c:	4b55      	ldr	r3, [pc, #340]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d62:	611a      	str	r2, [r3, #16]
 8005d64:	4b53      	ldr	r3, [pc, #332]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6a:	615a      	str	r2, [r3, #20]
 8005d6c:	4b50      	ldr	r3, [pc, #320]	; (8005eb0 <LCD_Init+0x3e50>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	4b50      	ldr	r3, [pc, #320]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	615a      	str	r2, [r3, #20]
 8005d78:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	4b4d      	ldr	r3, [pc, #308]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005d86:	4b4b      	ldr	r3, [pc, #300]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8c:	611a      	str	r2, [r3, #16]
 8005d8e:	4b49      	ldr	r3, [pc, #292]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <LCD_Init+0x3e50>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	60da      	str	r2, [r3, #12]
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <LCD_Init+0x3e54>)
 8005d9e:	2280      	movs	r2, #128	; 0x80
 8005da0:	615a      	str	r2, [r3, #20]
 8005da2:	4b44      	ldr	r3, [pc, #272]	; (8005eb4 <LCD_Init+0x3e54>)
 8005da4:	2280      	movs	r2, #128	; 0x80
 8005da6:	611a      	str	r2, [r3, #16]
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <LCD_Init+0x3e54>)
 8005daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005db0:	4b40      	ldr	r3, [pc, #256]	; (8005eb4 <LCD_Init+0x3e54>)
 8005db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db6:	611a      	str	r2, [r3, #16]
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <LCD_Init+0x3e54>)
 8005dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbe:	615a      	str	r2, [r3, #20]
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <LCD_Init+0x3e50>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <LCD_Init+0x3e54>)
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	615a      	str	r2, [r3, #20]
 8005dcc:	4b39      	ldr	r3, [pc, #228]	; (8005eb4 <LCD_Init+0x3e54>)
 8005dce:	2280      	movs	r2, #128	; 0x80
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <LCD_Init+0x3e54>)
 8005dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005dda:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <LCD_Init+0x3e54>)
 8005ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005de0:	611a      	str	r2, [r3, #16]
 8005de2:	4b34      	ldr	r3, [pc, #208]	; (8005eb4 <LCD_Init+0x3e54>)
 8005de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de8:	615a      	str	r2, [r3, #20]
 8005dea:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <LCD_Init+0x3e50>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	4b30      	ldr	r3, [pc, #192]	; (8005eb4 <LCD_Init+0x3e54>)
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	615a      	str	r2, [r3, #20]
 8005df6:	4b2f      	ldr	r3, [pc, #188]	; (8005eb4 <LCD_Init+0x3e54>)
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	611a      	str	r2, [r3, #16]
 8005dfc:	4b2d      	ldr	r3, [pc, #180]	; (8005eb4 <LCD_Init+0x3e54>)
 8005dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e02:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005e04:	20b8      	movs	r0, #184	; 0xb8
 8005e06:	f7fa fe05 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005e0a:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e10:	611a      	str	r2, [r3, #16]
 8005e12:	4b28      	ldr	r3, [pc, #160]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e18:	615a      	str	r2, [r3, #20]
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <LCD_Init+0x3e50>)
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e22:	2280      	movs	r2, #128	; 0x80
 8005e24:	615a      	str	r2, [r3, #20]
 8005e26:	4b23      	ldr	r3, [pc, #140]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	611a      	str	r2, [r3, #16]
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e32:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005e34:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e3a:	611a      	str	r2, [r3, #16]
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e42:	615a      	str	r2, [r3, #20]
 8005e44:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <LCD_Init+0x3e50>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	615a      	str	r2, [r3, #20]
 8005e50:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	611a      	str	r2, [r3, #16]
 8005e56:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005e5e:	20ba      	movs	r0, #186	; 0xba
 8005e60:	f7fa fdd8 	bl	8000a14 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	615a      	str	r2, [r3, #20]
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <LCD_Init+0x3e50>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e7c:	2280      	movs	r2, #128	; 0x80
 8005e7e:	615a      	str	r2, [r3, #20]
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <LCD_Init+0x3e54>)
 8005e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005e8e:	2064      	movs	r0, #100	; 0x64
 8005e90:	f7fb ff36 	bl	8001d00 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fb ffd7 	bl	8001e48 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <LCD_Init+0x3e58>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005ea0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005ea4:	f000 f80a 	bl	8005ebc <LCD_Clear>
}
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40010c00 	.word	0x40010c00
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	422201a8 	.word	0x422201a8

08005ebc <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005eca:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <LCD_Clear+0xb8>)
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <LCD_Clear+0xb8>)
 8005ed2:	885b      	ldrh	r3, [r3, #2]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <LCD_Clear+0xb8>)
 8005ee0:	889b      	ldrh	r3, [r3, #4]
 8005ee2:	f646 0204 	movw	r2, #26628	; 0x6804
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d11a      	bne.n	8005f20 <LCD_Clear+0x64>
 8005eea:	4b22      	ldr	r3, [pc, #136]	; (8005f74 <LCD_Clear+0xb8>)
 8005eec:	799b      	ldrb	r3, [r3, #6]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d116      	bne.n	8005f20 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005ef2:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <LCD_Clear+0xb8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <LCD_Clear+0xb8>)
 8005efa:	222a      	movs	r2, #42	; 0x2a
 8005efc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005efe:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <LCD_Clear+0xb8>)
 8005f00:	222b      	movs	r2, #43	; 0x2b
 8005f02:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005f04:	2100      	movs	r1, #0
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fa fe56 	bl	8000bb8 <LCD_SetCursor>
		lcddev.dir = 1;
 8005f0c:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <LCD_Clear+0xb8>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005f12:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <LCD_Clear+0xb8>)
 8005f14:	222b      	movs	r2, #43	; 0x2b
 8005f16:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <LCD_Clear+0xb8>)
 8005f1a:	222a      	movs	r2, #42	; 0x2a
 8005f1c:	819a      	strh	r2, [r3, #12]
 8005f1e:	e003      	b.n	8005f28 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005f20:	2100      	movs	r1, #0
 8005f22:	2000      	movs	r0, #0
 8005f24:	f7fa fe48 	bl	8000bb8 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005f28:	f7fa fe3a 	bl	8000ba0 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e017      	b.n	8005f62 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <LCD_Clear+0xbc>)
 8005f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f38:	611a      	str	r2, [r3, #16]
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <LCD_Clear+0xbc>)
 8005f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f40:	615a      	str	r2, [r3, #20]
 8005f42:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <LCD_Clear+0xc0>)
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	60d3      	str	r3, [r2, #12]
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <LCD_Clear+0xbc>)
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	615a      	str	r2, [r3, #20]
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <LCD_Clear+0xbc>)
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	611a      	str	r2, [r3, #16]
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <LCD_Clear+0xbc>)
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3e3      	bcc.n	8005f32 <LCD_Clear+0x76>
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200001f8 	.word	0x200001f8
 8005f78:	40011000 	.word	0x40011000
 8005f7c:	40010c00 	.word	0x40010c00

08005f80 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b08d      	sub	sp, #52	; 0x34
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	80fb      	strh	r3, [r7, #6]
 8005f92:	4603      	mov	r3, r0
 8005f94:	80bb      	strh	r3, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	807b      	strh	r3, [r7, #2]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8005fa6:	887a      	ldrh	r2, [r7, #2]
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8005fae:	883a      	ldrh	r2, [r7, #0]
 8005fb0:	88bb      	ldrh	r3, [r7, #4]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8005fba:	88bb      	ldrh	r3, [r7, #4]
 8005fbc:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dd02      	ble.n	8005fca <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e00b      	b.n	8005fe2 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e005      	b.n	8005fe2 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	425b      	negs	r3, r3
 8005fe0:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd02      	ble.n	8005fee <LCD_DrawLine+0x6e>
		incy = 1;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	e00b      	b.n	8006006 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e005      	b.n	8006006 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffe:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	425b      	negs	r3, r3
 8006004:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	429a      	cmp	r2, r3
 800600c:	dd02      	ble.n	8006014 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e001      	b.n	8006018 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006018:	2300      	movs	r3, #0
 800601a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800601c:	e02a      	b.n	8006074 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	b29b      	uxth	r3, r3
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	b292      	uxth	r2, r2
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7fb fba3 	bl	8001774 <LCD_DrawPoint>
		xerr += delta_x;
 800602e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	4413      	add	r3, r2
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 800603e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	dd07      	ble.n	8006056 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	429a      	cmp	r2, r3
 800605c:	dd07      	ble.n	800606e <LCD_DrawLine+0xee>
			yerr -= distance;
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 800606e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006070:	3301      	adds	r3, #1
 8006072:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006074:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3301      	adds	r3, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	ddcf      	ble.n	800601e <LCD_DrawLine+0x9e>
		}
	}
}
 800607e:	bf00      	nop
 8006080:	3734      	adds	r7, #52	; 0x34
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}

08006086 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006086:	b590      	push	{r4, r7, lr}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	461a      	mov	r2, r3
 8006094:	4623      	mov	r3, r4
 8006096:	80fb      	strh	r3, [r7, #6]
 8006098:	4603      	mov	r3, r0
 800609a:	80bb      	strh	r3, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
 80060a0:	4613      	mov	r3, r2
 80060a2:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 80060a4:	88bb      	ldrh	r3, [r7, #4]
 80060a6:	887a      	ldrh	r2, [r7, #2]
 80060a8:	88b9      	ldrh	r1, [r7, #4]
 80060aa:	88f8      	ldrh	r0, [r7, #6]
 80060ac:	f7ff ff68 	bl	8005f80 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 80060b0:	883b      	ldrh	r3, [r7, #0]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	88b9      	ldrh	r1, [r7, #4]
 80060b6:	88f8      	ldrh	r0, [r7, #6]
 80060b8:	f7ff ff62 	bl	8005f80 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 80060bc:	883b      	ldrh	r3, [r7, #0]
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	8839      	ldrh	r1, [r7, #0]
 80060c2:	88f8      	ldrh	r0, [r7, #6]
 80060c4:	f7ff ff5c 	bl	8005f80 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 80060c8:	883b      	ldrh	r3, [r7, #0]
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	88b9      	ldrh	r1, [r7, #4]
 80060ce:	8878      	ldrh	r0, [r7, #2]
 80060d0:	f7ff ff56 	bl	8005f80 <LCD_DrawLine>
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd90      	pop	{r4, r7, pc}

080060dc <LCD_Draw_Circle>:

// Draw a circle
//(x,y): center
//r    : radius
void LCD_Draw_Circle(uint16_t x0, uint16_t y0, uint8_t r) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	80fb      	strh	r3, [r7, #6]
 80060e6:	460b      	mov	r3, r1
 80060e8:	80bb      	strh	r3, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	70fb      	strb	r3, [r7, #3]
	int a, b;
	int di;
	a = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
	b = r;
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	613b      	str	r3, [r7, #16]
	di = 3 - (r << 1);             //判断下个点位置的标志
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	f1c3 0303 	rsb	r3, r3, #3
 80060fe:	60fb      	str	r3, [r7, #12]
	while (a <= b) {
 8006100:	e07f      	b.n	8006202 <LCD_Draw_Circle+0x126>
		LCD_DrawPoint(x0 + a, y0 - b);             //5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	b29a      	uxth	r2, r3
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	4413      	add	r3, r2
 800610a:	b298      	uxth	r0, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	b29b      	uxth	r3, r3
 8006110:	88ba      	ldrh	r2, [r7, #4]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	b29b      	uxth	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	f7fb fb2c 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 - a);             //0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	b29a      	uxth	r2, r3
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	4413      	add	r3, r2
 8006124:	b298      	uxth	r0, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	b29b      	uxth	r3, r3
 800612a:	88ba      	ldrh	r2, [r7, #4]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	4619      	mov	r1, r3
 8006132:	f7fb fb1f 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 + a);             //4
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	b29a      	uxth	r2, r3
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	4413      	add	r3, r2
 800613e:	b298      	uxth	r0, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	b29a      	uxth	r2, r3
 8006144:	88bb      	ldrh	r3, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	4619      	mov	r1, r3
 800614c:	f7fb fb12 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + a, y0 + b);             //6
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	b29a      	uxth	r2, r3
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	4413      	add	r3, r2
 8006158:	b298      	uxth	r0, r3
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	b29a      	uxth	r2, r3
 800615e:	88bb      	ldrh	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	f7fb fb05 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 + b);             //1
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	b29b      	uxth	r3, r3
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b298      	uxth	r0, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	b29a      	uxth	r2, r3
 8006178:	88bb      	ldrh	r3, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	b29b      	uxth	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	f7fb faf8 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	b29b      	uxth	r3, r3
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	b298      	uxth	r0, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	b29a      	uxth	r2, r3
 8006192:	88bb      	ldrh	r3, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	f7fb faeb 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 - b);             //2
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	b298      	uxth	r0, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	88ba      	ldrh	r2, [r7, #4]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	4619      	mov	r1, r3
 80061b4:	f7fb fade 	bl	8001774 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a);             //7
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b298      	uxth	r0, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	88ba      	ldrh	r2, [r7, #4]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7fb fad1 	bl	8001774 <LCD_DrawPoint>
		a++;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3301      	adds	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆     
		if (di < 0)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da06      	bge.n	80061ec <LCD_Draw_Circle+0x110>
			di += 4 * a + 6;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3306      	adds	r3, #6
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e00a      	b.n	8006202 <LCD_Draw_Circle+0x126>
		else {
			di += 10 + 4 * (a - b);
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	330a      	adds	r3, #10
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
			b--;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3b01      	subs	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
	while (a <= b) {
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	429a      	cmp	r2, r3
 8006208:	f77f af7b 	ble.w	8006102 <LCD_Draw_Circle+0x26>
		}
	}
}
 800620c:	bf00      	nop
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	461a      	mov	r2, r3
 8006222:	4623      	mov	r3, r4
 8006224:	80fb      	strh	r3, [r7, #6]
 8006226:	4603      	mov	r3, r0
 8006228:	80bb      	strh	r3, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
 800622e:	4613      	mov	r3, r2
 8006230:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8006232:	88bb      	ldrh	r3, [r7, #4]
 8006234:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006236:	78bb      	ldrb	r3, [r7, #2]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	b2db      	uxtb	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	78bb      	ldrb	r3, [r7, #2]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4413      	add	r3, r2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	78ba      	ldrb	r2, [r7, #2]
 8006256:	0852      	lsrs	r2, r2, #1
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	3b20      	subs	r3, #32
 8006264:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8006266:	2300      	movs	r3, #0
 8006268:	737b      	strb	r3, [r7, #13]
 800626a:	e069      	b.n	8006340 <LCD_ShowChar+0x12c>
		if (size == 12)
 800626c:	78bb      	ldrb	r3, [r7, #2]
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d10b      	bne.n	800628a <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	7b79      	ldrb	r1, [r7, #13]
 8006276:	4838      	ldr	r0, [pc, #224]	; (8006358 <LCD_ShowChar+0x144>)
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4403      	add	r3, r0
 8006282:	440b      	add	r3, r1
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e019      	b.n	80062be <LCD_ShowChar+0xaa>
		else if (size == 16)
 800628a:	78bb      	ldrb	r3, [r7, #2]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d108      	bne.n	80062a2 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	7b7b      	ldrb	r3, [r7, #13]
 8006294:	4931      	ldr	r1, [pc, #196]	; (800635c <LCD_ShowChar+0x148>)
 8006296:	0112      	lsls	r2, r2, #4
 8006298:	440a      	add	r2, r1
 800629a:	4413      	add	r3, r2
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e00d      	b.n	80062be <LCD_ShowChar+0xaa>
		else if (size == 24)
 80062a2:	78bb      	ldrb	r3, [r7, #2]
 80062a4:	2b18      	cmp	r3, #24
 80062a6:	d150      	bne.n	800634a <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	7b79      	ldrb	r1, [r7, #13]
 80062ac:	482c      	ldr	r0, [pc, #176]	; (8006360 <LCD_ShowChar+0x14c>)
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4403      	add	r3, r0
 80062b8:	440b      	add	r3, r1
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80062be:	2300      	movs	r3, #0
 80062c0:	73bb      	strb	r3, [r7, #14]
 80062c2:	e035      	b.n	8006330 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80062c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da07      	bge.n	80062dc <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80062cc:	4b25      	ldr	r3, [pc, #148]	; (8006364 <LCD_ShowChar+0x150>)
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	88b9      	ldrh	r1, [r7, #4]
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fb fa7d 	bl	80017d4 <LCD_Fast_DrawPoint>
 80062da:	e00a      	b.n	80062f2 <LCD_ShowChar+0xde>
			else if (mode == 0)
 80062dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d106      	bne.n	80062f2 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80062e4:	4b20      	ldr	r3, [pc, #128]	; (8006368 <LCD_ShowChar+0x154>)
 80062e6:	881a      	ldrh	r2, [r3, #0]
 80062e8:	88b9      	ldrh	r1, [r7, #4]
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fb fa71 	bl	80017d4 <LCD_Fast_DrawPoint>
			temp <<= 1;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
			y++;
 80062f8:	88bb      	ldrh	r3, [r7, #4]
 80062fa:	3301      	adds	r3, #1
 80062fc:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 80062fe:	4b1b      	ldr	r3, [pc, #108]	; (800636c <LCD_ShowChar+0x158>)
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	88ba      	ldrh	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d222      	bcs.n	800634e <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006308:	88ba      	ldrh	r2, [r7, #4]
 800630a:	897b      	ldrh	r3, [r7, #10]
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	78bb      	ldrb	r3, [r7, #2]
 8006310:	429a      	cmp	r2, r3
 8006312:	d10a      	bne.n	800632a <LCD_ShowChar+0x116>
				y = y0;
 8006314:	897b      	ldrh	r3, [r7, #10]
 8006316:	80bb      	strh	r3, [r7, #4]
				x++;
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	3301      	adds	r3, #1
 800631c:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <LCD_ShowChar+0x158>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	429a      	cmp	r2, r3
 8006326:	d307      	bcc.n	8006338 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006328:	e012      	b.n	8006350 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	3301      	adds	r3, #1
 800632e:	73bb      	strb	r3, [r7, #14]
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b07      	cmp	r3, #7
 8006334:	d9c6      	bls.n	80062c4 <LCD_ShowChar+0xb0>
 8006336:	e000      	b.n	800633a <LCD_ShowChar+0x126>
				break;
 8006338:	bf00      	nop
	for (t = 0; t < csize; t++) {
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	3301      	adds	r3, #1
 800633e:	737b      	strb	r3, [r7, #13]
 8006340:	7b7a      	ldrb	r2, [r7, #13]
 8006342:	7a7b      	ldrb	r3, [r7, #9]
 8006344:	429a      	cmp	r2, r3
 8006346:	d391      	bcc.n	800626c <LCD_ShowChar+0x58>
 8006348:	e002      	b.n	8006350 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <LCD_ShowChar+0x13c>
				return;		//超区域了
 800634e:	bf00      	nop
			}
		}
	}
}
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bd90      	pop	{r4, r7, pc}
 8006356:	bf00      	nop
 8006358:	0800a288 	.word	0x0800a288
 800635c:	0800a6fc 	.word	0x0800a6fc
 8006360:	0800acec 	.word	0x0800acec
 8006364:	200001c8 	.word	0x200001c8
 8006368:	20000000 	.word	0x20000000
 800636c:	200001f8 	.word	0x200001f8

08006370 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b087      	sub	sp, #28
 8006374:	af02      	add	r7, sp, #8
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4623      	mov	r3, r4
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	4603      	mov	r3, r0
 8006384:	80bb      	strh	r3, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	807b      	strh	r3, [r7, #2]
 800638a:	4613      	mov	r3, r2
 800638c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	4413      	add	r3, r2
 8006398:	807b      	strh	r3, [r7, #2]
	height += y;
 800639a:	883a      	ldrh	r2, [r7, #0]
 800639c:	88bb      	ldrh	r3, [r7, #4]
 800639e:	4413      	add	r3, r2
 80063a0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80063a2:	e025      	b.n	80063f0 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d307      	bcc.n	80063bc <LCD_ShowString+0x4c>
			x = x0;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	80fb      	strh	r3, [r7, #6]
			y += size;
 80063b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80063bc:	88ba      	ldrh	r2, [r7, #4]
 80063be:	883b      	ldrh	r3, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d21e      	bcs.n	8006402 <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	781a      	ldrb	r2, [r3, #0]
 80063c8:	f897 4020 	ldrb.w	r4, [r7, #32]
 80063cc:	88b9      	ldrh	r1, [r7, #4]
 80063ce:	88f8      	ldrh	r0, [r7, #6]
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	4623      	mov	r3, r4
 80063d6:	f7ff ff1d 	bl	8006214 <LCD_ShowChar>
		x += size / 2;
 80063da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	4413      	add	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
		p++;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	3301      	adds	r3, #1
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b7e      	cmp	r3, #126	; 0x7e
 80063f6:	d805      	bhi.n	8006404 <LCD_ShowString+0x94>
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b1f      	cmp	r3, #31
 80063fe:	d8d1      	bhi.n	80063a4 <LCD_ShowString+0x34>
	}
}
 8006400:	e000      	b.n	8006404 <LCD_ShowString+0x94>
			break;	//退出
 8006402:	bf00      	nop
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bd90      	pop	{r4, r7, pc}

0800640c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8006412:	f001 f9a5 	bl	8007760 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8006416:	f000 f905 	bl	8006624 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800641a:	f000 f9eb 	bl	80067f4 <MX_GPIO_Init>
    MX_TIM3_Init();
 800641e:	f000 f947 	bl	80066b0 <MX_TIM3_Init>
    MX_USART2_UART_Init();
 8006422:	f000 f9bd 	bl	80067a0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8006426:	f000 f991 	bl	800674c <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 800642a:	486b      	ldr	r0, [pc, #428]	; (80065d8 <main+0x1cc>)
 800642c:	f002 fa68 	bl	8008900 <HAL_TIM_Base_Start_IT>
    LCD_Init();
 8006430:	f7fb fe16 	bl	8002060 <LCD_Init>
    HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 8006434:	4b69      	ldr	r3, [pc, #420]	; (80065dc <main+0x1d0>)
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	b291      	uxth	r1, r2
 800643c:	4a67      	ldr	r2, [pc, #412]	; (80065dc <main+0x1d0>)
 800643e:	8011      	strh	r1, [r2, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	4b67      	ldr	r3, [pc, #412]	; (80065e0 <main+0x1d4>)
 8006444:	4413      	add	r3, r2
 8006446:	2201      	movs	r2, #1
 8006448:	4619      	mov	r1, r3
 800644a:	4866      	ldr	r0, [pc, #408]	; (80065e4 <main+0x1d8>)
 800644c:	f002 ff09 	bl	8009262 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 8006450:	4b65      	ldr	r3, [pc, #404]	; (80065e8 <main+0x1dc>)
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	b291      	uxth	r1, r2
 8006458:	4a63      	ldr	r2, [pc, #396]	; (80065e8 <main+0x1dc>)
 800645a:	8011      	strh	r1, [r2, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	4b63      	ldr	r3, [pc, #396]	; (80065ec <main+0x1e0>)
 8006460:	4413      	add	r3, r2
 8006462:	2201      	movs	r2, #1
 8006464:	4619      	mov	r1, r3
 8006466:	4862      	ldr	r0, [pc, #392]	; (80065f0 <main+0x1e4>)
 8006468:	f002 fefb 	bl	8009262 <HAL_UART_Receive_IT>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        if (IsSendingMessage2) {
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <main+0x1e8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d011      	beq.n	8006498 <main+0x8c>
            POINT_COLOR = BLUE;
 8006474:	4b60      	ldr	r3, [pc, #384]	; (80065f8 <main+0x1ec>)
 8006476:	221f      	movs	r2, #31
 8006478:	801a      	strh	r2, [r3, #0]
            NotationMsg2();
 800647a:	f000 ff97 	bl	80073ac <NotationMsg2>
            DisplayString(message2, 0);
 800647e:	2100      	movs	r1, #0
 8006480:	485e      	ldr	r0, [pc, #376]	; (80065fc <main+0x1f0>)
 8006482:	f000 fa59 	bl	8006938 <DisplayString>
            IsSendingMessage2 = 0;
 8006486:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <main+0x1e8>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
            memset(message2, 0, sizeof message2);
 800648c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006490:	2100      	movs	r1, #0
 8006492:	485a      	ldr	r0, [pc, #360]	; (80065fc <main+0x1f0>)
 8006494:	f003 fa66 	bl	8009964 <memset>
        }
        if (IsSendingMessage1) {
 8006498:	4b59      	ldr	r3, [pc, #356]	; (8006600 <main+0x1f4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d011      	beq.n	80064c4 <main+0xb8>
            POINT_COLOR = BLACK;
 80064a0:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <main+0x1ec>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	801a      	strh	r2, [r3, #0]
            NotationMsg1();
 80064a6:	f000 ff51 	bl	800734c <NotationMsg1>
            DisplayString(message1, 1);
 80064aa:	2101      	movs	r1, #1
 80064ac:	4855      	ldr	r0, [pc, #340]	; (8006604 <main+0x1f8>)
 80064ae:	f000 fa43 	bl	8006938 <DisplayString>
            IsSendingMessage1 = 0;
 80064b2:	4b53      	ldr	r3, [pc, #332]	; (8006600 <main+0x1f4>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
            memset(message1, 0, sizeof message1);
 80064b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80064bc:	2100      	movs	r1, #0
 80064be:	4851      	ldr	r0, [pc, #324]	; (8006604 <main+0x1f8>)
 80064c0:	f003 fa50 	bl	8009964 <memset>
        }
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        POINT_COLOR = BLACK;
 80064c4:	4b4c      	ldr	r3, [pc, #304]	; (80065f8 <main+0x1ec>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	801a      	strh	r2, [r3, #0]
        LCD_DrawRectangle(0, 0, 240, 20);
 80064ca:	2314      	movs	r3, #20
 80064cc:	22f0      	movs	r2, #240	; 0xf0
 80064ce:	2100      	movs	r1, #0
 80064d0:	2000      	movs	r0, #0
 80064d2:	f7ff fdd8 	bl	8006086 <LCD_DrawRectangle>
        LCD_DrawRectangle(0, 20, 20, 320);
 80064d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80064da:	2214      	movs	r2, #20
 80064dc:	2114      	movs	r1, #20
 80064de:	2000      	movs	r0, #0
 80064e0:	f7ff fdd1 	bl	8006086 <LCD_DrawRectangle>
        LCD_DrawRectangle(220, 20, 240, 320);
 80064e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80064e8:	22f0      	movs	r2, #240	; 0xf0
 80064ea:	2114      	movs	r1, #20
 80064ec:	20dc      	movs	r0, #220	; 0xdc
 80064ee:	f7ff fdca 	bl	8006086 <LCD_DrawRectangle>
        //MATE'S MESSAGE
        POINT_COLOR = BLUE;
 80064f2:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <main+0x1ec>)
 80064f4:	221f      	movs	r2, #31
 80064f6:	801a      	strh	r2, [r3, #0]
        LCD_ShowString(10, 5, 90, 10, 12, (uint8_t *) "192.168.0.123");
 80064f8:	4b43      	ldr	r3, [pc, #268]	; (8006608 <main+0x1fc>)
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	230c      	movs	r3, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	230a      	movs	r3, #10
 8006502:	225a      	movs	r2, #90	; 0x5a
 8006504:	2105      	movs	r1, #5
 8006506:	200a      	movs	r0, #10
 8006508:	f7ff ff32 	bl	8006370 <LCD_ShowString>
        //MY MESSAGE
        POINT_COLOR = BLACK;
 800650c:	4b3a      	ldr	r3, [pc, #232]	; (80065f8 <main+0x1ec>)
 800650e:	2200      	movs	r2, #0
 8006510:	801a      	strh	r2, [r3, #0]
        LCD_ShowString(145, 5, 90, 10, 12, (uint8_t *) "Team MacroHard");
 8006512:	4b3e      	ldr	r3, [pc, #248]	; (800660c <main+0x200>)
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	230c      	movs	r3, #12
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	230a      	movs	r3, #10
 800651c:	225a      	movs	r2, #90	; 0x5a
 800651e:	2105      	movs	r1, #5
 8006520:	2091      	movs	r0, #145	; 0x91
 8006522:	f7ff ff25 	bl	8006370 <LCD_ShowString>

        //Check Connection Status
        if (IsSetUp) {
 8006526:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <main+0x204>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d09e      	beq.n	800646c <main+0x60>
            if (ConnectionFail(CheckConnectionStatus, "4", "5", DefaultTimeout)) {
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <main+0x208>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a39      	ldr	r2, [pc, #228]	; (8006618 <main+0x20c>)
 8006534:	4939      	ldr	r1, [pc, #228]	; (800661c <main+0x210>)
 8006536:	483a      	ldr	r0, [pc, #232]	; (8006620 <main+0x214>)
 8006538:	f000 fbd4 	bl	8006ce4 <ConnectionFail>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d022      	beq.n	8006588 <main+0x17c>
                POINT_COLOR = RED;
 8006542:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <main+0x1ec>)
 8006544:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006548:	801a      	strh	r2, [r3, #0]
                LCD_Draw_Circle(120, 10, 6);
 800654a:	2206      	movs	r2, #6
 800654c:	210a      	movs	r1, #10
 800654e:	2078      	movs	r0, #120	; 0x78
 8006550:	f7ff fdc4 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 5);
 8006554:	2205      	movs	r2, #5
 8006556:	210a      	movs	r1, #10
 8006558:	2078      	movs	r0, #120	; 0x78
 800655a:	f7ff fdbf 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 4);
 800655e:	2204      	movs	r2, #4
 8006560:	210a      	movs	r1, #10
 8006562:	2078      	movs	r0, #120	; 0x78
 8006564:	f7ff fdba 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 3);
 8006568:	2203      	movs	r2, #3
 800656a:	210a      	movs	r1, #10
 800656c:	2078      	movs	r0, #120	; 0x78
 800656e:	f7ff fdb5 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 2);
 8006572:	2202      	movs	r2, #2
 8006574:	210a      	movs	r1, #10
 8006576:	2078      	movs	r0, #120	; 0x78
 8006578:	f7ff fdb0 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 1);
 800657c:	2201      	movs	r2, #1
 800657e:	210a      	movs	r1, #10
 8006580:	2078      	movs	r0, #120	; 0x78
 8006582:	f7ff fdab 	bl	80060dc <LCD_Draw_Circle>
 8006586:	e771      	b.n	800646c <main+0x60>
                //DrawCircle(120, 10, 5);
            } else {
                POINT_COLOR = GREEN;
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <main+0x1ec>)
 800658a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800658e:	801a      	strh	r2, [r3, #0]
                LCD_Draw_Circle(120, 10, 6);
 8006590:	2206      	movs	r2, #6
 8006592:	210a      	movs	r1, #10
 8006594:	2078      	movs	r0, #120	; 0x78
 8006596:	f7ff fda1 	bl	80060dc <LCD_Draw_Circle>
                POINT_COLOR = WHITE;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <main+0x1ec>)
 800659c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065a0:	801a      	strh	r2, [r3, #0]
                LCD_Draw_Circle(120, 10, 5);
 80065a2:	2205      	movs	r2, #5
 80065a4:	210a      	movs	r1, #10
 80065a6:	2078      	movs	r0, #120	; 0x78
 80065a8:	f7ff fd98 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 4);
 80065ac:	2204      	movs	r2, #4
 80065ae:	210a      	movs	r1, #10
 80065b0:	2078      	movs	r0, #120	; 0x78
 80065b2:	f7ff fd93 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 3);
 80065b6:	2203      	movs	r2, #3
 80065b8:	210a      	movs	r1, #10
 80065ba:	2078      	movs	r0, #120	; 0x78
 80065bc:	f7ff fd8e 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 2);
 80065c0:	2202      	movs	r2, #2
 80065c2:	210a      	movs	r1, #10
 80065c4:	2078      	movs	r0, #120	; 0x78
 80065c6:	f7ff fd89 	bl	80060dc <LCD_Draw_Circle>
                LCD_Draw_Circle(120, 10, 1);
 80065ca:	2201      	movs	r2, #1
 80065cc:	210a      	movs	r1, #10
 80065ce:	2078      	movs	r0, #120	; 0x78
 80065d0:	f7ff fd84 	bl	80060dc <LCD_Draw_Circle>
        if (IsSendingMessage2) {
 80065d4:	e74a      	b.n	800646c <main+0x60>
 80065d6:	bf00      	nop
 80065d8:	200009d8 	.word	0x200009d8
 80065dc:	200001e0 	.word	0x200001e0
 80065e0:	200025f8 	.word	0x200025f8
 80065e4:	20001da8 	.word	0x20001da8
 80065e8:	200001e2 	.word	0x200001e2
 80065ec:	20000a20 	.word	0x20000a20
 80065f0:	200025b8 	.word	0x200025b8
 80065f4:	200001d8 	.word	0x200001d8
 80065f8:	200001c8 	.word	0x200001c8
 80065fc:	20001de8 	.word	0x20001de8
 8006600:	200001d0 	.word	0x200001d0
 8006604:	20000208 	.word	0x20000208
 8006608:	0800a1e4 	.word	0x0800a1e4
 800660c:	0800a1f4 	.word	0x0800a1f4
 8006610:	200001e8 	.word	0x200001e8
 8006614:	2000010c 	.word	0x2000010c
 8006618:	0800a204 	.word	0x0800a204
 800661c:	0800a208 	.word	0x0800a208
 8006620:	20000114 	.word	0x20000114

08006624 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b090      	sub	sp, #64	; 0x40
 8006628:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	2228      	movs	r2, #40	; 0x28
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f003 f996 	bl	8009964 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	605a      	str	r2, [r3, #4]
 8006640:	609a      	str	r2, [r3, #8]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	611a      	str	r2, [r3, #16]

    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006646:	2301      	movs	r3, #1
 8006648:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800664a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800664e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006650:	2300      	movs	r3, #0
 8006652:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006654:	2301      	movs	r3, #1
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006658:	2302      	movs	r3, #2
 800665a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800665c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006660:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006662:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006668:	f107 0318 	add.w	r3, r7, #24
 800666c:	4618      	mov	r0, r3
 800666e:	f001 fcdb 	bl	8008028 <HAL_RCC_OscConfig>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <SystemClock_Config+0x58>
        Error_Handler();
 8006678:	f000 fec8 	bl	800740c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800667c:	230f      	movs	r3, #15
 800667e:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006680:	2302      	movs	r3, #2
 8006682:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800668c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	2102      	movs	r1, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f001 ff46 	bl	8008528 <HAL_RCC_ClockConfig>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <SystemClock_Config+0x82>
        Error_Handler();
 80066a2:	f000 feb3 	bl	800740c <Error_Handler>
    }
}
 80066a6:	bf00      	nop
 80066a8:	3740      	adds	r7, #64	; 0x40
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <MX_TIM3_Init>:
/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066b6:	f107 0308 	add.w	r3, r7, #8
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066c4:	463b      	mov	r3, r7
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <MX_TIM3_Init+0x94>)
 80066ce:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <MX_TIM3_Init+0x98>)
 80066d0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 7199;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <MX_TIM3_Init+0x94>)
 80066d4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80066d8:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <MX_TIM3_Init+0x94>)
 80066dc:	2200      	movs	r2, #0
 80066de:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 9999;
 80066e0:	4b18      	ldr	r3, [pc, #96]	; (8006744 <MX_TIM3_Init+0x94>)
 80066e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80066e6:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <MX_TIM3_Init+0x94>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ee:	4b15      	ldr	r3, [pc, #84]	; (8006744 <MX_TIM3_Init+0x94>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <MX_TIM3_Init+0x94>)
 80066f6:	f002 f8b3 	bl	8008860 <HAL_TIM_Base_Init>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_TIM3_Init+0x54>
        Error_Handler();
 8006700:	f000 fe84 	bl	800740c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006708:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	4619      	mov	r1, r3
 8006710:	480c      	ldr	r0, [pc, #48]	; (8006744 <MX_TIM3_Init+0x94>)
 8006712:	f002 fa5d 	bl	8008bd0 <HAL_TIM_ConfigClockSource>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_TIM3_Init+0x70>
        Error_Handler();
 800671c:	f000 fe76 	bl	800740c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006720:	2300      	movs	r3, #0
 8006722:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006724:	2300      	movs	r3, #0
 8006726:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8006728:	463b      	mov	r3, r7
 800672a:	4619      	mov	r1, r3
 800672c:	4805      	ldr	r0, [pc, #20]	; (8006744 <MX_TIM3_Init+0x94>)
 800672e:	f002 fc3b 	bl	8008fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_TIM3_Init+0x8c>
        Error_Handler();
 8006738:	f000 fe68 	bl	800740c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200009d8 	.word	0x200009d8
 8006748:	40000400 	.word	0x40000400

0800674c <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <MX_USART1_UART_Init+0x50>)
 8006754:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800675c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006772:	220c      	movs	r2, #12
 8006774:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_USART1_UART_Init+0x4c>)
 8006784:	f002 fc8e 	bl	80090a4 <HAL_UART_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800678e:	f000 fe3d 	bl	800740c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20001da8 	.word	0x20001da8
 800679c:	40013800 	.word	0x40013800

080067a0 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067a6:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <MX_USART2_UART_Init+0x50>)
 80067a8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80067aa:	4b10      	ldr	r3, [pc, #64]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067b0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067b2:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067c6:	220c      	movs	r2, #12
 80067c8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80067d6:	4805      	ldr	r0, [pc, #20]	; (80067ec <MX_USART2_UART_Init+0x4c>)
 80067d8:	f002 fc64 	bl	80090a4 <HAL_UART_Init>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80067e2:	f000 fe13 	bl	800740c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200025b8 	.word	0x200025b8
 80067f0:	40004400 	.word	0x40004400

080067f4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067fa:	f107 0310 	add.w	r3, r7, #16
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <MX_GPIO_Init+0x130>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4a45      	ldr	r2, [pc, #276]	; (8006924 <MX_GPIO_Init+0x130>)
 800680e:	f043 0320 	orr.w	r3, r3, #32
 8006812:	6193      	str	r3, [r2, #24]
 8006814:	4b43      	ldr	r3, [pc, #268]	; (8006924 <MX_GPIO_Init+0x130>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006820:	4b40      	ldr	r3, [pc, #256]	; (8006924 <MX_GPIO_Init+0x130>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	4a3f      	ldr	r2, [pc, #252]	; (8006924 <MX_GPIO_Init+0x130>)
 8006826:	f043 0304 	orr.w	r3, r3, #4
 800682a:	6193      	str	r3, [r2, #24]
 800682c:	4b3d      	ldr	r3, [pc, #244]	; (8006924 <MX_GPIO_Init+0x130>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006838:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <MX_GPIO_Init+0x130>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	4a39      	ldr	r2, [pc, #228]	; (8006924 <MX_GPIO_Init+0x130>)
 800683e:	f043 0310 	orr.w	r3, r3, #16
 8006842:	6193      	str	r3, [r2, #24]
 8006844:	4b37      	ldr	r3, [pc, #220]	; (8006924 <MX_GPIO_Init+0x130>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006856:	4834      	ldr	r0, [pc, #208]	; (8006928 <MX_GPIO_Init+0x134>)
 8006858:	f001 fb9d 	bl	8007f96 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800685c:	2200      	movs	r2, #0
 800685e:	2104      	movs	r1, #4
 8006860:	4832      	ldr	r0, [pc, #200]	; (800692c <MX_GPIO_Init+0x138>)
 8006862:	f001 fb98 	bl	8007f96 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : KEY_WK_Pin */
    GPIO_InitStruct.Pin = KEY_WK_Pin;
 8006866:	2301      	movs	r3, #1
 8006868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <MX_GPIO_Init+0x13c>)
 800686c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800686e:	2302      	movs	r3, #2
 8006870:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8006872:	f107 0310 	add.w	r3, r7, #16
 8006876:	4619      	mov	r1, r3
 8006878:	482b      	ldr	r0, [pc, #172]	; (8006928 <MX_GPIO_Init+0x134>)
 800687a:	f001 fa0b 	bl	8007c94 <HAL_GPIO_Init>

    /*Configure GPIO pin : KEY0_Pin */
    GPIO_InitStruct.Pin = KEY0_Pin;
 800687e:	2320      	movs	r3, #32
 8006880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <MX_GPIO_Init+0x13c>)
 8006884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006886:	2301      	movs	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800688a:	f107 0310 	add.w	r3, r7, #16
 800688e:	4619      	mov	r1, r3
 8006890:	4828      	ldr	r0, [pc, #160]	; (8006934 <MX_GPIO_Init+0x140>)
 8006892:	f001 f9ff 	bl	8007c94 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED0_Pin */
    GPIO_InitStruct.Pin = LED0_Pin;
 8006896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800689a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	2302      	movs	r3, #2
 80068a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	4619      	mov	r1, r3
 80068ae:	481e      	ldr	r0, [pc, #120]	; (8006928 <MX_GPIO_Init+0x134>)
 80068b0:	f001 f9f0 	bl	8007c94 <HAL_GPIO_Init>

    /*Configure GPIO pin : KEY1_Pin */
    GPIO_InitStruct.Pin = KEY1_Pin;
 80068b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <MX_GPIO_Init+0x13c>)
 80068bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068be:	2301      	movs	r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80068c2:	f107 0310 	add.w	r3, r7, #16
 80068c6:	4619      	mov	r1, r3
 80068c8:	4817      	ldr	r0, [pc, #92]	; (8006928 <MX_GPIO_Init+0x134>)
 80068ca:	f001 f9e3 	bl	8007c94 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED1_Pin */
    GPIO_InitStruct.Pin = LED1_Pin;
 80068ce:	2304      	movs	r3, #4
 80068d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d2:	2301      	movs	r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068da:	2302      	movs	r3, #2
 80068dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	4619      	mov	r1, r3
 80068e4:	4811      	ldr	r0, [pc, #68]	; (800692c <MX_GPIO_Init+0x138>)
 80068e6:	f001 f9d5 	bl	8007c94 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2101      	movs	r1, #1
 80068ee:	2006      	movs	r0, #6
 80068f0:	f001 f891 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80068f4:	2006      	movs	r0, #6
 80068f6:	f001 f8aa 	bl	8007a4e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 80068fa:	2201      	movs	r2, #1
 80068fc:	2101      	movs	r1, #1
 80068fe:	2017      	movs	r0, #23
 8006900:	f001 f889 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006904:	2017      	movs	r0, #23
 8006906:	f001 f8a2 	bl	8007a4e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800690a:	2202      	movs	r2, #2
 800690c:	2101      	movs	r1, #1
 800690e:	2028      	movs	r0, #40	; 0x28
 8006910:	f001 f881 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006914:	2028      	movs	r0, #40	; 0x28
 8006916:	f001 f89a 	bl	8007a4e <HAL_NVIC_EnableIRQ>

}
 800691a:	bf00      	nop
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40021000 	.word	0x40021000
 8006928:	40010800 	.word	0x40010800
 800692c:	40011400 	.word	0x40011400
 8006930:	10110000 	.word	0x10110000
 8006934:	40011000 	.word	0x40011000

08006938 <DisplayString>:
        count++;
    }
    return count-1;
}

void DisplayString(char* msg, int ismsg1) {
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693a:	b097      	sub	sp, #92	; 0x5c
 800693c:	af02      	add	r7, sp, #8
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	466b      	mov	r3, sp
 8006944:	461e      	mov	r6, r3
	int length = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
	int rows = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
	char temp[oneRow];
 800694e:	4b81      	ldr	r3, [pc, #516]	; (8006b54 <DisplayString+0x21c>)
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	1e43      	subs	r3, r0, #1
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	4603      	mov	r3, r0
 8006958:	4619      	mov	r1, r3
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	00d4      	lsls	r4, r2, #3
 8006968:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800696c:	00cb      	lsls	r3, r1, #3
 800696e:	4603      	mov	r3, r0
 8006970:	4619      	mov	r1, r3
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f04f 0400 	mov.w	r4, #0
 800697e:	00d4      	lsls	r4, r2, #3
 8006980:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006984:	00cb      	lsls	r3, r1, #3
 8006986:	4603      	mov	r3, r0
 8006988:	3307      	adds	r3, #7
 800698a:	08db      	lsrs	r3, r3, #3
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	ebad 0d03 	sub.w	sp, sp, r3
 8006992:	ab02      	add	r3, sp, #8
 8006994:	3300      	adds	r3, #0
 8006996:	623b      	str	r3, [r7, #32]
	if(ismsg1){
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 808b 	beq.w	8006ab6 <DisplayString+0x17e>
		length = message1_len;
 80069a0:	4b6d      	ldr	r3, [pc, #436]	; (8006b58 <DisplayString+0x220>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		int rows = length / oneRow + 1;
 80069a6:	4b6b      	ldr	r3, [pc, #428]	; (8006b54 <DisplayString+0x21c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80069b0:	3301      	adds	r3, #1
 80069b2:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < rows; i++) {
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	e078      	b.n	8006aac <DisplayString+0x174>
			if (i == rows - 1) {
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3b01      	subs	r3, #1
 80069be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d138      	bne.n	8006a36 <DisplayString+0xfe>
				int rest = length - i * oneRow;
 80069c4:	4b63      	ldr	r3, [pc, #396]	; (8006b54 <DisplayString+0x21c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	60fb      	str	r3, [r7, #12]
				int blank = oneRow - rest + 1;
 80069d4:	4b5f      	ldr	r3, [pc, #380]	; (8006b54 <DisplayString+0x21c>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	3301      	adds	r3, #1
 80069de:	60bb      	str	r3, [r7, #8]
				for (int j = 0; j < oneRow; j++) {
 80069e0:	2300      	movs	r3, #0
 80069e2:	643b      	str	r3, [r7, #64]	; 0x40
 80069e4:	e007      	b.n	80069f6 <DisplayString+0xbe>
					temp[j] = ' ';
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ea:	4413      	add	r3, r2
 80069ec:	2220      	movs	r2, #32
 80069ee:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < oneRow; j++) {
 80069f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f2:	3301      	adds	r3, #1
 80069f4:	643b      	str	r3, [r7, #64]	; 0x40
 80069f6:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <DisplayString+0x21c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069fc:	429a      	cmp	r2, r3
 80069fe:	dbf2      	blt.n	80069e6 <DisplayString+0xae>
				}
				for (int j = 0; j < rest; j++) {
 8006a00:	2300      	movs	r3, #0
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	e012      	b.n	8006a2c <DisplayString+0xf4>
					temp[j + blank] = msg[i * oneRow + j];
 8006a06:	4b53      	ldr	r3, [pc, #332]	; (8006b54 <DisplayString+0x21c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a0c:	fb02 f203 	mul.w	r2, r2, r3
 8006a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a12:	4413      	add	r3, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	441a      	add	r2, r3
 8006a1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	440b      	add	r3, r1
 8006a20:	7811      	ldrb	r1, [r2, #0]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	54d1      	strb	r1, [r2, r3]
				for (int j = 0; j < rest; j++) {
 8006a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a28:	3301      	adds	r3, #1
 8006a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	dbe8      	blt.n	8006a06 <DisplayString+0xce>
 8006a34:	e01a      	b.n	8006a6c <DisplayString+0x134>
				}
			} else {
				for (int j = 0; j < oneRow; j++) {
 8006a36:	2300      	movs	r3, #0
 8006a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a3a:	e012      	b.n	8006a62 <DisplayString+0x12a>
					temp[j] = msg[i * oneRow + j];
 8006a3c:	4b45      	ldr	r3, [pc, #276]	; (8006b54 <DisplayString+0x21c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a42:	fb02 f203 	mul.w	r2, r2, r3
 8006a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a48:	4413      	add	r3, r2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	6a3a      	ldr	r2, [r7, #32]
 8006a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a56:	4413      	add	r3, r2
 8006a58:	460a      	mov	r2, r1
 8006a5a:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < oneRow; j++) {
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5e:	3301      	adds	r3, #1
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a62:	4b3c      	ldr	r3, [pc, #240]	; (8006b54 <DisplayString+0x21c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	dbe7      	blt.n	8006a3c <DisplayString+0x104>
				}
			}
			LCD_ShowString(msgX, msgY, rowWidth, rowHeight, size, temp);
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	; (8006b5c <DisplayString+0x224>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	b298      	uxth	r0, r3
 8006a72:	4b3b      	ldr	r3, [pc, #236]	; (8006b60 <DisplayString+0x228>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	b299      	uxth	r1, r3
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <DisplayString+0x22c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	b29c      	uxth	r4, r3
 8006a7e:	4b3a      	ldr	r3, [pc, #232]	; (8006b68 <DisplayString+0x230>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b29d      	uxth	r5, r3
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <DisplayString+0x234>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462b      	mov	r3, r5
 8006a92:	4622      	mov	r2, r4
 8006a94:	f7ff fc6c 	bl	8006370 <LCD_ShowString>
			msgY = msgY + rowHeight;
 8006a98:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <DisplayString+0x228>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b32      	ldr	r3, [pc, #200]	; (8006b68 <DisplayString+0x230>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	4a2f      	ldr	r2, [pc, #188]	; (8006b60 <DisplayString+0x228>)
 8006aa4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < rows; i++) {
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	db82      	blt.n	80069ba <DisplayString+0x82>
 8006ab4:	e09b      	b.n	8006bee <DisplayString+0x2b6>
		}
	}else{
		length = message2_len;
 8006ab6:	4b2e      	ldr	r3, [pc, #184]	; (8006b70 <DisplayString+0x238>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
		int rows = length / oneRow + 1;
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <DisplayString+0x21c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < rows; i++) {
 8006aca:	2300      	movs	r3, #0
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ace:	e089      	b.n	8006be4 <DisplayString+0x2ac>
			if (i == rows - 1) {
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d138      	bne.n	8006b4c <DisplayString+0x214>
				int word = length - i * oneRow;
 8006ada:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <DisplayString+0x21c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	61bb      	str	r3, [r7, #24]
				int blank = oneRow - word + 1;
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <DisplayString+0x21c>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	3301      	adds	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
				for (int j = 0; j < word; j++) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006afa:	e012      	b.n	8006b22 <DisplayString+0x1ea>
					temp[j] = msg[i * oneRow + j];
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <DisplayString+0x21c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b02:	fb02 f203 	mul.w	r2, r2, r3
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	4413      	add	r3, r2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	7819      	ldrb	r1, [r3, #0]
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	4413      	add	r3, r2
 8006b18:	460a      	mov	r2, r1
 8006b1a:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < word; j++) {
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	3301      	adds	r3, #1
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	dbe8      	blt.n	8006afc <DisplayString+0x1c4>
				}
				for (int j = 0; j < blank; j++) {
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2e:	e008      	b.n	8006b42 <DisplayString+0x20a>
					temp[j+word] = ' ';
 8006b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	4413      	add	r3, r2
 8006b36:	6a3a      	ldr	r2, [r7, #32]
 8006b38:	2120      	movs	r1, #32
 8006b3a:	54d1      	strb	r1, [r2, r3]
				for (int j = 0; j < blank; j++) {
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	3301      	adds	r3, #1
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
 8006b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	dbf2      	blt.n	8006b30 <DisplayString+0x1f8>
 8006b4a:	e02b      	b.n	8006ba4 <DisplayString+0x26c>
				}
			} else {
				for (int j = 0; j < oneRow; j++) {
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b50:	e023      	b.n	8006b9a <DisplayString+0x262>
 8006b52:	bf00      	nop
 8006b54:	20000134 	.word	0x20000134
 8006b58:	200001cc 	.word	0x200001cc
 8006b5c:	2000012c 	.word	0x2000012c
 8006b60:	20000124 	.word	0x20000124
 8006b64:	20000130 	.word	0x20000130
 8006b68:	20000128 	.word	0x20000128
 8006b6c:	20000138 	.word	0x20000138
 8006b70:	200001d4 	.word	0x200001d4
					temp[j] = msg[i * oneRow + j];
 8006b74:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <DisplayString+0x2c0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b7a:	fb02 f203 	mul.w	r2, r2, r3
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	4413      	add	r3, r2
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	7819      	ldrb	r1, [r3, #0]
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	4413      	add	r3, r2
 8006b90:	460a      	mov	r2, r1
 8006b92:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < oneRow; j++) {
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	3301      	adds	r3, #1
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
 8006b9a:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <DisplayString+0x2c0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	dbe7      	blt.n	8006b74 <DisplayString+0x23c>
				}
			}
			LCD_ShowString(msgX, msgY, rowWidth, rowHeight, size, temp);
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <DisplayString+0x2c4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	b298      	uxth	r0, r3
 8006baa:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <DisplayString+0x2c8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	b299      	uxth	r1, r3
 8006bb0:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <DisplayString+0x2cc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b29c      	uxth	r4, r3
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <DisplayString+0x2d0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b29d      	uxth	r5, r3
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <DisplayString+0x2d4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	9201      	str	r2, [sp, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	462b      	mov	r3, r5
 8006bca:	4622      	mov	r2, r4
 8006bcc:	f7ff fbd0 	bl	8006370 <LCD_ShowString>
			msgY = msgY + rowHeight;
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <DisplayString+0x2c8>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <DisplayString+0x2d0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <DisplayString+0x2c8>)
 8006bdc:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < rows; i++) {
 8006bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be0:	3301      	adds	r3, #1
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	f6ff af71 	blt.w	8006ad0 <DisplayString+0x198>
 8006bee:	46b5      	mov	sp, r6
		}
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3754      	adds	r7, #84	; 0x54
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf8:	20000134 	.word	0x20000134
 8006bfc:	2000012c 	.word	0x2000012c
 8006c00:	20000124 	.word	0x20000124
 8006c04:	20000130 	.word	0x20000130
 8006c08:	20000128 	.word	0x20000128
 8006c0c:	20000138 	.word	0x20000138

08006c10 <SendCommand>:

int SendCommand(char cmd[], char expectReponse[], int time_out) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
    char *indexOK = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
    int findExpectResponse = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c28:	4827      	ldr	r0, [pc, #156]	; (8006cc8 <SendCommand+0xb8>)
 8006c2a:	f001 f9cc 	bl	8007fc6 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart2, (uint8_t *) cmd, strlen(cmd), HAL_MAX_DELAY);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7f9 fafa 	bl	8000228 <strlen>
 8006c34:	4603      	mov	r3, r0
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	4823      	ldr	r0, [pc, #140]	; (8006ccc <SendCommand+0xbc>)
 8006c40:	f002 fa7d 	bl	800913e <HAL_UART_Transmit>
    if (expectReponse && time_out) {
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d017      	beq.n	8006c7a <SendCommand+0x6a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d014      	beq.n	8006c7a <SendCommand+0x6a>
        while (--time_out) {
 8006c50:	e00d      	b.n	8006c6e <SendCommand+0x5e>
            HAL_Delay(10);
 8006c52:	200a      	movs	r0, #10
 8006c54:	f000 fde6 	bl	8007824 <HAL_Delay>
            indexOK = strstr(RxBuffer2, expectReponse);
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	481d      	ldr	r0, [pc, #116]	; (8006cd0 <SendCommand+0xc0>)
 8006c5c:	f002 feaa 	bl	80099b4 <strstr>
 8006c60:	6138      	str	r0, [r7, #16]
            if (indexOK) {
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <SendCommand+0x5e>
                findExpectResponse = 1;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
                break;
 8006c6c:	e005      	b.n	8006c7a <SendCommand+0x6a>
        while (--time_out) {
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1eb      	bne.n	8006c52 <SendCommand+0x42>
            }
        }
    }

    // Check response
    if (findExpectResponse) {
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <SendCommand+0x80>
        HAL_UART_Transmit(&huart1, "Success\r\n", 9, HAL_MAX_DELAY);
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295
 8006c84:	2209      	movs	r2, #9
 8006c86:	4913      	ldr	r1, [pc, #76]	; (8006cd4 <SendCommand+0xc4>)
 8006c88:	4813      	ldr	r0, [pc, #76]	; (8006cd8 <SendCommand+0xc8>)
 8006c8a:	f002 fa58 	bl	800913e <HAL_UART_Transmit>
 8006c8e:	e011      	b.n	8006cb4 <SendCommand+0xa4>

    } else if (time_out == 0) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <SendCommand+0x96>
        HAL_UART_Transmit(&huart1, "Timeout\r\n", 9, HAL_MAX_DELAY);
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9a:	2209      	movs	r2, #9
 8006c9c:	490f      	ldr	r1, [pc, #60]	; (8006cdc <SendCommand+0xcc>)
 8006c9e:	480e      	ldr	r0, [pc, #56]	; (8006cd8 <SendCommand+0xc8>)
 8006ca0:	f002 fa4d 	bl	800913e <HAL_UART_Transmit>
 8006ca4:	e006      	b.n	8006cb4 <SendCommand+0xa4>
    } else {
        HAL_UART_Transmit(&huart1, "Fail\r\n", 6, HAL_MAX_DELAY);
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8006caa:	2206      	movs	r2, #6
 8006cac:	490c      	ldr	r1, [pc, #48]	; (8006ce0 <SendCommand+0xd0>)
 8006cae:	480a      	ldr	r0, [pc, #40]	; (8006cd8 <SendCommand+0xc8>)
 8006cb0:	f002 fa45 	bl	800913e <HAL_UART_Transmit>
    }
    HAL_Delay(1000);
 8006cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cb8:	f000 fdb4 	bl	8007824 <HAL_Delay>
}
 8006cbc:	bf00      	nop
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40010800 	.word	0x40010800
 8006ccc:	200025b8 	.word	0x200025b8
 8006cd0:	20000a20 	.word	0x20000a20
 8006cd4:	0800a20c 	.word	0x0800a20c
 8006cd8:	20001da8 	.word	0x20001da8
 8006cdc:	0800a218 	.word	0x0800a218
 8006ce0:	0800a224 	.word	0x0800a224

08006ce4 <ConnectionFail>:

int ConnectionFail(char cmd[], char expectResponse1[], char expectResponse2[], int time_out) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
    char *indexOK1 = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
    char *indexOK2 = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61bb      	str	r3, [r7, #24]
    int findExpectResponse = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
    //HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
    if (expectResponse1 && expectResponse2 && time_out) {
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d023      	beq.n	8006d4c <ConnectionFail+0x68>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d020      	beq.n	8006d4c <ConnectionFail+0x68>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01d      	beq.n	8006d4c <ConnectionFail+0x68>
        while (--time_out) {
 8006d10:	e016      	b.n	8006d40 <ConnectionFail+0x5c>
            HAL_Delay(10);
 8006d12:	200a      	movs	r0, #10
 8006d14:	f000 fd86 	bl	8007824 <HAL_Delay>
            indexOK1 = strstr(RxBuffer2, expectResponse1);
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	480e      	ldr	r0, [pc, #56]	; (8006d54 <ConnectionFail+0x70>)
 8006d1c:	f002 fe4a 	bl	80099b4 <strstr>
 8006d20:	61f8      	str	r0, [r7, #28]
            indexOK2 = strstr(RxBuffer2, expectResponse2);
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	480b      	ldr	r0, [pc, #44]	; (8006d54 <ConnectionFail+0x70>)
 8006d26:	f002 fe45 	bl	80099b4 <strstr>
 8006d2a:	61b8      	str	r0, [r7, #24]
            if (indexOK1 || indexOK2) {
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <ConnectionFail+0x54>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <ConnectionFail+0x5c>
                findExpectResponse = 1;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
                return 1;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e005      	b.n	8006d4c <ConnectionFail+0x68>
        while (--time_out) {
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e2      	bne.n	8006d12 <ConnectionFail+0x2e>
                break;
            }
        }
    }
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000a20 	.word	0x20000a20

08006d58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	6018      	str	r0, [r3, #0]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d68:	489a      	ldr	r0, [pc, #616]	; (8006fd4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006d6a:	f001 f92c 	bl	8007fc6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4899      	ldr	r0, [pc, #612]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006d72:	f001 f928 	bl	8007fc6 <HAL_GPIO_TogglePin>
	if(Front1 < End1 - 1 && End1!=1)
 8006d76:	4b99      	ldr	r3, [pc, #612]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b98      	ldr	r3, [pc, #608]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f280 80dc 	bge.w	8006f40 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8006d88:	4b95      	ldr	r3, [pc, #596]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f000 80d7 	beq.w	8006f40 <HAL_TIM_PeriodElapsedCallback+0x1e8>
	{
		char msg[2000];
		for(int i=0;i<End1-1;i++){
 8006d92:	2300      	movs	r3, #0
 8006d94:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8006d98:	e010      	b.n	8006dbc <HAL_TIM_PeriodElapsedCallback+0x64>
			msg[i] = RxBuffer1[i];
 8006d9a:	4a92      	ldr	r2, [pc, #584]	; (8006fe4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8006d9c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8006da0:	4413      	add	r3, r2
 8006da2:	7819      	ldrb	r1, [r3, #0]
 8006da4:	f107 0208 	add.w	r2, r7, #8
 8006da8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8006dac:	4413      	add	r3, r2
 8006dae:	460a      	mov	r2, r1
 8006db0:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<End1-1;i++){
 8006db2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8006db6:	3301      	adds	r3, #1
 8006db8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8006dbc:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	dbe7      	blt.n	8006d9a <HAL_TIM_PeriodElapsedCallback+0x42>
		}
		if(End1 - 1>=5 &&msg[0] == 's' && msg[1] == 'e' && msg[2] == 'n' && msg[3] == 'd' && msg[4] ==':'){
 8006dca:	4b85      	ldr	r3, [pc, #532]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	dd78      	ble.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b73      	cmp	r3, #115	; 0x73
 8006ddc:	d173      	bne.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8006dde:	f107 0308 	add.w	r3, r7, #8
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b65      	cmp	r3, #101	; 0x65
 8006de6:	d16e      	bne.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	789b      	ldrb	r3, [r3, #2]
 8006dee:	2b6e      	cmp	r3, #110	; 0x6e
 8006df0:	d169      	bne.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	2b64      	cmp	r3, #100	; 0x64
 8006dfa:	d164      	bne.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	791b      	ldrb	r3, [r3, #4]
 8006e02:	2b3a      	cmp	r3, #58	; 0x3a
 8006e04:	d15f      	bne.n	8006ec6 <HAL_TIM_PeriodElapsedCallback+0x16e>
			IsSendingMessage1 = 1;
 8006e06:	4b78      	ldr	r3, [pc, #480]	; (8006fe8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
			char SendDataCommand[22];
			if(Mode == 1)
 8006e0c:	4b77      	ldr	r3, [pc, #476]	; (8006fec <HAL_TIM_PeriodElapsedCallback+0x294>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d109      	bne.n	8006e28 <HAL_TIM_PeriodElapsedCallback+0xd0>
				sprintf(SendDataCommand, "AT+CIPSEND=0,%d\r\n", End1-1-5);
 8006e14:	4b72      	ldr	r3, [pc, #456]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	1f9a      	subs	r2, r3, #6
 8006e1a:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006e1e:	4974      	ldr	r1, [pc, #464]	; (8006ff0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 fda7 	bl	8009974 <siprintf>
 8006e26:	e00c      	b.n	8006e42 <HAL_TIM_PeriodElapsedCallback+0xea>
			else if(Mode == 4)
 8006e28:	4b70      	ldr	r3, [pc, #448]	; (8006fec <HAL_TIM_PeriodElapsedCallback+0x294>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d108      	bne.n	8006e42 <HAL_TIM_PeriodElapsedCallback+0xea>
				sprintf(SendDataCommand, "AT+CIPSEND=%d\r\n", End1-1-5);
 8006e30:	4b6b      	ldr	r3, [pc, #428]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	1f9a      	subs	r2, r3, #6
 8006e36:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006e3a:	496e      	ldr	r1, [pc, #440]	; (8006ff4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f002 fd99 	bl	8009974 <siprintf>
			HAL_UART_Transmit(&huart2, SendDataCommand, 22, HAL_MAX_DELAY); //send command to wifi
 8006e42:	f207 71dc 	addw	r1, r7, #2012	; 0x7dc
 8006e46:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4a:	2216      	movs	r2, #22
 8006e4c:	486a      	ldr	r0, [pc, #424]	; (8006ff8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006e4e:	f002 f976 	bl	800913e <HAL_UART_Transmit>


			HAL_UART_Transmit(&huart1, &msg[5], End1-1-5, HAL_MAX_DELAY);	//message echo
 8006e52:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	3b06      	subs	r3, #6
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	1d59      	adds	r1, r3, #5
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295
 8006e64:	4865      	ldr	r0, [pc, #404]	; (8006ffc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006e66:	f002 f96a 	bl	800913e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &msg[5], End1-1-5, HAL_MAX_DELAY);	//send message to wifi
 8006e6a:	4b5d      	ldr	r3, [pc, #372]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	3b06      	subs	r3, #6
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f107 0308 	add.w	r3, r7, #8
 8006e76:	1d59      	adds	r1, r3, #5
 8006e78:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7c:	485e      	ldr	r0, [pc, #376]	; (8006ff8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006e7e:	f002 f95e 	bl	800913e <HAL_UART_Transmit>

			//Send the message to LCD Buffer
			for (int i=0; i<End1-6;i++){
 8006e82:	2300      	movs	r3, #0
 8006e84:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
 8006e88:	e010      	b.n	8006eac <HAL_TIM_PeriodElapsedCallback+0x154>
				message1[i] = msg[i+5];
 8006e8a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006e8e:	3305      	adds	r3, #5
 8006e90:	f107 0208 	add.w	r2, r7, #8
 8006e94:	5cd1      	ldrb	r1, [r2, r3]
 8006e96:	4a5a      	ldr	r2, [pc, #360]	; (8007000 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006e98:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006e9c:	4413      	add	r3, r2
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<End1-6;i++){
 8006ea2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
 8006eac:	4b4c      	ldr	r3, [pc, #304]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	3b06      	subs	r3, #6
 8006eb2:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	dbe7      	blt.n	8006e8a <HAL_TIM_PeriodElapsedCallback+0x132>
			}
			message1_len = End1 - 6;
 8006eba:	4b49      	ldr	r3, [pc, #292]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	3b06      	subs	r3, #6
 8006ec0:	4a50      	ldr	r2, [pc, #320]	; (8007004 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8006ec2:	6013      	str	r3, [r2, #0]
		if(End1 - 1>=5 &&msg[0] == 's' && msg[1] == 'e' && msg[2] == 'n' && msg[3] == 'd' && msg[4] ==':'){
 8006ec4:	e023      	b.n	8006f0e <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}else{
			msg[End1-1] = '\r';
 8006ec6:	4b46      	ldr	r3, [pc, #280]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	f107 0208 	add.w	r2, r7, #8
 8006ed0:	210d      	movs	r1, #13
 8006ed2:	54d1      	strb	r1, [r2, r3]
			msg[End1] = '\n';
 8006ed4:	4b42      	ldr	r3, [pc, #264]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	210a      	movs	r1, #10
 8006ee0:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart1,&msg,End1+1,HAL_MAX_DELAY);
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f107 0108 	add.w	r1, r7, #8
 8006eee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef2:	4842      	ldr	r0, [pc, #264]	; (8006ffc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006ef4:	f002 f923 	bl	800913e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,&msg,End1+1,HAL_MAX_DELAY);
 8006ef8:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	f04f 33ff 	mov.w	r3, #4294967295
 8006f08:	483b      	ldr	r0, [pc, #236]	; (8006ff8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006f0a:	f002 f918 	bl	800913e <HAL_UART_Transmit>
		}
		//reset USART1
		Front1 = 0;
 8006f0e:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	801a      	strh	r2, [r3, #0]
		End1 = 0;
 8006f14:	4b32      	ldr	r3, [pc, #200]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	801a      	strh	r2, [r3, #0]
		(&huart1)->RxState = 32;
 8006f1a:	4b38      	ldr	r3, [pc, #224]	; (8006ffc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 8006f22:	4b2f      	ldr	r3, [pc, #188]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	b291      	uxth	r1, r2
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006f2c:	8011      	strh	r1, [r2, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4b2c      	ldr	r3, [pc, #176]	; (8006fe4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8006f32:	4413      	add	r3, r2
 8006f34:	2201      	movs	r2, #1
 8006f36:	4619      	mov	r1, r3
 8006f38:	4830      	ldr	r0, [pc, #192]	; (8006ffc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006f3a:	f002 f992 	bl	8009262 <HAL_UART_Receive_IT>
	{
 8006f3e:	e002      	b.n	8006f46 <HAL_TIM_PeriodElapsedCallback+0x1ee>
	}else{
		message1_len = 0;
 8006f40:	4b30      	ldr	r3, [pc, #192]	; (8007004 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
	}

	if(Front2 < End2 - 1 && End2!=1)
 8006f46:	4b30      	ldr	r3, [pc, #192]	; (8007008 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b2f      	ldr	r3, [pc, #188]	; (800700c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	429a      	cmp	r2, r3
 8006f54:	f280 80bb 	bge.w	80070ce <HAL_TIM_PeriodElapsedCallback+0x376>
 8006f58:	4b2c      	ldr	r3, [pc, #176]	; (800700c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	f000 80b6 	beq.w	80070ce <HAL_TIM_PeriodElapsedCallback+0x376>
	{
		if(RxBuffer2[2] == '+' && RxBuffer2[3] == 'I' && RxBuffer2[4] == 'P')
 8006f62:	4b2b      	ldr	r3, [pc, #172]	; (8007010 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006f64:	789b      	ldrb	r3, [r3, #2]
 8006f66:	2b2b      	cmp	r3, #43	; 0x2b
 8006f68:	d178      	bne.n	800705c <HAL_TIM_PeriodElapsedCallback+0x304>
 8006f6a:	4b29      	ldr	r3, [pc, #164]	; (8007010 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	2b49      	cmp	r3, #73	; 0x49
 8006f70:	d174      	bne.n	800705c <HAL_TIM_PeriodElapsedCallback+0x304>
 8006f72:	4b27      	ldr	r3, [pc, #156]	; (8007010 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006f74:	791b      	ldrb	r3, [r3, #4]
 8006f76:	2b50      	cmp	r3, #80	; 0x50
 8006f78:	d170      	bne.n	800705c <HAL_TIM_PeriodElapsedCallback+0x304>
		{
			int index = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
			for(int i= 5;i<End2-1;i++)
 8006f80:	2305      	movs	r3, #5
 8006f82:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 8006f86:	e010      	b.n	8006faa <HAL_TIM_PeriodElapsedCallback+0x252>
			{
				if(RxBuffer2[i] == ':')
 8006f88:	4a21      	ldr	r2, [pc, #132]	; (8007010 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006f8a:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b3a      	cmp	r3, #58	; 0x3a
 8006f94:	d104      	bne.n	8006fa0 <HAL_TIM_PeriodElapsedCallback+0x248>
				{
					index = i;
 8006f96:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8006f9a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
					break;
 8006f9e:	e00b      	b.n	8006fb8 <HAL_TIM_PeriodElapsedCallback+0x260>
			for(int i= 5;i<End2-1;i++)
 8006fa0:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	dbe7      	blt.n	8006f88 <HAL_TIM_PeriodElapsedCallback+0x230>
				}
			}
			//HAL_UART_Transmit(&huart1,&msg,strlen(msg),HAL_MAX_DELAY);
			if(index>0){
 8006fb8:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd4d      	ble.n	800705c <HAL_TIM_PeriodElapsedCallback+0x304>
				IsSendingMessage2 = 1;
 8006fc0:	4b14      	ldr	r3, [pc, #80]	; (8007014 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
				for (int i=index+1; i<End2-1;i++)
 8006fc6:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8006fd0:	e034      	b.n	800703c <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8006fd2:	bf00      	nop
 8006fd4:	40010800 	.word	0x40010800
 8006fd8:	40011400 	.word	0x40011400
 8006fdc:	200001dc 	.word	0x200001dc
 8006fe0:	200001e0 	.word	0x200001e0
 8006fe4:	200025f8 	.word	0x200025f8
 8006fe8:	200001d0 	.word	0x200001d0
 8006fec:	200001e4 	.word	0x200001e4
 8006ff0:	0800a22c 	.word	0x0800a22c
 8006ff4:	0800a240 	.word	0x0800a240
 8006ff8:	200025b8 	.word	0x200025b8
 8006ffc:	20001da8 	.word	0x20001da8
 8007000:	20000208 	.word	0x20000208
 8007004:	200001cc 	.word	0x200001cc
 8007008:	200001de 	.word	0x200001de
 800700c:	200001e2 	.word	0x200001e2
 8007010:	20000a20 	.word	0x20000a20
 8007014:	200001d8 	.word	0x200001d8
					message2[i-index-1] = RxBuffer2[i];
 8007018:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 800701c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	492e      	ldr	r1, [pc, #184]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8007026:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 800702a:	440a      	add	r2, r1
 800702c:	7811      	ldrb	r1, [r2, #0]
 800702e:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8007030:	54d1      	strb	r1, [r2, r3]
				for (int i=index+1; i<End2-1;i++)
 8007032:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8007036:	3301      	adds	r3, #1
 8007038:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 8007046:	429a      	cmp	r2, r3
 8007048:	dbe6      	blt.n	8007018 <HAL_TIM_PeriodElapsedCallback+0x2c0>
				message2_len = End2 - index - 2;
 800704a:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	3b02      	subs	r3, #2
 8007058:	4a24      	ldr	r2, [pc, #144]	; (80070ec <HAL_TIM_PeriodElapsedCallback+0x394>)
 800705a:	6013      	str	r3, [r2, #0]
			}
		}
		uint8_t a[3];
		sprintf(a,"%d",message2_len);
 800705c:	4b23      	ldr	r3, [pc, #140]	; (80070ec <HAL_TIM_PeriodElapsedCallback+0x394>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8007064:	4922      	ldr	r1, [pc, #136]	; (80070f0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8007066:	4618      	mov	r0, r3
 8007068:	f002 fc84 	bl	8009974 <siprintf>

		HAL_UART_Transmit(&huart1, &a, strlen(a), HAL_MAX_DELAY);
 800706c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8007070:	4618      	mov	r0, r3
 8007072:	f7f9 f8d9 	bl	8000228 <strlen>
 8007076:	4603      	mov	r3, r0
 8007078:	b29a      	uxth	r2, r3
 800707a:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	481c      	ldr	r0, [pc, #112]	; (80070f4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8007084:	f002 f85b 	bl	800913e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &RxBuffer2[0], End2-1, HAL_MAX_DELAY);
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	4912      	ldr	r1, [pc, #72]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8007096:	4817      	ldr	r0, [pc, #92]	; (80070f4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8007098:	f002 f851 	bl	800913e <HAL_UART_Transmit>
		Front2 = 0;
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800709e:	2200      	movs	r2, #0
 80070a0:	801a      	strh	r2, [r3, #0]
		End2 = 0;
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	801a      	strh	r2, [r3, #0]
		(&huart2)->RxState = 32;
 80070a8:	4b14      	ldr	r3, [pc, #80]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	b291      	uxth	r1, r2
 80070b8:	4a0b      	ldr	r2, [pc, #44]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80070ba:	8011      	strh	r1, [r2, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80070c0:	4413      	add	r3, r2
 80070c2:	2201      	movs	r2, #1
 80070c4:	4619      	mov	r1, r3
 80070c6:	480d      	ldr	r0, [pc, #52]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80070c8:	f002 f8cb 	bl	8009262 <HAL_UART_Receive_IT>
	{
 80070cc:	e002      	b.n	80070d4 <HAL_TIM_PeriodElapsedCallback+0x37c>
	}else{
		message2_len = 0;
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <HAL_TIM_PeriodElapsedCallback+0x394>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
	}
}
 80070d4:	bf00      	nop
 80070d6:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000a20 	.word	0x20000a20
 80070e4:	20001de8 	.word	0x20001de8
 80070e8:	200001e2 	.word	0x200001e2
 80070ec:	200001d4 	.word	0x200001d4
 80070f0:	0800a250 	.word	0x0800a250
 80070f4:	20001da8 	.word	0x20001da8
 80070f8:	200001de 	.word	0x200001de
 80070fc:	200025b8 	.word	0x200025b8

08007100 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a13      	ldr	r2, [pc, #76]	; (8007158 <HAL_UART_RxCpltCallback+0x58>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10d      	bne.n	800712c <HAL_UART_RxCpltCallback+0x2c>
        HAL_UART_Receive_IT(&huart1, &RxBuffer1[End1++], 1);
 8007110:	4b12      	ldr	r3, [pc, #72]	; (800715c <HAL_UART_RxCpltCallback+0x5c>)
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	b291      	uxth	r1, r2
 8007118:	4a10      	ldr	r2, [pc, #64]	; (800715c <HAL_UART_RxCpltCallback+0x5c>)
 800711a:	8011      	strh	r1, [r2, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_UART_RxCpltCallback+0x60>)
 8007120:	4413      	add	r3, r2
 8007122:	2201      	movs	r2, #1
 8007124:	4619      	mov	r1, r3
 8007126:	480c      	ldr	r0, [pc, #48]	; (8007158 <HAL_UART_RxCpltCallback+0x58>)
 8007128:	f002 f89b 	bl	8009262 <HAL_UART_Receive_IT>
    }
    if (huart == &huart2) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <HAL_UART_RxCpltCallback+0x64>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d10d      	bne.n	8007150 <HAL_UART_RxCpltCallback+0x50>
        HAL_UART_Receive_IT(&huart2, &RxBuffer2[End2++], 1);
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <HAL_UART_RxCpltCallback+0x68>)
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	b291      	uxth	r1, r2
 800713c:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <HAL_UART_RxCpltCallback+0x68>)
 800713e:	8011      	strh	r1, [r2, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <HAL_UART_RxCpltCallback+0x6c>)
 8007144:	4413      	add	r3, r2
 8007146:	2201      	movs	r2, #1
 8007148:	4619      	mov	r1, r3
 800714a:	4806      	ldr	r0, [pc, #24]	; (8007164 <HAL_UART_RxCpltCallback+0x64>)
 800714c:	f002 f889 	bl	8009262 <HAL_UART_Receive_IT>
    }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20001da8 	.word	0x20001da8
 800715c:	200001e0 	.word	0x200001e0
 8007160:	200025f8 	.word	0x200025f8
 8007164:	200025b8 	.word	0x200025b8
 8007168:	200001e2 	.word	0x200001e2
 800716c:	20000a20 	.word	0x20000a20

08007170 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	2b20      	cmp	r3, #32
 800717e:	d006      	beq.n	800718e <HAL_GPIO_EXTI_Callback+0x1e>
 8007180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007184:	d04e      	beq.n	8007224 <HAL_GPIO_EXTI_Callback+0xb4>
 8007186:	2b01      	cmp	r3, #1
 8007188:	f000 809e 	beq.w	80072c8 <HAL_GPIO_EXTI_Callback+0x158>
                //SendCommand(CloseSerialNet, ResponseOK, DefaultTimeout);
                SendCommand(CloseConnection, ResponseOK, DefaultTimeout);
            }
            break;
        default:
            break;
 800718c:	e0b0      	b.n	80072f0 <HAL_GPIO_EXTI_Callback+0x180>
            if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800718e:	2120      	movs	r1, #32
 8007190:	4859      	ldr	r0, [pc, #356]	; (80072f8 <HAL_GPIO_EXTI_Callback+0x188>)
 8007192:	f000 fee9 	bl	8007f68 <HAL_GPIO_ReadPin>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 80a4 	bne.w	80072e6 <HAL_GPIO_EXTI_Callback+0x176>
                IsSetUp = 0;
 800719e:	4b57      	ldr	r3, [pc, #348]	; (80072fc <HAL_GPIO_EXTI_Callback+0x18c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, "SetSTA\r\n", 8, HAL_MAX_DELAY);
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	2208      	movs	r2, #8
 80071aa:	4955      	ldr	r1, [pc, #340]	; (8007300 <HAL_GPIO_EXTI_Callback+0x190>)
 80071ac:	4855      	ldr	r0, [pc, #340]	; (8007304 <HAL_GPIO_EXTI_Callback+0x194>)
 80071ae:	f001 ffc6 	bl	800913e <HAL_UART_Transmit>
                SendCommand(SetSTAMode, ResponseOK, DefaultTimeout);
 80071b2:	4b55      	ldr	r3, [pc, #340]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	4954      	ldr	r1, [pc, #336]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80071ba:	4855      	ldr	r0, [pc, #340]	; (8007310 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80071bc:	f7ff fd28 	bl	8006c10 <SendCommand>
                SendCommand(Reset, ResponseOK, DefaultTimeout);
 80071c0:	4b51      	ldr	r3, [pc, #324]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	4951      	ldr	r1, [pc, #324]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80071c8:	4852      	ldr	r0, [pc, #328]	; (8007314 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80071ca:	f7ff fd21 	bl	8006c10 <SendCommand>
                HAL_Delay(1000);
 80071ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071d2:	f000 fb27 	bl	8007824 <HAL_Delay>
                HAL_Delay(1000);
 80071d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071da:	f000 fb23 	bl	8007824 <HAL_Delay>
                SendCommand(Default_ConnectToWiFi, ResponseOK, DefaultTimeout);
 80071de:	4b4a      	ldr	r3, [pc, #296]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	4949      	ldr	r1, [pc, #292]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80071e6:	484c      	ldr	r0, [pc, #304]	; (8007318 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80071e8:	f7ff fd12 	bl	8006c10 <SendCommand>
                SendCommand(SetSingleConnect, ResponseOK, DefaultTimeout);
 80071ec:	4b46      	ldr	r3, [pc, #280]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	4946      	ldr	r1, [pc, #280]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80071f4:	4849      	ldr	r0, [pc, #292]	; (800731c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80071f6:	f7ff fd0b 	bl	8006c10 <SendCommand>
                SendCommand(Default_ConnectToTCPServer, ResponseOK, DefaultTimeout);
 80071fa:	4b43      	ldr	r3, [pc, #268]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	4942      	ldr	r1, [pc, #264]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 8007202:	4847      	ldr	r0, [pc, #284]	; (8007320 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8007204:	f7ff fd04 	bl	8006c10 <SendCommand>
                Mode = 4;
 8007208:	4b46      	ldr	r3, [pc, #280]	; (8007324 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800720a:	2204      	movs	r2, #4
 800720c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	2208      	movs	r2, #8
 8007214:	4944      	ldr	r1, [pc, #272]	; (8007328 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8007216:	483b      	ldr	r0, [pc, #236]	; (8007304 <HAL_GPIO_EXTI_Callback+0x194>)
 8007218:	f001 ff91 	bl	800913e <HAL_UART_Transmit>
                IsSetUp = 1;
 800721c:	4b37      	ldr	r3, [pc, #220]	; (80072fc <HAL_GPIO_EXTI_Callback+0x18c>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
            break;
 8007222:	e060      	b.n	80072e6 <HAL_GPIO_EXTI_Callback+0x176>
            if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007228:	4840      	ldr	r0, [pc, #256]	; (800732c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800722a:	f000 fe9d 	bl	8007f68 <HAL_GPIO_ReadPin>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d15a      	bne.n	80072ea <HAL_GPIO_EXTI_Callback+0x17a>
                IsSetUp = 0;
 8007234:	4b31      	ldr	r3, [pc, #196]	; (80072fc <HAL_GPIO_EXTI_Callback+0x18c>)
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, "SetAP\r\n", 7, HAL_MAX_DELAY);
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	2207      	movs	r2, #7
 8007240:	493b      	ldr	r1, [pc, #236]	; (8007330 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8007242:	4830      	ldr	r0, [pc, #192]	; (8007304 <HAL_GPIO_EXTI_Callback+0x194>)
 8007244:	f001 ff7b 	bl	800913e <HAL_UART_Transmit>
                SendCommand(SetAPMode, ResponseOK, DefaultTimeout);
 8007248:	4b2f      	ldr	r3, [pc, #188]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	492f      	ldr	r1, [pc, #188]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 8007250:	4838      	ldr	r0, [pc, #224]	; (8007334 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8007252:	f7ff fcdd 	bl	8006c10 <SendCommand>
                SendCommand(Reset, ResponseOK, DefaultTimeout);
 8007256:	4b2c      	ldr	r3, [pc, #176]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	492b      	ldr	r1, [pc, #172]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 800725e:	482d      	ldr	r0, [pc, #180]	; (8007314 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8007260:	f7ff fcd6 	bl	8006c10 <SendCommand>
                HAL_Delay(1000);
 8007264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007268:	f000 fadc 	bl	8007824 <HAL_Delay>
                HAL_Delay(1000);
 800726c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007270:	f000 fad8 	bl	8007824 <HAL_Delay>
                SendCommand(Default_SetWiFiInfo, ResponseOK, DefaultTimeout);
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	4924      	ldr	r1, [pc, #144]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 800727c:	482e      	ldr	r0, [pc, #184]	; (8007338 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800727e:	f7ff fcc7 	bl	8006c10 <SendCommand>
                SendCommand(Default_SetServerIP, ResponseOK, DefaultTimeout);
 8007282:	4b21      	ldr	r3, [pc, #132]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	4920      	ldr	r1, [pc, #128]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 800728a:	482c      	ldr	r0, [pc, #176]	; (800733c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800728c:	f7ff fcc0 	bl	8006c10 <SendCommand>
                SendCommand(SetMultiConnect, ResponseOK, DefaultTimeout);
 8007290:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	491d      	ldr	r1, [pc, #116]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 8007298:	4829      	ldr	r0, [pc, #164]	; (8007340 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800729a:	f7ff fcb9 	bl	8006c10 <SendCommand>
                SendCommand(Default_StartServerAndSetPort, ResponseOK, DefaultTimeout);
 800729e:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	4919      	ldr	r1, [pc, #100]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80072a6:	4827      	ldr	r0, [pc, #156]	; (8007344 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80072a8:	f7ff fcb2 	bl	8006c10 <SendCommand>
                Mode = 1;
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, "Finish\r\n", 8, HAL_MAX_DELAY);
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	2208      	movs	r2, #8
 80072b8:	491b      	ldr	r1, [pc, #108]	; (8007328 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80072ba:	4812      	ldr	r0, [pc, #72]	; (8007304 <HAL_GPIO_EXTI_Callback+0x194>)
 80072bc:	f001 ff3f 	bl	800913e <HAL_UART_Transmit>
                IsSetUp = 1;
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <HAL_GPIO_EXTI_Callback+0x18c>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
            break;
 80072c6:	e010      	b.n	80072ea <HAL_GPIO_EXTI_Callback+0x17a>
            if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 80072c8:	2101      	movs	r1, #1
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80072cc:	f000 fe4c 	bl	8007f68 <HAL_GPIO_ReadPin>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10b      	bne.n	80072ee <HAL_GPIO_EXTI_Callback+0x17e>
                SendCommand(CloseConnection, ResponseOK, DefaultTimeout);
 80072d6:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <HAL_GPIO_EXTI_Callback+0x198>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	490b      	ldr	r1, [pc, #44]	; (800730c <HAL_GPIO_EXTI_Callback+0x19c>)
 80072de:	481a      	ldr	r0, [pc, #104]	; (8007348 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80072e0:	f7ff fc96 	bl	8006c10 <SendCommand>
            break;
 80072e4:	e003      	b.n	80072ee <HAL_GPIO_EXTI_Callback+0x17e>
            break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_GPIO_EXTI_Callback+0x180>
            break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_GPIO_EXTI_Callback+0x180>
            break;
 80072ee:	bf00      	nop
    }
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40011000 	.word	0x40011000
 80072fc:	200001e8 	.word	0x200001e8
 8007300:	0800a254 	.word	0x0800a254
 8007304:	20001da8 	.word	0x20001da8
 8007308:	2000010c 	.word	0x2000010c
 800730c:	20000110 	.word	0x20000110
 8007310:	200000ac 	.word	0x200000ac
 8007314:	20000004 	.word	0x20000004
 8007318:	200000bc 	.word	0x200000bc
 800731c:	20000010 	.word	0x20000010
 8007320:	200000e0 	.word	0x200000e0
 8007324:	200001e4 	.word	0x200001e4
 8007328:	0800a260 	.word	0x0800a260
 800732c:	40010800 	.word	0x40010800
 8007330:	0800a26c 	.word	0x0800a26c
 8007334:	20000040 	.word	0x20000040
 8007338:	20000050 	.word	0x20000050
 800733c:	20000078 	.word	0x20000078
 8007340:	20000020 	.word	0x20000020
 8007344:	20000094 	.word	0x20000094
 8007348:	20000030 	.word	0x20000030

0800734c <NotationMsg1>:

void NotationMsg1() {
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
    LCD_DrawLine(222, msgY + 6, 232, msgY + 6);
 8007350:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <NotationMsg1+0x5c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	3306      	adds	r3, #6
 8007358:	b299      	uxth	r1, r3
 800735a:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <NotationMsg1+0x5c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	3306      	adds	r3, #6
 8007362:	b29b      	uxth	r3, r3
 8007364:	22e8      	movs	r2, #232	; 0xe8
 8007366:	20de      	movs	r0, #222	; 0xde
 8007368:	f7fe fe0a 	bl	8005f80 <LCD_DrawLine>
    LCD_DrawLine(222, msgY + 5, 232, msgY + 5);
 800736c:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <NotationMsg1+0x5c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	3305      	adds	r3, #5
 8007374:	b299      	uxth	r1, r3
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <NotationMsg1+0x5c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	3305      	adds	r3, #5
 800737e:	b29b      	uxth	r3, r3
 8007380:	22e8      	movs	r2, #232	; 0xe8
 8007382:	20de      	movs	r0, #222	; 0xde
 8007384:	f7fe fdfc 	bl	8005f80 <LCD_DrawLine>
    LCD_DrawLine(222, msgY + 7, 232, msgY + 7);
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <NotationMsg1+0x5c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	3307      	adds	r3, #7
 8007390:	b299      	uxth	r1, r3
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <NotationMsg1+0x5c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	3307      	adds	r3, #7
 800739a:	b29b      	uxth	r3, r3
 800739c:	22e8      	movs	r2, #232	; 0xe8
 800739e:	20de      	movs	r0, #222	; 0xde
 80073a0:	f7fe fdee 	bl	8005f80 <LCD_DrawLine>
}
 80073a4:	bf00      	nop
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000124 	.word	0x20000124

080073ac <NotationMsg2>:

void NotationMsg2() {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
    LCD_DrawLine(8 - 1, msgY + 6, 18, msgY + 6);
 80073b0:	4b15      	ldr	r3, [pc, #84]	; (8007408 <NotationMsg2+0x5c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3306      	adds	r3, #6
 80073b8:	b299      	uxth	r1, r3
 80073ba:	4b13      	ldr	r3, [pc, #76]	; (8007408 <NotationMsg2+0x5c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3306      	adds	r3, #6
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2212      	movs	r2, #18
 80073c6:	2007      	movs	r0, #7
 80073c8:	f7fe fdda 	bl	8005f80 <LCD_DrawLine>
    LCD_DrawLine(8, msgY + 5, 18, msgY + 5);
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <NotationMsg2+0x5c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3305      	adds	r3, #5
 80073d4:	b299      	uxth	r1, r3
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <NotationMsg2+0x5c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3305      	adds	r3, #5
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2212      	movs	r2, #18
 80073e2:	2008      	movs	r0, #8
 80073e4:	f7fe fdcc 	bl	8005f80 <LCD_DrawLine>
    LCD_DrawLine(8, msgY + 7, 18, msgY + 7);
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <NotationMsg2+0x5c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3307      	adds	r3, #7
 80073f0:	b299      	uxth	r1, r3
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <NotationMsg2+0x5c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3307      	adds	r3, #7
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2212      	movs	r2, #18
 80073fe:	2008      	movs	r0, #8
 8007400:	f7fe fdbe 	bl	8005f80 <LCD_DrawLine>
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000124 	.word	0x20000124

0800740c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8007410:	bf00      	nop
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800741e:	4b16      	ldr	r3, [pc, #88]	; (8007478 <HAL_MspInit+0x60>)
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	4a15      	ldr	r2, [pc, #84]	; (8007478 <HAL_MspInit+0x60>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	6193      	str	r3, [r2, #24]
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <HAL_MspInit+0x60>)
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	60bb      	str	r3, [r7, #8]
 8007434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_MspInit+0x60>)
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <HAL_MspInit+0x60>)
 800743c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007440:	61d3      	str	r3, [r2, #28]
 8007442:	4b0d      	ldr	r3, [pc, #52]	; (8007478 <HAL_MspInit+0x60>)
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800744e:	2005      	movs	r0, #5
 8007450:	f000 fad6 	bl	8007a00 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8007454:	4b09      	ldr	r3, [pc, #36]	; (800747c <HAL_MspInit+0x64>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <HAL_MspInit+0x64>)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40021000 	.word	0x40021000
 800747c:	40010000 	.word	0x40010000

08007480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0d      	ldr	r2, [pc, #52]	; (80074c4 <HAL_TIM_Base_MspInit+0x44>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d113      	bne.n	80074ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007492:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <HAL_TIM_Base_MspInit+0x48>)
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4a0c      	ldr	r2, [pc, #48]	; (80074c8 <HAL_TIM_Base_MspInit+0x48>)
 8007498:	f043 0302 	orr.w	r3, r3, #2
 800749c:	61d3      	str	r3, [r2, #28]
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <HAL_TIM_Base_MspInit+0x48>)
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80074aa:	2200      	movs	r2, #0
 80074ac:	2100      	movs	r1, #0
 80074ae:	201d      	movs	r0, #29
 80074b0:	f000 fab1 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80074b4:	201d      	movs	r0, #29
 80074b6:	f000 faca 	bl	8007a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40021000 	.word	0x40021000

080074cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d4:	f107 0318 	add.w	r3, r7, #24
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a3f      	ldr	r2, [pc, #252]	; (80075e4 <HAL_UART_MspInit+0x118>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d13a      	bne.n	8007562 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074ec:	4b3e      	ldr	r3, [pc, #248]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	4a3d      	ldr	r2, [pc, #244]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 80074f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074f6:	6193      	str	r3, [r2, #24]
 80074f8:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007504:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	4a37      	ldr	r2, [pc, #220]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 800750a:	f043 0304 	orr.w	r3, r3, #4
 800750e:	6193      	str	r3, [r2, #24]
 8007510:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800751c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007522:	2302      	movs	r3, #2
 8007524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007526:	2303      	movs	r3, #3
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800752a:	f107 0318 	add.w	r3, r7, #24
 800752e:	4619      	mov	r1, r3
 8007530:	482e      	ldr	r0, [pc, #184]	; (80075ec <HAL_UART_MspInit+0x120>)
 8007532:	f000 fbaf 	bl	8007c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800753a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007540:	2300      	movs	r3, #0
 8007542:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007544:	f107 0318 	add.w	r3, r7, #24
 8007548:	4619      	mov	r1, r3
 800754a:	4828      	ldr	r0, [pc, #160]	; (80075ec <HAL_UART_MspInit+0x120>)
 800754c:	f000 fba2 	bl	8007c94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007550:	2200      	movs	r2, #0
 8007552:	2100      	movs	r1, #0
 8007554:	2025      	movs	r0, #37	; 0x25
 8007556:	f000 fa5e 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800755a:	2025      	movs	r0, #37	; 0x25
 800755c:	f000 fa77 	bl	8007a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007560:	e03c      	b.n	80075dc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a22      	ldr	r2, [pc, #136]	; (80075f0 <HAL_UART_MspInit+0x124>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d137      	bne.n	80075dc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800756c:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 8007572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007576:	61d3      	str	r3, [r2, #28]
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007584:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 800758a:	f043 0304 	orr.w	r3, r3, #4
 800758e:	6193      	str	r3, [r2, #24]
 8007590:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <HAL_UART_MspInit+0x11c>)
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	60bb      	str	r3, [r7, #8]
 800759a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800759c:	2304      	movs	r3, #4
 800759e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a0:	2302      	movs	r3, #2
 80075a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075a4:	2303      	movs	r3, #3
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a8:	f107 0318 	add.w	r3, r7, #24
 80075ac:	4619      	mov	r1, r3
 80075ae:	480f      	ldr	r0, [pc, #60]	; (80075ec <HAL_UART_MspInit+0x120>)
 80075b0:	f000 fb70 	bl	8007c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80075b4:	2308      	movs	r3, #8
 80075b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	f107 0318 	add.w	r3, r7, #24
 80075c4:	4619      	mov	r1, r3
 80075c6:	4809      	ldr	r0, [pc, #36]	; (80075ec <HAL_UART_MspInit+0x120>)
 80075c8:	f000 fb64 	bl	8007c94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80075cc:	2201      	movs	r2, #1
 80075ce:	2100      	movs	r1, #0
 80075d0:	2026      	movs	r0, #38	; 0x26
 80075d2:	f000 fa20 	bl	8007a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80075d6:	2026      	movs	r0, #38	; 0x26
 80075d8:	f000 fa39 	bl	8007a4e <HAL_NVIC_EnableIRQ>
}
 80075dc:	bf00      	nop
 80075de:	3728      	adds	r7, #40	; 0x28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40013800 	.word	0x40013800
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40010800 	.word	0x40010800
 80075f0:	40004400 	.word	0x40004400

080075f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr

08007600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007604:	e7fe      	b.n	8007604 <HardFault_Handler+0x4>

08007606 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007606:	b480      	push	{r7}
 8007608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800760a:	e7fe      	b.n	800760a <MemManage_Handler+0x4>

0800760c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007610:	e7fe      	b.n	8007610 <BusFault_Handler+0x4>

08007612 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007612:	b480      	push	{r7}
 8007614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007616:	e7fe      	b.n	8007616 <UsageFault_Handler+0x4>

08007618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007640:	f000 f8d4 	bl	80077ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007644:	bf00      	nop
 8007646:	bd80      	pop	{r7, pc}

08007648 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800764c:	2001      	movs	r0, #1
 800764e:	f000 fcd3 	bl	8007ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}

08007656 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800765a:	2020      	movs	r0, #32
 800765c:	f000 fccc 	bl	8007ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007660:	bf00      	nop
 8007662:	bd80      	pop	{r7, pc}

08007664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007668:	4802      	ldr	r0, [pc, #8]	; (8007674 <TIM3_IRQHandler+0x10>)
 800766a:	f001 f9a9 	bl	80089c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800766e:	bf00      	nop
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200009d8 	.word	0x200009d8

08007678 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800767c:	4802      	ldr	r0, [pc, #8]	; (8007688 <USART1_IRQHandler+0x10>)
 800767e:	f001 fe45 	bl	800930c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20001da8 	.word	0x20001da8

0800768c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007690:	4802      	ldr	r0, [pc, #8]	; (800769c <USART2_IRQHandler+0x10>)
 8007692:	f001 fe3b 	bl	800930c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007696:	bf00      	nop
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	200025b8 	.word	0x200025b8

080076a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80076a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80076a8:	f000 fca6 	bl	8007ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80076ac:	bf00      	nop
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <_sbrk+0x50>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <_sbrk+0x16>
		heap_end = &end;
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <_sbrk+0x50>)
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <_sbrk+0x54>)
 80076c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80076c6:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <_sbrk+0x50>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80076cc:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <_sbrk+0x50>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4413      	add	r3, r2
 80076d4:	466a      	mov	r2, sp
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d907      	bls.n	80076ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80076da:	f002 f919 	bl	8009910 <__errno>
 80076de:	4602      	mov	r2, r0
 80076e0:	230c      	movs	r3, #12
 80076e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	e006      	b.n	80076f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <_sbrk+0x50>)
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	4a03      	ldr	r2, [pc, #12]	; (8007700 <_sbrk+0x50>)
 80076f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200001ec 	.word	0x200001ec
 8007704:	20003988 	.word	0x20003988

08007708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007714:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007716:	e003      	b.n	8007720 <LoopCopyDataInit>

08007718 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800771a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800771c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800771e:	3104      	adds	r1, #4

08007720 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007720:	480a      	ldr	r0, [pc, #40]	; (800774c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007724:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007726:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007728:	d3f6      	bcc.n	8007718 <CopyDataInit>
  ldr r2, =_sbss
 800772a:	4a0a      	ldr	r2, [pc, #40]	; (8007754 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800772c:	e002      	b.n	8007734 <LoopFillZerobss>

0800772e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800772e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007730:	f842 3b04 	str.w	r3, [r2], #4

08007734 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007734:	4b08      	ldr	r3, [pc, #32]	; (8007758 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007736:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007738:	d3f9      	bcc.n	800772e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800773a:	f7ff ffe5 	bl	8007708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800773e:	f002 f8ed 	bl	800991c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007742:	f7fe fe63 	bl	800640c <main>
  bx lr
 8007746:	4770      	bx	lr
  ldr r3, =_sidata
 8007748:	0800ba9c 	.word	0x0800ba9c
  ldr r0, =_sdata
 800774c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007750:	200001ac 	.word	0x200001ac
  ldr r2, =_sbss
 8007754:	200001ac 	.word	0x200001ac
  ldr r3, = _ebss
 8007758:	20003988 	.word	0x20003988

0800775c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800775c:	e7fe      	b.n	800775c <ADC1_2_IRQHandler>
	...

08007760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <HAL_Init+0x28>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a07      	ldr	r2, [pc, #28]	; (8007788 <HAL_Init+0x28>)
 800776a:	f043 0310 	orr.w	r3, r3, #16
 800776e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007770:	2003      	movs	r0, #3
 8007772:	f000 f945 	bl	8007a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007776:	2000      	movs	r0, #0
 8007778:	f000 f808 	bl	800778c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800777c:	f7ff fe4c 	bl	8007418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40022000 	.word	0x40022000

0800778c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_InitTick+0x54>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <HAL_InitTick+0x58>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	4619      	mov	r1, r3
 800779e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80077a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f95d 	bl	8007a6a <HAL_SYSTICK_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e00e      	b.n	80077d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b0f      	cmp	r3, #15
 80077be:	d80a      	bhi.n	80077d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077c0:	2200      	movs	r2, #0
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	f000 f925 	bl	8007a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <HAL_InitTick+0x5c>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	2000013c 	.word	0x2000013c
 80077e4:	20000144 	.word	0x20000144
 80077e8:	20000140 	.word	0x20000140

080077ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HAL_IncTick+0x1c>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_IncTick+0x20>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4413      	add	r3, r2
 80077fc:	4a03      	ldr	r2, [pc, #12]	; (800780c <HAL_IncTick+0x20>)
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr
 8007808:	20000144 	.word	0x20000144
 800780c:	20003980 	.word	0x20003980

08007810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  return uwTick;
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <HAL_GetTick+0x10>)
 8007816:	681b      	ldr	r3, [r3, #0]
}
 8007818:	4618      	mov	r0, r3
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	20003980 	.word	0x20003980

08007824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800782c:	f7ff fff0 	bl	8007810 <HAL_GetTick>
 8007830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d005      	beq.n	800784a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_Delay+0x40>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800784a:	bf00      	nop
 800784c:	f7ff ffe0 	bl	8007810 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	429a      	cmp	r2, r3
 800785a:	d8f7      	bhi.n	800784c <HAL_Delay+0x28>
  {
  }
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000144 	.word	0x20000144

08007868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <__NVIC_SetPriorityGrouping+0x44>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007884:	4013      	ands	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800789a:	4a04      	ldr	r2, [pc, #16]	; (80078ac <__NVIC_SetPriorityGrouping+0x44>)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	60d3      	str	r3, [r2, #12]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	e000ed00 	.word	0xe000ed00

080078b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <__NVIC_GetPriorityGrouping+0x18>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	f003 0307 	and.w	r3, r3, #7
}
 80078be:	4618      	mov	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	db0b      	blt.n	80078f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	f003 021f 	and.w	r2, r3, #31
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <__NVIC_EnableIRQ+0x34>)
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	2001      	movs	r0, #1
 80078ee:	fa00 f202 	lsl.w	r2, r0, r2
 80078f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	e000e100 	.word	0xe000e100

08007904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007914:	2b00      	cmp	r3, #0
 8007916:	db0a      	blt.n	800792e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	490c      	ldr	r1, [pc, #48]	; (8007950 <__NVIC_SetPriority+0x4c>)
 800791e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007922:	0112      	lsls	r2, r2, #4
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	440b      	add	r3, r1
 8007928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800792c:	e00a      	b.n	8007944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	4908      	ldr	r1, [pc, #32]	; (8007954 <__NVIC_SetPriority+0x50>)
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	3b04      	subs	r3, #4
 800793c:	0112      	lsls	r2, r2, #4
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	440b      	add	r3, r1
 8007942:	761a      	strb	r2, [r3, #24]
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e100 	.word	0xe000e100
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007958:	b480      	push	{r7}
 800795a:	b089      	sub	sp, #36	; 0x24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f1c3 0307 	rsb	r3, r3, #7
 8007972:	2b04      	cmp	r3, #4
 8007974:	bf28      	it	cs
 8007976:	2304      	movcs	r3, #4
 8007978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3304      	adds	r3, #4
 800797e:	2b06      	cmp	r3, #6
 8007980:	d902      	bls.n	8007988 <NVIC_EncodePriority+0x30>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	3b03      	subs	r3, #3
 8007986:	e000      	b.n	800798a <NVIC_EncodePriority+0x32>
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43da      	mvns	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	401a      	ands	r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079a0:	f04f 31ff 	mov.w	r1, #4294967295
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	fa01 f303 	lsl.w	r3, r1, r3
 80079aa:	43d9      	mvns	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079b0:	4313      	orrs	r3, r2
         );
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3724      	adds	r7, #36	; 0x24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079cc:	d301      	bcc.n	80079d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079ce:	2301      	movs	r3, #1
 80079d0:	e00f      	b.n	80079f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079d2:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <SysTick_Config+0x40>)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079da:	210f      	movs	r1, #15
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	f7ff ff90 	bl	8007904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <SysTick_Config+0x40>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079ea:	4b04      	ldr	r3, [pc, #16]	; (80079fc <SysTick_Config+0x40>)
 80079ec:	2207      	movs	r2, #7
 80079ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	e000e010 	.word	0xe000e010

08007a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff2d 	bl	8007868 <__NVIC_SetPriorityGrouping>
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a28:	f7ff ff42 	bl	80078b0 <__NVIC_GetPriorityGrouping>
 8007a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	6978      	ldr	r0, [r7, #20]
 8007a34:	f7ff ff90 	bl	8007958 <NVIC_EncodePriority>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ff5f 	bl	8007904 <__NVIC_SetPriority>
}
 8007a46:	bf00      	nop
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	4603      	mov	r3, r0
 8007a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff ff35 	bl	80078cc <__NVIC_EnableIRQ>
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ffa2 	bl	80079bc <SysTick_Config>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d005      	beq.n	8007aa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e0d6      	b.n	8007c54 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 020e 	bic.w	r2, r2, #14
 8007ab4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	4b64      	ldr	r3, [pc, #400]	; (8007c60 <HAL_DMA_Abort_IT+0x1dc>)
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d958      	bls.n	8007b84 <HAL_DMA_Abort_IT+0x100>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a63      	ldr	r2, [pc, #396]	; (8007c64 <HAL_DMA_Abort_IT+0x1e0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d04f      	beq.n	8007b7c <HAL_DMA_Abort_IT+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a61      	ldr	r2, [pc, #388]	; (8007c68 <HAL_DMA_Abort_IT+0x1e4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d048      	beq.n	8007b78 <HAL_DMA_Abort_IT+0xf4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a60      	ldr	r2, [pc, #384]	; (8007c6c <HAL_DMA_Abort_IT+0x1e8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d040      	beq.n	8007b72 <HAL_DMA_Abort_IT+0xee>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a5e      	ldr	r2, [pc, #376]	; (8007c70 <HAL_DMA_Abort_IT+0x1ec>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d038      	beq.n	8007b6c <HAL_DMA_Abort_IT+0xe8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a5d      	ldr	r2, [pc, #372]	; (8007c74 <HAL_DMA_Abort_IT+0x1f0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d030      	beq.n	8007b66 <HAL_DMA_Abort_IT+0xe2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a5b      	ldr	r2, [pc, #364]	; (8007c78 <HAL_DMA_Abort_IT+0x1f4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d028      	beq.n	8007b60 <HAL_DMA_Abort_IT+0xdc>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a53      	ldr	r2, [pc, #332]	; (8007c60 <HAL_DMA_Abort_IT+0x1dc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d020      	beq.n	8007b5a <HAL_DMA_Abort_IT+0xd6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a57      	ldr	r2, [pc, #348]	; (8007c7c <HAL_DMA_Abort_IT+0x1f8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d019      	beq.n	8007b56 <HAL_DMA_Abort_IT+0xd2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a56      	ldr	r2, [pc, #344]	; (8007c80 <HAL_DMA_Abort_IT+0x1fc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d012      	beq.n	8007b52 <HAL_DMA_Abort_IT+0xce>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a54      	ldr	r2, [pc, #336]	; (8007c84 <HAL_DMA_Abort_IT+0x200>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00a      	beq.n	8007b4c <HAL_DMA_Abort_IT+0xc8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a53      	ldr	r2, [pc, #332]	; (8007c88 <HAL_DMA_Abort_IT+0x204>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d102      	bne.n	8007b46 <HAL_DMA_Abort_IT+0xc2>
 8007b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b44:	e01b      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b4a:	e018      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b50:	e015      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b52:	2310      	movs	r3, #16
 8007b54:	e013      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e011      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b5e:	e00e      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b64:	e00b      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b6a:	e008      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b70:	e005      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b76:	e002      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	e000      	b.n	8007b7e <HAL_DMA_Abort_IT+0xfa>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4a43      	ldr	r2, [pc, #268]	; (8007c8c <HAL_DMA_Abort_IT+0x208>)
 8007b80:	6053      	str	r3, [r2, #4]
 8007b82:	e057      	b.n	8007c34 <HAL_DMA_Abort_IT+0x1b0>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a36      	ldr	r2, [pc, #216]	; (8007c64 <HAL_DMA_Abort_IT+0x1e0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d04f      	beq.n	8007c2e <HAL_DMA_Abort_IT+0x1aa>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a35      	ldr	r2, [pc, #212]	; (8007c68 <HAL_DMA_Abort_IT+0x1e4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d048      	beq.n	8007c2a <HAL_DMA_Abort_IT+0x1a6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a33      	ldr	r2, [pc, #204]	; (8007c6c <HAL_DMA_Abort_IT+0x1e8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d040      	beq.n	8007c24 <HAL_DMA_Abort_IT+0x1a0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a32      	ldr	r2, [pc, #200]	; (8007c70 <HAL_DMA_Abort_IT+0x1ec>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d038      	beq.n	8007c1e <HAL_DMA_Abort_IT+0x19a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a30      	ldr	r2, [pc, #192]	; (8007c74 <HAL_DMA_Abort_IT+0x1f0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d030      	beq.n	8007c18 <HAL_DMA_Abort_IT+0x194>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2f      	ldr	r2, [pc, #188]	; (8007c78 <HAL_DMA_Abort_IT+0x1f4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d028      	beq.n	8007c12 <HAL_DMA_Abort_IT+0x18e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <HAL_DMA_Abort_IT+0x1dc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d020      	beq.n	8007c0c <HAL_DMA_Abort_IT+0x188>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a2b      	ldr	r2, [pc, #172]	; (8007c7c <HAL_DMA_Abort_IT+0x1f8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d019      	beq.n	8007c08 <HAL_DMA_Abort_IT+0x184>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <HAL_DMA_Abort_IT+0x1fc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d012      	beq.n	8007c04 <HAL_DMA_Abort_IT+0x180>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a28      	ldr	r2, [pc, #160]	; (8007c84 <HAL_DMA_Abort_IT+0x200>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00a      	beq.n	8007bfe <HAL_DMA_Abort_IT+0x17a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <HAL_DMA_Abort_IT+0x204>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d102      	bne.n	8007bf8 <HAL_DMA_Abort_IT+0x174>
 8007bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf6:	e01b      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007bfc:	e018      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c02:	e015      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c04:	2310      	movs	r3, #16
 8007c06:	e013      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e011      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c10:	e00e      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c16:	e00b      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c1c:	e008      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c22:	e005      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c28:	e002      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	e000      	b.n	8007c30 <HAL_DMA_Abort_IT+0x1ac>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4a17      	ldr	r2, [pc, #92]	; (8007c90 <HAL_DMA_Abort_IT+0x20c>)
 8007c32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	4798      	blx	r3
    } 
  }
  return status;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40020080 	.word	0x40020080
 8007c64:	40020008 	.word	0x40020008
 8007c68:	4002001c 	.word	0x4002001c
 8007c6c:	40020030 	.word	0x40020030
 8007c70:	40020044 	.word	0x40020044
 8007c74:	40020058 	.word	0x40020058
 8007c78:	4002006c 	.word	0x4002006c
 8007c7c:	40020408 	.word	0x40020408
 8007c80:	4002041c 	.word	0x4002041c
 8007c84:	40020430 	.word	0x40020430
 8007c88:	40020444 	.word	0x40020444
 8007c8c:	40020400 	.word	0x40020400
 8007c90:	40020000 	.word	0x40020000

08007c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b08b      	sub	sp, #44	; 0x2c
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ca6:	e133      	b.n	8007f10 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007ca8:	2201      	movs	r2, #1
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	f040 8122 	bne.w	8007f0a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b12      	cmp	r3, #18
 8007ccc:	d034      	beq.n	8007d38 <HAL_GPIO_Init+0xa4>
 8007cce:	2b12      	cmp	r3, #18
 8007cd0:	d80d      	bhi.n	8007cee <HAL_GPIO_Init+0x5a>
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d02b      	beq.n	8007d2e <HAL_GPIO_Init+0x9a>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d804      	bhi.n	8007ce4 <HAL_GPIO_Init+0x50>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d031      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d01c      	beq.n	8007d1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007ce2:	e048      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d043      	beq.n	8007d70 <HAL_GPIO_Init+0xdc>
 8007ce8:	2b11      	cmp	r3, #17
 8007cea:	d01b      	beq.n	8007d24 <HAL_GPIO_Init+0x90>
          break;
 8007cec:	e043      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007cee:	4a8f      	ldr	r2, [pc, #572]	; (8007f2c <HAL_GPIO_Init+0x298>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d026      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
 8007cf4:	4a8d      	ldr	r2, [pc, #564]	; (8007f2c <HAL_GPIO_Init+0x298>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d806      	bhi.n	8007d08 <HAL_GPIO_Init+0x74>
 8007cfa:	4a8d      	ldr	r2, [pc, #564]	; (8007f30 <HAL_GPIO_Init+0x29c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d020      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
 8007d00:	4a8c      	ldr	r2, [pc, #560]	; (8007f34 <HAL_GPIO_Init+0x2a0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d01d      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
          break;
 8007d06:	e036      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007d08:	4a8b      	ldr	r2, [pc, #556]	; (8007f38 <HAL_GPIO_Init+0x2a4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d019      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
 8007d0e:	4a8b      	ldr	r2, [pc, #556]	; (8007f3c <HAL_GPIO_Init+0x2a8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d016      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
 8007d14:	4a8a      	ldr	r2, [pc, #552]	; (8007f40 <HAL_GPIO_Init+0x2ac>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_GPIO_Init+0xae>
          break;
 8007d1a:	e02c      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	623b      	str	r3, [r7, #32]
          break;
 8007d22:	e028      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	623b      	str	r3, [r7, #32]
          break;
 8007d2c:	e023      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	3308      	adds	r3, #8
 8007d34:	623b      	str	r3, [r7, #32]
          break;
 8007d36:	e01e      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	623b      	str	r3, [r7, #32]
          break;
 8007d40:	e019      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	623b      	str	r3, [r7, #32]
          break;
 8007d4e:	e012      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d105      	bne.n	8007d64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007d58:	2308      	movs	r3, #8
 8007d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	611a      	str	r2, [r3, #16]
          break;
 8007d62:	e008      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007d64:	2308      	movs	r3, #8
 8007d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	615a      	str	r2, [r3, #20]
          break;
 8007d6e:	e002      	b.n	8007d76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007d70:	2300      	movs	r3, #0
 8007d72:	623b      	str	r3, [r7, #32]
          break;
 8007d74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	2bff      	cmp	r3, #255	; 0xff
 8007d7a:	d801      	bhi.n	8007d80 <HAL_GPIO_Init+0xec>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	e001      	b.n	8007d84 <HAL_GPIO_Init+0xf0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3304      	adds	r3, #4
 8007d84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2bff      	cmp	r3, #255	; 0xff
 8007d8a:	d802      	bhi.n	8007d92 <HAL_GPIO_Init+0xfe>
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	e002      	b.n	8007d98 <HAL_GPIO_Init+0x104>
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	3b08      	subs	r3, #8
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	210f      	movs	r1, #15
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	fa01 f303 	lsl.w	r3, r1, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	401a      	ands	r2, r3
 8007daa:	6a39      	ldr	r1, [r7, #32]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	fa01 f303 	lsl.w	r3, r1, r3
 8007db2:	431a      	orrs	r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a2 	beq.w	8007f0a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007dc6:	4b5f      	ldr	r3, [pc, #380]	; (8007f44 <HAL_GPIO_Init+0x2b0>)
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	4a5e      	ldr	r2, [pc, #376]	; (8007f44 <HAL_GPIO_Init+0x2b0>)
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	6193      	str	r3, [r2, #24]
 8007dd2:	4b5c      	ldr	r3, [pc, #368]	; (8007f44 <HAL_GPIO_Init+0x2b0>)
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007dde:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <HAL_GPIO_Init+0x2b4>)
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	3302      	adds	r3, #2
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	220f      	movs	r2, #15
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a51      	ldr	r2, [pc, #324]	; (8007f4c <HAL_GPIO_Init+0x2b8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01f      	beq.n	8007e4a <HAL_GPIO_Init+0x1b6>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a50      	ldr	r2, [pc, #320]	; (8007f50 <HAL_GPIO_Init+0x2bc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d019      	beq.n	8007e46 <HAL_GPIO_Init+0x1b2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a4f      	ldr	r2, [pc, #316]	; (8007f54 <HAL_GPIO_Init+0x2c0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_GPIO_Init+0x1ae>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a4e      	ldr	r2, [pc, #312]	; (8007f58 <HAL_GPIO_Init+0x2c4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00d      	beq.n	8007e3e <HAL_GPIO_Init+0x1aa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a4d      	ldr	r2, [pc, #308]	; (8007f5c <HAL_GPIO_Init+0x2c8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <HAL_GPIO_Init+0x1a6>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a4c      	ldr	r2, [pc, #304]	; (8007f60 <HAL_GPIO_Init+0x2cc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d101      	bne.n	8007e36 <HAL_GPIO_Init+0x1a2>
 8007e32:	2305      	movs	r3, #5
 8007e34:	e00a      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e36:	2306      	movs	r3, #6
 8007e38:	e008      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	e006      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e004      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e002      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <HAL_GPIO_Init+0x1b8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	f002 0203 	and.w	r2, r2, #3
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	4093      	lsls	r3, r2
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007e5c:	493a      	ldr	r1, [pc, #232]	; (8007f48 <HAL_GPIO_Init+0x2b4>)
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	089b      	lsrs	r3, r3, #2
 8007e62:	3302      	adds	r3, #2
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007e76:	4b3b      	ldr	r3, [pc, #236]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	493a      	ldr	r1, [pc, #232]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	e006      	b.n	8007e92 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e84:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	4935      	ldr	r1, [pc, #212]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	4930      	ldr	r1, [pc, #192]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	604b      	str	r3, [r1, #4]
 8007eaa:	e006      	b.n	8007eba <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007eac:	4b2d      	ldr	r3, [pc, #180]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	492b      	ldr	r1, [pc, #172]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	4926      	ldr	r1, [pc, #152]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
 8007ed2:	e006      	b.n	8007ee2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	4921      	ldr	r1, [pc, #132]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d006      	beq.n	8007efc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	491c      	ldr	r1, [pc, #112]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60cb      	str	r3, [r1, #12]
 8007efa:	e006      	b.n	8007f0a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007efc:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	43db      	mvns	r3, r3
 8007f04:	4917      	ldr	r1, [pc, #92]	; (8007f64 <HAL_GPIO_Init+0x2d0>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f47f aec4 	bne.w	8007ca8 <HAL_GPIO_Init+0x14>
  }
}
 8007f20:	bf00      	nop
 8007f22:	372c      	adds	r7, #44	; 0x2c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	10210000 	.word	0x10210000
 8007f30:	10110000 	.word	0x10110000
 8007f34:	10120000 	.word	0x10120000
 8007f38:	10310000 	.word	0x10310000
 8007f3c:	10320000 	.word	0x10320000
 8007f40:	10220000 	.word	0x10220000
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40010800 	.word	0x40010800
 8007f50:	40010c00 	.word	0x40010c00
 8007f54:	40011000 	.word	0x40011000
 8007f58:	40011400 	.word	0x40011400
 8007f5c:	40011800 	.word	0x40011800
 8007f60:	40011c00 	.word	0x40011c00
 8007f64:	40010400 	.word	0x40010400

08007f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	887b      	ldrh	r3, [r7, #2]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
 8007f84:	e001      	b.n	8007f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr

08007f96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	807b      	strh	r3, [r7, #2]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fa6:	787b      	ldrb	r3, [r7, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fac:	887a      	ldrh	r2, [r7, #2]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007fb2:	e003      	b.n	8007fbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	041a      	lsls	r2, r3, #16
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	611a      	str	r2, [r3, #16]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007fd8:	887a      	ldrh	r2, [r7, #2]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	041a      	lsls	r2, r3, #16
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	43d9      	mvns	r1, r3
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	400b      	ands	r3, r1
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	611a      	str	r2, [r3, #16]
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008002:	4b08      	ldr	r3, [pc, #32]	; (8008024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	4013      	ands	r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800800e:	4a05      	ldr	r2, [pc, #20]	; (8008024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff f8aa 	bl	8007170 <HAL_GPIO_EXTI_Callback>
  }
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40010400 	.word	0x40010400

08008028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e26c      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8087 	beq.w	8008156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008048:	4b92      	ldr	r3, [pc, #584]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f003 030c 	and.w	r3, r3, #12
 8008050:	2b04      	cmp	r3, #4
 8008052:	d00c      	beq.n	800806e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008054:	4b8f      	ldr	r3, [pc, #572]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f003 030c 	and.w	r3, r3, #12
 800805c:	2b08      	cmp	r3, #8
 800805e:	d112      	bne.n	8008086 <HAL_RCC_OscConfig+0x5e>
 8008060:	4b8c      	ldr	r3, [pc, #560]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806c:	d10b      	bne.n	8008086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800806e:	4b89      	ldr	r3, [pc, #548]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d06c      	beq.n	8008154 <HAL_RCC_OscConfig+0x12c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d168      	bne.n	8008154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e246      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808e:	d106      	bne.n	800809e <HAL_RCC_OscConfig+0x76>
 8008090:	4b80      	ldr	r3, [pc, #512]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a7f      	ldr	r2, [pc, #508]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	e02e      	b.n	80080fc <HAL_RCC_OscConfig+0xd4>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10c      	bne.n	80080c0 <HAL_RCC_OscConfig+0x98>
 80080a6:	4b7b      	ldr	r3, [pc, #492]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a7a      	ldr	r2, [pc, #488]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	4b78      	ldr	r3, [pc, #480]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a77      	ldr	r2, [pc, #476]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	e01d      	b.n	80080fc <HAL_RCC_OscConfig+0xd4>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCC_OscConfig+0xbc>
 80080ca:	4b72      	ldr	r3, [pc, #456]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a71      	ldr	r2, [pc, #452]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	4b6f      	ldr	r3, [pc, #444]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a6e      	ldr	r2, [pc, #440]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	e00b      	b.n	80080fc <HAL_RCC_OscConfig+0xd4>
 80080e4:	4b6b      	ldr	r3, [pc, #428]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a6a      	ldr	r2, [pc, #424]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	4b68      	ldr	r3, [pc, #416]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a67      	ldr	r2, [pc, #412]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80080f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008104:	f7ff fb84 	bl	8007810 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800810c:	f7ff fb80 	bl	8007810 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b64      	cmp	r3, #100	; 0x64
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e1fa      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800811e:	4b5d      	ldr	r3, [pc, #372]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f0      	beq.n	800810c <HAL_RCC_OscConfig+0xe4>
 800812a:	e014      	b.n	8008156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800812c:	f7ff fb70 	bl	8007810 <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008134:	f7ff fb6c 	bl	8007810 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b64      	cmp	r3, #100	; 0x64
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e1e6      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008146:	4b53      	ldr	r3, [pc, #332]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <HAL_RCC_OscConfig+0x10c>
 8008152:	e000      	b.n	8008156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d063      	beq.n	800822a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008162:	4b4c      	ldr	r3, [pc, #304]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 030c 	and.w	r3, r3, #12
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00b      	beq.n	8008186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800816e:	4b49      	ldr	r3, [pc, #292]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 030c 	and.w	r3, r3, #12
 8008176:	2b08      	cmp	r3, #8
 8008178:	d11c      	bne.n	80081b4 <HAL_RCC_OscConfig+0x18c>
 800817a:	4b46      	ldr	r3, [pc, #280]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d116      	bne.n	80081b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008186:	4b43      	ldr	r3, [pc, #268]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_RCC_OscConfig+0x176>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d001      	beq.n	800819e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e1ba      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819e:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4939      	ldr	r1, [pc, #228]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081b2:	e03a      	b.n	800822a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d020      	beq.n	80081fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081bc:	4b36      	ldr	r3, [pc, #216]	; (8008298 <HAL_RCC_OscConfig+0x270>)
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c2:	f7ff fb25 	bl	8007810 <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c8:	e008      	b.n	80081dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ca:	f7ff fb21 	bl	8007810 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e19b      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081dc:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0f0      	beq.n	80081ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4927      	ldr	r1, [pc, #156]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	600b      	str	r3, [r1, #0]
 80081fc:	e015      	b.n	800822a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081fe:	4b26      	ldr	r3, [pc, #152]	; (8008298 <HAL_RCC_OscConfig+0x270>)
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008204:	f7ff fb04 	bl	8007810 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800820c:	f7ff fb00 	bl	8007810 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e17a      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f0      	bne.n	800820c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d03a      	beq.n	80082ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d019      	beq.n	8008272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800823e:	4b17      	ldr	r3, [pc, #92]	; (800829c <HAL_RCC_OscConfig+0x274>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008244:	f7ff fae4 	bl	8007810 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800824c:	f7ff fae0 	bl	8007810 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e15a      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800825e:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <HAL_RCC_OscConfig+0x26c>)
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800826a:	2001      	movs	r0, #1
 800826c:	f000 fada 	bl	8008824 <RCC_Delay>
 8008270:	e01c      	b.n	80082ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008272:	4b0a      	ldr	r3, [pc, #40]	; (800829c <HAL_RCC_OscConfig+0x274>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008278:	f7ff faca 	bl	8007810 <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800827e:	e00f      	b.n	80082a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008280:	f7ff fac6 	bl	8007810 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d908      	bls.n	80082a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e140      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000
 8008298:	42420000 	.word	0x42420000
 800829c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a0:	4b9e      	ldr	r3, [pc, #632]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e9      	bne.n	8008280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 80a6 	beq.w	8008406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082be:	4b97      	ldr	r3, [pc, #604]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ca:	4b94      	ldr	r3, [pc, #592]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	4a93      	ldr	r2, [pc, #588]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80082d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d4:	61d3      	str	r3, [r2, #28]
 80082d6:	4b91      	ldr	r3, [pc, #580]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082e2:	2301      	movs	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e6:	4b8e      	ldr	r3, [pc, #568]	; (8008520 <HAL_RCC_OscConfig+0x4f8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d118      	bne.n	8008324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082f2:	4b8b      	ldr	r3, [pc, #556]	; (8008520 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a8a      	ldr	r2, [pc, #552]	; (8008520 <HAL_RCC_OscConfig+0x4f8>)
 80082f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082fe:	f7ff fa87 	bl	8007810 <HAL_GetTick>
 8008302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008306:	f7ff fa83 	bl	8007810 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b64      	cmp	r3, #100	; 0x64
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e0fd      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008318:	4b81      	ldr	r3, [pc, #516]	; (8008520 <HAL_RCC_OscConfig+0x4f8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d106      	bne.n	800833a <HAL_RCC_OscConfig+0x312>
 800832c:	4b7b      	ldr	r3, [pc, #492]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	4a7a      	ldr	r2, [pc, #488]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	6213      	str	r3, [r2, #32]
 8008338:	e02d      	b.n	8008396 <HAL_RCC_OscConfig+0x36e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10c      	bne.n	800835c <HAL_RCC_OscConfig+0x334>
 8008342:	4b76      	ldr	r3, [pc, #472]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	4a75      	ldr	r2, [pc, #468]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	6213      	str	r3, [r2, #32]
 800834e:	4b73      	ldr	r3, [pc, #460]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	4a72      	ldr	r2, [pc, #456]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008354:	f023 0304 	bic.w	r3, r3, #4
 8008358:	6213      	str	r3, [r2, #32]
 800835a:	e01c      	b.n	8008396 <HAL_RCC_OscConfig+0x36e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b05      	cmp	r3, #5
 8008362:	d10c      	bne.n	800837e <HAL_RCC_OscConfig+0x356>
 8008364:	4b6d      	ldr	r3, [pc, #436]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	4a6c      	ldr	r2, [pc, #432]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 800836a:	f043 0304 	orr.w	r3, r3, #4
 800836e:	6213      	str	r3, [r2, #32]
 8008370:	4b6a      	ldr	r3, [pc, #424]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	4a69      	ldr	r2, [pc, #420]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	6213      	str	r3, [r2, #32]
 800837c:	e00b      	b.n	8008396 <HAL_RCC_OscConfig+0x36e>
 800837e:	4b67      	ldr	r3, [pc, #412]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	4a66      	ldr	r2, [pc, #408]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	6213      	str	r3, [r2, #32]
 800838a:	4b64      	ldr	r3, [pc, #400]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	4a63      	ldr	r2, [pc, #396]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008390:	f023 0304 	bic.w	r3, r3, #4
 8008394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d015      	beq.n	80083ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800839e:	f7ff fa37 	bl	8007810 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a4:	e00a      	b.n	80083bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a6:	f7ff fa33 	bl	8007810 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d901      	bls.n	80083bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e0ab      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083bc:	4b57      	ldr	r3, [pc, #348]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0ee      	beq.n	80083a6 <HAL_RCC_OscConfig+0x37e>
 80083c8:	e014      	b.n	80083f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ca:	f7ff fa21 	bl	8007810 <HAL_GetTick>
 80083ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083d0:	e00a      	b.n	80083e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d2:	f7ff fa1d 	bl	8007810 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d901      	bls.n	80083e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e095      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e8:	4b4c      	ldr	r3, [pc, #304]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ee      	bne.n	80083d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d105      	bne.n	8008406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083fa:	4b48      	ldr	r3, [pc, #288]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	4a47      	ldr	r2, [pc, #284]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8081 	beq.w	8008512 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008410:	4b42      	ldr	r3, [pc, #264]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b08      	cmp	r3, #8
 800841a:	d061      	beq.n	80084e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d146      	bne.n	80084b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <HAL_RCC_OscConfig+0x4fc>)
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842a:	f7ff f9f1 	bl	8007810 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008432:	f7ff f9ed 	bl	8007810 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e067      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008444:	4b35      	ldr	r3, [pc, #212]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f0      	bne.n	8008432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008458:	d108      	bne.n	800846c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800845a:	4b30      	ldr	r3, [pc, #192]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	492d      	ldr	r1, [pc, #180]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008468:	4313      	orrs	r3, r2
 800846a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800846c:	4b2b      	ldr	r3, [pc, #172]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a19      	ldr	r1, [r3, #32]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	430b      	orrs	r3, r1
 800847e:	4927      	ldr	r1, [pc, #156]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 8008480:	4313      	orrs	r3, r2
 8008482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <HAL_RCC_OscConfig+0x4fc>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800848a:	f7ff f9c1 	bl	8007810 <HAL_GetTick>
 800848e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008492:	f7ff f9bd 	bl	8007810 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e037      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084a4:	4b1d      	ldr	r3, [pc, #116]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0f0      	beq.n	8008492 <HAL_RCC_OscConfig+0x46a>
 80084b0:	e02f      	b.n	8008512 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b2:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <HAL_RCC_OscConfig+0x4fc>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b8:	f7ff f9aa 	bl	8007810 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c0:	f7ff f9a6 	bl	8007810 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e020      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084d2:	4b12      	ldr	r3, [pc, #72]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0x498>
 80084de:	e018      	b.n	8008512 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e013      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <HAL_RCC_OscConfig+0x4f4>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d106      	bne.n	800850e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850a:	429a      	cmp	r2, r3
 800850c:	d001      	beq.n	8008512 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40021000 	.word	0x40021000
 8008520:	40007000 	.word	0x40007000
 8008524:	42420060 	.word	0x42420060

08008528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0d0      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800853c:	4b6a      	ldr	r3, [pc, #424]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d910      	bls.n	800856c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854a:	4b67      	ldr	r3, [pc, #412]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f023 0207 	bic.w	r2, r3, #7
 8008552:	4965      	ldr	r1, [pc, #404]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	4313      	orrs	r3, r2
 8008558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800855a:	4b63      	ldr	r3, [pc, #396]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d001      	beq.n	800856c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e0b8      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008584:	4b59      	ldr	r3, [pc, #356]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a58      	ldr	r2, [pc, #352]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 800858a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800858e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800859c:	4b53      	ldr	r3, [pc, #332]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	4a52      	ldr	r2, [pc, #328]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80085a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085a8:	4b50      	ldr	r3, [pc, #320]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	494d      	ldr	r1, [pc, #308]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d040      	beq.n	8008648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d107      	bne.n	80085de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ce:	4b47      	ldr	r3, [pc, #284]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d115      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e07f      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d107      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085e6:	4b41      	ldr	r3, [pc, #260]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e073      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085f6:	4b3d      	ldr	r3, [pc, #244]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e06b      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f023 0203 	bic.w	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	4936      	ldr	r1, [pc, #216]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008618:	f7ff f8fa 	bl	8007810 <HAL_GetTick>
 800861c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861e:	e00a      	b.n	8008636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008620:	f7ff f8f6 	bl	8007810 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	f241 3288 	movw	r2, #5000	; 0x1388
 800862e:	4293      	cmp	r3, r2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e053      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008636:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f003 020c 	and.w	r2, r3, #12
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	429a      	cmp	r2, r3
 8008646:	d1eb      	bne.n	8008620 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008648:	4b27      	ldr	r3, [pc, #156]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d210      	bcs.n	8008678 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008656:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f023 0207 	bic.w	r2, r3, #7
 800865e:	4922      	ldr	r1, [pc, #136]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	4313      	orrs	r3, r2
 8008664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008666:	4b20      	ldr	r3, [pc, #128]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d001      	beq.n	8008678 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e032      	b.n	80086de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	4916      	ldr	r1, [pc, #88]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 8008692:	4313      	orrs	r3, r2
 8008694:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	490e      	ldr	r1, [pc, #56]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086b6:	f000 f821 	bl	80086fc <HAL_RCC_GetSysClockFreq>
 80086ba:	4601      	mov	r1, r0
 80086bc:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	091b      	lsrs	r3, r3, #4
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <HAL_RCC_ClockConfig+0x1c8>)
 80086c8:	5cd3      	ldrb	r3, [r2, r3]
 80086ca:	fa21 f303 	lsr.w	r3, r1, r3
 80086ce:	4a09      	ldr	r2, [pc, #36]	; (80086f4 <HAL_RCC_ClockConfig+0x1cc>)
 80086d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <HAL_RCC_ClockConfig+0x1d0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff f858 	bl	800778c <HAL_InitTick>

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40022000 	.word	0x40022000
 80086ec:	40021000 	.word	0x40021000
 80086f0:	0800ba48 	.word	0x0800ba48
 80086f4:	2000013c 	.word	0x2000013c
 80086f8:	20000140 	.word	0x20000140

080086fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086fc:	b490      	push	{r4, r7}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008702:	4b2a      	ldr	r3, [pc, #168]	; (80087ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8008704:	1d3c      	adds	r4, r7, #4
 8008706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800870c:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	2300      	movs	r3, #0
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008726:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	f003 030c 	and.w	r3, r3, #12
 8008732:	2b04      	cmp	r3, #4
 8008734:	d002      	beq.n	800873c <HAL_RCC_GetSysClockFreq+0x40>
 8008736:	2b08      	cmp	r3, #8
 8008738:	d003      	beq.n	8008742 <HAL_RCC_GetSysClockFreq+0x46>
 800873a:	e02d      	b.n	8008798 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800873c:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800873e:	623b      	str	r3, [r7, #32]
      break;
 8008740:	e02d      	b.n	800879e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	0c9b      	lsrs	r3, r3, #18
 8008746:	f003 030f 	and.w	r3, r3, #15
 800874a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800874e:	4413      	add	r3, r2
 8008750:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008754:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d013      	beq.n	8008788 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008760:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	0c5b      	lsrs	r3, r3, #17
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800876e:	4413      	add	r3, r2
 8008770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008774:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800877a:	fb02 f203 	mul.w	r2, r2, r3
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
 8008786:	e004      	b.n	8008792 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	4a0c      	ldr	r2, [pc, #48]	; (80087bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	623b      	str	r3, [r7, #32]
      break;
 8008796:	e002      	b.n	800879e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008798:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800879a:	623b      	str	r3, [r7, #32]
      break;
 800879c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800879e:	6a3b      	ldr	r3, [r7, #32]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc90      	pop	{r4, r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	0800a274 	.word	0x0800a274
 80087b0:	0800a284 	.word	0x0800a284
 80087b4:	40021000 	.word	0x40021000
 80087b8:	007a1200 	.word	0x007a1200
 80087bc:	003d0900 	.word	0x003d0900

080087c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80087c6:	681b      	ldr	r3, [r3, #0]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr
 80087d0:	2000013c 	.word	0x2000013c

080087d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087d8:	f7ff fff2 	bl	80087c0 <HAL_RCC_GetHCLKFreq>
 80087dc:	4601      	mov	r1, r0
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
 80087ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40021000 	.word	0x40021000
 80087f8:	0800ba58 	.word	0x0800ba58

080087fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008800:	f7ff ffde 	bl	80087c0 <HAL_RCC_GetHCLKFreq>
 8008804:	4601      	mov	r1, r0
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	0adb      	lsrs	r3, r3, #11
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	4a03      	ldr	r2, [pc, #12]	; (8008820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008812:	5cd3      	ldrb	r3, [r2, r3]
 8008814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008818:	4618      	mov	r0, r3
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40021000 	.word	0x40021000
 8008820:	0800ba58 	.word	0x0800ba58

08008824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <RCC_Delay+0x34>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <RCC_Delay+0x38>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	0a5b      	lsrs	r3, r3, #9
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008840:	bf00      	nop
  }
  while (Delay --);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1e5a      	subs	r2, r3, #1
 8008846:	60fa      	str	r2, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f9      	bne.n	8008840 <RCC_Delay+0x1c>
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	2000013c 	.word	0x2000013c
 800885c:	10624dd3 	.word	0x10624dd3

08008860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e041      	b.n	80088f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fe fdfa 	bl	8007480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f000 fa72 	bl	8008d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	d001      	beq.n	8008918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e044      	b.n	80089a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0201 	orr.w	r2, r2, #1
 800892e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <HAL_TIM_Base_Start_IT+0xac>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d018      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x6c>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x6c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894c:	d00e      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x6c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d009      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x6c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a16      	ldr	r2, [pc, #88]	; (80089b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a15      	ldr	r2, [pc, #84]	; (80089bc <HAL_TIM_Base_Start_IT+0xbc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d111      	bne.n	8008990 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b06      	cmp	r3, #6
 800897c:	d010      	beq.n	80089a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0201 	orr.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898e:	e007      	b.n	80089a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr
 80089ac:	40012c00 	.word	0x40012c00
 80089b0:	40013400 	.word	0x40013400
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00

080089c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d122      	bne.n	8008a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d11b      	bne.n	8008a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0202 	mvn.w	r2, #2
 80089ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9a4 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008a08:	e005      	b.n	8008a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f997 	bl	8008d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f9a6 	bl	8008d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d122      	bne.n	8008a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d11b      	bne.n	8008a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0204 	mvn.w	r2, #4
 8008a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f97a 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e005      	b.n	8008a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f96d 	bl	8008d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f97c 	bl	8008d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d122      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0208 	mvn.w	r2, #8
 8008a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2204      	movs	r2, #4
 8008a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f950 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008ab0:	e005      	b.n	8008abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f943 	bl	8008d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f952 	bl	8008d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d122      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b10      	cmp	r3, #16
 8008ade:	d11b      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0210 	mvn.w	r2, #16
 8008ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2208      	movs	r2, #8
 8008aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f926 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008b04:	e005      	b.n	8008b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f919 	bl	8008d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f928 	bl	8008d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d10e      	bne.n	8008b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d107      	bne.n	8008b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0201 	mvn.w	r2, #1
 8008b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fe f90a 	bl	8006d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4e:	2b80      	cmp	r3, #128	; 0x80
 8008b50:	d10e      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5c:	2b80      	cmp	r3, #128	; 0x80
 8008b5e:	d107      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fa91 	bl	8009092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d10e      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d107      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f8ec 	bl	8008d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d10e      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d107      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0220 	mvn.w	r2, #32
 8008bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa5c 	bl	8009080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_TIM_ConfigClockSource+0x18>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e0a6      	b.n	8008d36 <HAL_TIM_ConfigClockSource+0x166>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d067      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x120>
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d80b      	bhi.n	8008c3c <HAL_TIM_ConfigClockSource+0x6c>
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d073      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x140>
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d802      	bhi.n	8008c32 <HAL_TIM_ConfigClockSource+0x62>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d06f      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008c30:	e078      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d06c      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x140>
 8008c36:	2b30      	cmp	r3, #48	; 0x30
 8008c38:	d06a      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008c3a:	e073      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c3c:	2b70      	cmp	r3, #112	; 0x70
 8008c3e:	d00d      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x8c>
 8008c40:	2b70      	cmp	r3, #112	; 0x70
 8008c42:	d804      	bhi.n	8008c4e <HAL_TIM_ConfigClockSource+0x7e>
 8008c44:	2b50      	cmp	r3, #80	; 0x50
 8008c46:	d033      	beq.n	8008cb0 <HAL_TIM_ConfigClockSource+0xe0>
 8008c48:	2b60      	cmp	r3, #96	; 0x60
 8008c4a:	d041      	beq.n	8008cd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008c4c:	e06a      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c52:	d066      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x152>
 8008c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c58:	d017      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008c5a:	e063      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f000 f97d 	bl	8008f6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	609a      	str	r2, [r3, #8]
      break;
 8008c88:	e04c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6899      	ldr	r1, [r3, #8]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f000 f966 	bl	8008f6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cac:	609a      	str	r2, [r3, #8]
      break;
 8008cae:	e039      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6859      	ldr	r1, [r3, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f000 f8dd 	bl	8008e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2150      	movs	r1, #80	; 0x50
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f934 	bl	8008f36 <TIM_ITRx_SetConfig>
      break;
 8008cce:	e029      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6859      	ldr	r1, [r3, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f000 f8fb 	bl	8008ed8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2160      	movs	r1, #96	; 0x60
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f924 	bl	8008f36 <TIM_ITRx_SetConfig>
      break;
 8008cee:	e019      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	6859      	ldr	r1, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f000 f8bd 	bl	8008e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2140      	movs	r1, #64	; 0x40
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f914 	bl	8008f36 <TIM_ITRx_SetConfig>
      break;
 8008d0e:	e009      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 f90b 	bl	8008f36 <TIM_ITRx_SetConfig>
        break;
 8008d20:	e000      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr
	...

08008d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a33      	ldr	r2, [pc, #204]	; (8008e68 <TIM_Base_SetConfig+0xe0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d013      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a32      	ldr	r2, [pc, #200]	; (8008e6c <TIM_Base_SetConfig+0xe4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00f      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dae:	d00b      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a2f      	ldr	r2, [pc, #188]	; (8008e70 <TIM_Base_SetConfig+0xe8>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d007      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a2e      	ldr	r2, [pc, #184]	; (8008e74 <TIM_Base_SetConfig+0xec>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d003      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a2d      	ldr	r2, [pc, #180]	; (8008e78 <TIM_Base_SetConfig+0xf0>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d108      	bne.n	8008dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a22      	ldr	r2, [pc, #136]	; (8008e68 <TIM_Base_SetConfig+0xe0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d013      	beq.n	8008e0a <TIM_Base_SetConfig+0x82>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a21      	ldr	r2, [pc, #132]	; (8008e6c <TIM_Base_SetConfig+0xe4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00f      	beq.n	8008e0a <TIM_Base_SetConfig+0x82>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df0:	d00b      	beq.n	8008e0a <TIM_Base_SetConfig+0x82>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <TIM_Base_SetConfig+0xe8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <TIM_Base_SetConfig+0x82>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a1d      	ldr	r2, [pc, #116]	; (8008e74 <TIM_Base_SetConfig+0xec>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d003      	beq.n	8008e0a <TIM_Base_SetConfig+0x82>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <TIM_Base_SetConfig+0xf0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d108      	bne.n	8008e1c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <TIM_Base_SetConfig+0xe0>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_Base_SetConfig+0xc8>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a08      	ldr	r2, [pc, #32]	; (8008e6c <TIM_Base_SetConfig+0xe4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d103      	bne.n	8008e58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	615a      	str	r2, [r3, #20]
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr
 8008e68:	40012c00 	.word	0x40012c00
 8008e6c:	40013400 	.word	0x40013400
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00

08008e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	f023 0201 	bic.w	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f023 030a 	bic.w	r3, r3, #10
 8008eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	621a      	str	r2, [r3, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	f023 0210 	bic.w	r2, r3, #16
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	031b      	lsls	r3, r3, #12
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc80      	pop	{r7}
 8008f34:	4770      	bx	lr

08008f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f043 0307 	orr.w	r3, r3, #7
 8008f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr

08008f6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	021a      	lsls	r2, r3, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	609a      	str	r2, [r3, #8]
}
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e050      	b.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a1b      	ldr	r2, [pc, #108]	; (800906c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d018      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a19      	ldr	r2, [pc, #100]	; (8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009016:	d00e      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a15      	ldr	r2, [pc, #84]	; (8009074 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d009      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a14      	ldr	r2, [pc, #80]	; (8009078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d004      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a12      	ldr	r2, [pc, #72]	; (800907c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d10c      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800903c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	4313      	orrs	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr
 800906c:	40012c00 	.word	0x40012c00
 8009070:	40013400 	.word	0x40013400
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00

08009080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr

08009092 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e03f      	b.n	8009136 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fe f9fe 	bl	80074cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2224      	movs	r2, #36	; 0x24
 80090d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fb83 	bl	80097f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	695a      	ldr	r2, [r3, #20]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800910c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800911c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b08a      	sub	sp, #40	; 0x28
 8009142:	af02      	add	r7, sp, #8
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b20      	cmp	r3, #32
 800915c:	d17c      	bne.n	8009258 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <HAL_UART_Transmit+0x2c>
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e075      	b.n	800925a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UART_Transmit+0x3e>
 8009178:	2302      	movs	r3, #2
 800917a:	e06e      	b.n	800925a <HAL_UART_Transmit+0x11c>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2221      	movs	r2, #33	; 0x21
 800918e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009192:	f7fe fb3d 	bl	8007810 <HAL_GetTick>
 8009196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	88fa      	ldrh	r2, [r7, #6]
 80091a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ac:	d108      	bne.n	80091c0 <HAL_UART_Transmit+0x82>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	e003      	b.n	80091c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80091d0:	e02a      	b.n	8009228 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2200      	movs	r2, #0
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f9a7 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e036      	b.n	800925a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	3302      	adds	r3, #2
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e007      	b.n	800921a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	781a      	ldrb	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	3301      	adds	r3, #1
 8009218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1cf      	bne.n	80091d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	2140      	movs	r1, #64	; 0x40
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f977 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e006      	b.n	800925a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	e000      	b.n	800925a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009258:	2302      	movs	r3, #2
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	4613      	mov	r3, r2
 800926e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b20      	cmp	r3, #32
 800927a:	d140      	bne.n	80092fe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_UART_Receive_IT+0x26>
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e039      	b.n	8009300 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UART_Receive_IT+0x38>
 8009296:	2302      	movs	r3, #2
 8009298:	e032      	b.n	8009300 <HAL_UART_Receive_IT+0x9e>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	88fa      	ldrh	r2, [r7, #6]
 80092ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	88fa      	ldrh	r2, [r7, #6]
 80092b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2222      	movs	r2, #34	; 0x22
 80092be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092d8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695a      	ldr	r2, [r3, #20]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0201 	orr.w	r2, r2, #1
 80092e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0220 	orr.w	r2, r2, #32
 80092f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e000      	b.n	8009300 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80092fe:	2302      	movs	r3, #2
  }
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr
	...

0800930c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800932c:	2300      	movs	r3, #0
 800932e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_UART_IRQHandler+0x52>
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9cc 	bl	80096f4 <UART_Receive_IT>
      return;
 800935c:	e0d1      	b.n	8009502 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80b0 	beq.w	80094c6 <HAL_UART_IRQHandler+0x1ba>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <HAL_UART_IRQHandler+0x70>
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80a5 	beq.w	80094c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <HAL_UART_IRQHandler+0x90>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f003 0304 	and.w	r3, r3, #4
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <HAL_UART_IRQHandler+0xb0>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	f043 0202 	orr.w	r2, r3, #2
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <HAL_UART_IRQHandler+0xd0>
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d4:	f043 0204 	orr.w	r2, r3, #4
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00f      	beq.n	8009406 <HAL_UART_IRQHandler+0xfa>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <HAL_UART_IRQHandler+0xee>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d005      	beq.n	8009406 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fe:	f043 0208 	orr.w	r2, r3, #8
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d078      	beq.n	8009500 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d007      	beq.n	8009428 <HAL_UART_IRQHandler+0x11c>
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f966 	bl	80096f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009432:	2b00      	cmp	r3, #0
 8009434:	bf14      	ite	ne
 8009436:	2301      	movne	r3, #1
 8009438:	2300      	moveq	r3, #0
 800943a:	b2db      	uxtb	r3, r3
 800943c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <HAL_UART_IRQHandler+0x144>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d031      	beq.n	80094b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f8b7 	bl	80095c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d023      	beq.n	80094ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695a      	ldr	r2, [r3, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009472:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	2b00      	cmp	r3, #0
 800947a:	d013      	beq.n	80094a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009480:	4a21      	ldr	r2, [pc, #132]	; (8009508 <HAL_UART_IRQHandler+0x1fc>)
 8009482:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fafb 	bl	8007a84 <HAL_DMA_Abort_IT>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d016      	beq.n	80094c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800949e:	4610      	mov	r0, r2
 80094a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a2:	e00e      	b.n	80094c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f83a 	bl	800951e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094aa:	e00a      	b.n	80094c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f836 	bl	800951e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b2:	e006      	b.n	80094c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f832 	bl	800951e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80094c0:	e01e      	b.n	8009500 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c2:	bf00      	nop
    return;
 80094c4:	e01c      	b.n	8009500 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <HAL_UART_IRQHandler+0x1d6>
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f8a3 	bl	8009626 <UART_Transmit_IT>
    return;
 80094e0:	e00f      	b.n	8009502 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <HAL_UART_IRQHandler+0x1f6>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f8e4 	bl	80096c4 <UART_EndTransmit_IT>
    return;
 80094fc:	bf00      	nop
 80094fe:	e000      	b.n	8009502 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009500:	bf00      	nop
  }
}
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	080095ff 	.word	0x080095ff

0800950c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	bc80      	pop	{r7}
 800951c:	4770      	bx	lr

0800951e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	bc80      	pop	{r7}
 800952e:	4770      	bx	lr

08009530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	e02c      	b.n	800959c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d028      	beq.n	800959c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <UART_WaitOnFlagUntilTimeout+0x30>
 8009550:	f7fe f95e 	bl	8007810 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d21d      	bcs.n	800959c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800956e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695a      	ldr	r2, [r3, #20]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2220      	movs	r2, #32
 8009584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e00f      	b.n	80095bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4013      	ands	r3, r2
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	bf0c      	ite	eq
 80095ac:	2301      	moveq	r3, #1
 80095ae:	2300      	movne	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d0c3      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695a      	ldr	r2, [r3, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0201 	bic.w	r2, r2, #1
 80095ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7ff ff80 	bl	800951e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b21      	cmp	r3, #33	; 0x21
 8009638:	d13e      	bne.n	80096b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009642:	d114      	bne.n	800966e <UART_Transmit_IT+0x48>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d110      	bne.n	800966e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	621a      	str	r2, [r3, #32]
 800966c:	e008      	b.n	8009680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6211      	str	r1, [r2, #32]
 8009678:	781a      	ldrb	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29b      	uxth	r3, r3
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4619      	mov	r1, r3
 800968e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10f      	bne.n	80096b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff ff11 	bl	800950c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b22      	cmp	r3, #34	; 0x22
 8009706:	d170      	bne.n	80097ea <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009710:	d117      	bne.n	8009742 <UART_Receive_IT+0x4e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d113      	bne.n	8009742 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009730:	b29a      	uxth	r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	1c9a      	adds	r2, r3, #2
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	629a      	str	r2, [r3, #40]	; 0x28
 8009740:	e026      	b.n	8009790 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009754:	d007      	beq.n	8009766 <UART_Receive_IT+0x72>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <UART_Receive_IT+0x80>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	b2da      	uxtb	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e008      	b.n	8009786 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009780:	b2da      	uxtb	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009794:	b29b      	uxth	r3, r3
 8009796:	3b01      	subs	r3, #1
 8009798:	b29b      	uxth	r3, r3
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4619      	mov	r1, r3
 800979e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d120      	bne.n	80097e6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0220 	bic.w	r2, r2, #32
 80097b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68da      	ldr	r2, [r3, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695a      	ldr	r2, [r3, #20]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fd fc8f 	bl	8007100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	e002      	b.n	80097ec <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	e000      	b.n	80097ec <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80097ea:	2302      	movs	r3, #2
  }
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	4313      	orrs	r3, r2
 8009822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800982e:	f023 030c 	bic.w	r3, r3, #12
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6812      	ldr	r2, [r2, #0]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	430b      	orrs	r3, r1
 800983a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a2c      	ldr	r2, [pc, #176]	; (8009908 <UART_SetConfig+0x114>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d103      	bne.n	8009864 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800985c:	f7fe ffce 	bl	80087fc <HAL_RCC_GetPCLK2Freq>
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	e002      	b.n	800986a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009864:	f7fe ffb6 	bl	80087d4 <HAL_RCC_GetPCLK1Freq>
 8009868:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009a      	lsls	r2, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	4a22      	ldr	r2, [pc, #136]	; (800990c <UART_SetConfig+0x118>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	0119      	lsls	r1, r3, #4
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009a      	lsls	r2, r3, #2
 8009894:	441a      	add	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	fbb2 f2f3 	udiv	r2, r2, r3
 80098a0:	4b1a      	ldr	r3, [pc, #104]	; (800990c <UART_SetConfig+0x118>)
 80098a2:	fba3 0302 	umull	r0, r3, r3, r2
 80098a6:	095b      	lsrs	r3, r3, #5
 80098a8:	2064      	movs	r0, #100	; 0x64
 80098aa:	fb00 f303 	mul.w	r3, r0, r3
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	3332      	adds	r3, #50	; 0x32
 80098b4:	4a15      	ldr	r2, [pc, #84]	; (800990c <UART_SetConfig+0x118>)
 80098b6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098c0:	4419      	add	r1, r3
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009a      	lsls	r2, r3, #2
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <UART_SetConfig+0x118>)
 80098da:	fba3 0302 	umull	r0, r3, r3, r2
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	2064      	movs	r0, #100	; 0x64
 80098e2:	fb00 f303 	mul.w	r3, r0, r3
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	3332      	adds	r3, #50	; 0x32
 80098ec:	4a07      	ldr	r2, [pc, #28]	; (800990c <UART_SetConfig+0x118>)
 80098ee:	fba2 2303 	umull	r2, r3, r2, r3
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	440a      	add	r2, r1
 80098fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	40013800 	.word	0x40013800
 800990c:	51eb851f 	.word	0x51eb851f

08009910 <__errno>:
 8009910:	4b01      	ldr	r3, [pc, #4]	; (8009918 <__errno+0x8>)
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	20000148 	.word	0x20000148

0800991c <__libc_init_array>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	2500      	movs	r5, #0
 8009920:	4e0c      	ldr	r6, [pc, #48]	; (8009954 <__libc_init_array+0x38>)
 8009922:	4c0d      	ldr	r4, [pc, #52]	; (8009958 <__libc_init_array+0x3c>)
 8009924:	1ba4      	subs	r4, r4, r6
 8009926:	10a4      	asrs	r4, r4, #2
 8009928:	42a5      	cmp	r5, r4
 800992a:	d109      	bne.n	8009940 <__libc_init_array+0x24>
 800992c:	f000 fc4e 	bl	800a1cc <_init>
 8009930:	2500      	movs	r5, #0
 8009932:	4e0a      	ldr	r6, [pc, #40]	; (800995c <__libc_init_array+0x40>)
 8009934:	4c0a      	ldr	r4, [pc, #40]	; (8009960 <__libc_init_array+0x44>)
 8009936:	1ba4      	subs	r4, r4, r6
 8009938:	10a4      	asrs	r4, r4, #2
 800993a:	42a5      	cmp	r5, r4
 800993c:	d105      	bne.n	800994a <__libc_init_array+0x2e>
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009944:	4798      	blx	r3
 8009946:	3501      	adds	r5, #1
 8009948:	e7ee      	b.n	8009928 <__libc_init_array+0xc>
 800994a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800994e:	4798      	blx	r3
 8009950:	3501      	adds	r5, #1
 8009952:	e7f2      	b.n	800993a <__libc_init_array+0x1e>
 8009954:	0800ba94 	.word	0x0800ba94
 8009958:	0800ba94 	.word	0x0800ba94
 800995c:	0800ba94 	.word	0x0800ba94
 8009960:	0800ba98 	.word	0x0800ba98

08009964 <memset>:
 8009964:	4603      	mov	r3, r0
 8009966:	4402      	add	r2, r0
 8009968:	4293      	cmp	r3, r2
 800996a:	d100      	bne.n	800996e <memset+0xa>
 800996c:	4770      	bx	lr
 800996e:	f803 1b01 	strb.w	r1, [r3], #1
 8009972:	e7f9      	b.n	8009968 <memset+0x4>

08009974 <siprintf>:
 8009974:	b40e      	push	{r1, r2, r3}
 8009976:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800997a:	b500      	push	{lr}
 800997c:	b09c      	sub	sp, #112	; 0x70
 800997e:	ab1d      	add	r3, sp, #116	; 0x74
 8009980:	9002      	str	r0, [sp, #8]
 8009982:	9006      	str	r0, [sp, #24]
 8009984:	9107      	str	r1, [sp, #28]
 8009986:	9104      	str	r1, [sp, #16]
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <siprintf+0x38>)
 800998a:	4909      	ldr	r1, [pc, #36]	; (80099b0 <siprintf+0x3c>)
 800998c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	6800      	ldr	r0, [r0, #0]
 8009994:	a902      	add	r1, sp, #8
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	f000 f880 	bl	8009a9c <_svfiprintf_r>
 800999c:	2200      	movs	r2, #0
 800999e:	9b02      	ldr	r3, [sp, #8]
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	b01c      	add	sp, #112	; 0x70
 80099a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099a8:	b003      	add	sp, #12
 80099aa:	4770      	bx	lr
 80099ac:	20000148 	.word	0x20000148
 80099b0:	ffff0208 	.word	0xffff0208

080099b4 <strstr>:
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	7803      	ldrb	r3, [r0, #0]
 80099b8:	b17b      	cbz	r3, 80099da <strstr+0x26>
 80099ba:	4604      	mov	r4, r0
 80099bc:	7823      	ldrb	r3, [r4, #0]
 80099be:	4620      	mov	r0, r4
 80099c0:	1c66      	adds	r6, r4, #1
 80099c2:	b17b      	cbz	r3, 80099e4 <strstr+0x30>
 80099c4:	1e4a      	subs	r2, r1, #1
 80099c6:	1e63      	subs	r3, r4, #1
 80099c8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80099cc:	b14d      	cbz	r5, 80099e2 <strstr+0x2e>
 80099ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80099d2:	4634      	mov	r4, r6
 80099d4:	42af      	cmp	r7, r5
 80099d6:	d0f7      	beq.n	80099c8 <strstr+0x14>
 80099d8:	e7f0      	b.n	80099bc <strstr+0x8>
 80099da:	780b      	ldrb	r3, [r1, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	bf18      	it	ne
 80099e0:	2000      	movne	r0, #0
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e4:	4618      	mov	r0, r3
 80099e6:	e7fc      	b.n	80099e2 <strstr+0x2e>

080099e8 <__ssputs_r>:
 80099e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	688e      	ldr	r6, [r1, #8]
 80099ee:	4682      	mov	sl, r0
 80099f0:	429e      	cmp	r6, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	4690      	mov	r8, r2
 80099f6:	4699      	mov	r9, r3
 80099f8:	d837      	bhi.n	8009a6a <__ssputs_r+0x82>
 80099fa:	898a      	ldrh	r2, [r1, #12]
 80099fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a00:	d031      	beq.n	8009a66 <__ssputs_r+0x7e>
 8009a02:	2302      	movs	r3, #2
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	6909      	ldr	r1, [r1, #16]
 8009a08:	1a6f      	subs	r7, r5, r1
 8009a0a:	6965      	ldr	r5, [r4, #20]
 8009a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a10:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a14:	f109 0301 	add.w	r3, r9, #1
 8009a18:	443b      	add	r3, r7
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	bf38      	it	cc
 8009a1e:	461d      	movcc	r5, r3
 8009a20:	0553      	lsls	r3, r2, #21
 8009a22:	d530      	bpl.n	8009a86 <__ssputs_r+0x9e>
 8009a24:	4629      	mov	r1, r5
 8009a26:	f000 fb37 	bl	800a098 <_malloc_r>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	b950      	cbnz	r0, 8009a44 <__ssputs_r+0x5c>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	f8ca 3000 	str.w	r3, [sl]
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	463a      	mov	r2, r7
 8009a46:	6921      	ldr	r1, [r4, #16]
 8009a48:	f000 fab6 	bl	8009fb8 <memcpy>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	6126      	str	r6, [r4, #16]
 8009a5a:	443e      	add	r6, r7
 8009a5c:	6026      	str	r6, [r4, #0]
 8009a5e:	464e      	mov	r6, r9
 8009a60:	6165      	str	r5, [r4, #20]
 8009a62:	1bed      	subs	r5, r5, r7
 8009a64:	60a5      	str	r5, [r4, #8]
 8009a66:	454e      	cmp	r6, r9
 8009a68:	d900      	bls.n	8009a6c <__ssputs_r+0x84>
 8009a6a:	464e      	mov	r6, r9
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4641      	mov	r1, r8
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	f000 faac 	bl	8009fce <memmove>
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	1b9b      	subs	r3, r3, r6
 8009a7c:	60a3      	str	r3, [r4, #8]
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	441e      	add	r6, r3
 8009a82:	6026      	str	r6, [r4, #0]
 8009a84:	e7dc      	b.n	8009a40 <__ssputs_r+0x58>
 8009a86:	462a      	mov	r2, r5
 8009a88:	f000 fb60 	bl	800a14c <_realloc_r>
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1e2      	bne.n	8009a58 <__ssputs_r+0x70>
 8009a92:	6921      	ldr	r1, [r4, #16]
 8009a94:	4650      	mov	r0, sl
 8009a96:	f000 fab3 	bl	800a000 <_free_r>
 8009a9a:	e7c8      	b.n	8009a2e <__ssputs_r+0x46>

08009a9c <_svfiprintf_r>:
 8009a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	461d      	mov	r5, r3
 8009aa2:	898b      	ldrh	r3, [r1, #12]
 8009aa4:	b09d      	sub	sp, #116	; 0x74
 8009aa6:	061f      	lsls	r7, r3, #24
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	4616      	mov	r6, r2
 8009aae:	d50f      	bpl.n	8009ad0 <_svfiprintf_r+0x34>
 8009ab0:	690b      	ldr	r3, [r1, #16]
 8009ab2:	b96b      	cbnz	r3, 8009ad0 <_svfiprintf_r+0x34>
 8009ab4:	2140      	movs	r1, #64	; 0x40
 8009ab6:	f000 faef 	bl	800a098 <_malloc_r>
 8009aba:	6020      	str	r0, [r4, #0]
 8009abc:	6120      	str	r0, [r4, #16]
 8009abe:	b928      	cbnz	r0, 8009acc <_svfiprintf_r+0x30>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	f8c8 3000 	str.w	r3, [r8]
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aca:	e0c8      	b.n	8009c5e <_svfiprintf_r+0x1c2>
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	6163      	str	r3, [r4, #20]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ada:	2330      	movs	r3, #48	; 0x30
 8009adc:	f04f 0b01 	mov.w	fp, #1
 8009ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae4:	9503      	str	r5, [sp, #12]
 8009ae6:	4637      	mov	r7, r6
 8009ae8:	463d      	mov	r5, r7
 8009aea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009aee:	b10b      	cbz	r3, 8009af4 <_svfiprintf_r+0x58>
 8009af0:	2b25      	cmp	r3, #37	; 0x25
 8009af2:	d13e      	bne.n	8009b72 <_svfiprintf_r+0xd6>
 8009af4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009af8:	d00b      	beq.n	8009b12 <_svfiprintf_r+0x76>
 8009afa:	4653      	mov	r3, sl
 8009afc:	4632      	mov	r2, r6
 8009afe:	4621      	mov	r1, r4
 8009b00:	4640      	mov	r0, r8
 8009b02:	f7ff ff71 	bl	80099e8 <__ssputs_r>
 8009b06:	3001      	adds	r0, #1
 8009b08:	f000 80a4 	beq.w	8009c54 <_svfiprintf_r+0x1b8>
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	4453      	add	r3, sl
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	783b      	ldrb	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 809d 	beq.w	8009c54 <_svfiprintf_r+0x1b8>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b2e:	462f      	mov	r7, r5
 8009b30:	2205      	movs	r2, #5
 8009b32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b36:	4850      	ldr	r0, [pc, #320]	; (8009c78 <_svfiprintf_r+0x1dc>)
 8009b38:	f000 fa30 	bl	8009f9c <memchr>
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	b9d0      	cbnz	r0, 8009b76 <_svfiprintf_r+0xda>
 8009b40:	06d9      	lsls	r1, r3, #27
 8009b42:	bf44      	itt	mi
 8009b44:	2220      	movmi	r2, #32
 8009b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b4a:	071a      	lsls	r2, r3, #28
 8009b4c:	bf44      	itt	mi
 8009b4e:	222b      	movmi	r2, #43	; 0x2b
 8009b50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b54:	782a      	ldrb	r2, [r5, #0]
 8009b56:	2a2a      	cmp	r2, #42	; 0x2a
 8009b58:	d015      	beq.n	8009b86 <_svfiprintf_r+0xea>
 8009b5a:	462f      	mov	r7, r5
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	250a      	movs	r5, #10
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	4639      	mov	r1, r7
 8009b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b68:	3b30      	subs	r3, #48	; 0x30
 8009b6a:	2b09      	cmp	r3, #9
 8009b6c:	d94d      	bls.n	8009c0a <_svfiprintf_r+0x16e>
 8009b6e:	b1b8      	cbz	r0, 8009ba0 <_svfiprintf_r+0x104>
 8009b70:	e00f      	b.n	8009b92 <_svfiprintf_r+0xf6>
 8009b72:	462f      	mov	r7, r5
 8009b74:	e7b8      	b.n	8009ae8 <_svfiprintf_r+0x4c>
 8009b76:	4a40      	ldr	r2, [pc, #256]	; (8009c78 <_svfiprintf_r+0x1dc>)
 8009b78:	463d      	mov	r5, r7
 8009b7a:	1a80      	subs	r0, r0, r2
 8009b7c:	fa0b f000 	lsl.w	r0, fp, r0
 8009b80:	4318      	orrs	r0, r3
 8009b82:	9004      	str	r0, [sp, #16]
 8009b84:	e7d3      	b.n	8009b2e <_svfiprintf_r+0x92>
 8009b86:	9a03      	ldr	r2, [sp, #12]
 8009b88:	1d11      	adds	r1, r2, #4
 8009b8a:	6812      	ldr	r2, [r2, #0]
 8009b8c:	9103      	str	r1, [sp, #12]
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	db01      	blt.n	8009b96 <_svfiprintf_r+0xfa>
 8009b92:	9207      	str	r2, [sp, #28]
 8009b94:	e004      	b.n	8009ba0 <_svfiprintf_r+0x104>
 8009b96:	4252      	negs	r2, r2
 8009b98:	f043 0302 	orr.w	r3, r3, #2
 8009b9c:	9207      	str	r2, [sp, #28]
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	783b      	ldrb	r3, [r7, #0]
 8009ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba4:	d10c      	bne.n	8009bc0 <_svfiprintf_r+0x124>
 8009ba6:	787b      	ldrb	r3, [r7, #1]
 8009ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8009baa:	d133      	bne.n	8009c14 <_svfiprintf_r+0x178>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	3702      	adds	r7, #2
 8009bb0:	1d1a      	adds	r2, r3, #4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	9203      	str	r2, [sp, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bfb8      	it	lt
 8009bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	4d2e      	ldr	r5, [pc, #184]	; (8009c7c <_svfiprintf_r+0x1e0>)
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	7839      	ldrb	r1, [r7, #0]
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f9e8 	bl	8009f9c <memchr>
 8009bcc:	b138      	cbz	r0, 8009bde <_svfiprintf_r+0x142>
 8009bce:	2340      	movs	r3, #64	; 0x40
 8009bd0:	1b40      	subs	r0, r0, r5
 8009bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	3701      	adds	r7, #1
 8009bda:	4303      	orrs	r3, r0
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	7839      	ldrb	r1, [r7, #0]
 8009be0:	2206      	movs	r2, #6
 8009be2:	4827      	ldr	r0, [pc, #156]	; (8009c80 <_svfiprintf_r+0x1e4>)
 8009be4:	1c7e      	adds	r6, r7, #1
 8009be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bea:	f000 f9d7 	bl	8009f9c <memchr>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d038      	beq.n	8009c64 <_svfiprintf_r+0x1c8>
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <_svfiprintf_r+0x1e8>)
 8009bf4:	bb13      	cbnz	r3, 8009c3c <_svfiprintf_r+0x1a0>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	3307      	adds	r3, #7
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	3308      	adds	r3, #8
 8009c00:	9303      	str	r3, [sp, #12]
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	444b      	add	r3, r9
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	e76d      	b.n	8009ae6 <_svfiprintf_r+0x4a>
 8009c0a:	fb05 3202 	mla	r2, r5, r2, r3
 8009c0e:	2001      	movs	r0, #1
 8009c10:	460f      	mov	r7, r1
 8009c12:	e7a6      	b.n	8009b62 <_svfiprintf_r+0xc6>
 8009c14:	2300      	movs	r3, #0
 8009c16:	250a      	movs	r5, #10
 8009c18:	4619      	mov	r1, r3
 8009c1a:	3701      	adds	r7, #1
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c24:	3a30      	subs	r2, #48	; 0x30
 8009c26:	2a09      	cmp	r2, #9
 8009c28:	d903      	bls.n	8009c32 <_svfiprintf_r+0x196>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0c8      	beq.n	8009bc0 <_svfiprintf_r+0x124>
 8009c2e:	9105      	str	r1, [sp, #20]
 8009c30:	e7c6      	b.n	8009bc0 <_svfiprintf_r+0x124>
 8009c32:	fb05 2101 	mla	r1, r5, r1, r2
 8009c36:	2301      	movs	r3, #1
 8009c38:	4607      	mov	r7, r0
 8009c3a:	e7f0      	b.n	8009c1e <_svfiprintf_r+0x182>
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4622      	mov	r2, r4
 8009c42:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <_svfiprintf_r+0x1ec>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	4640      	mov	r0, r8
 8009c48:	f3af 8000 	nop.w
 8009c4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c50:	4681      	mov	r9, r0
 8009c52:	d1d6      	bne.n	8009c02 <_svfiprintf_r+0x166>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	065b      	lsls	r3, r3, #25
 8009c58:	f53f af35 	bmi.w	8009ac6 <_svfiprintf_r+0x2a>
 8009c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5e:	b01d      	add	sp, #116	; 0x74
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <_svfiprintf_r+0x1ec>)
 8009c6c:	a904      	add	r1, sp, #16
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f000 f882 	bl	8009d78 <_printf_i>
 8009c74:	e7ea      	b.n	8009c4c <_svfiprintf_r+0x1b0>
 8009c76:	bf00      	nop
 8009c78:	0800ba60 	.word	0x0800ba60
 8009c7c:	0800ba66 	.word	0x0800ba66
 8009c80:	0800ba6a 	.word	0x0800ba6a
 8009c84:	00000000 	.word	0x00000000
 8009c88:	080099e9 	.word	0x080099e9

08009c8c <_printf_common>:
 8009c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	4691      	mov	r9, r2
 8009c92:	461f      	mov	r7, r3
 8009c94:	688a      	ldr	r2, [r1, #8]
 8009c96:	690b      	ldr	r3, [r1, #16]
 8009c98:	4606      	mov	r6, r0
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	bfb8      	it	lt
 8009c9e:	4613      	movlt	r3, r2
 8009ca0:	f8c9 3000 	str.w	r3, [r9]
 8009ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ca8:	460c      	mov	r4, r1
 8009caa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cae:	b112      	cbz	r2, 8009cb6 <_printf_common+0x2a>
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	f8c9 3000 	str.w	r3, [r9]
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	0699      	lsls	r1, r3, #26
 8009cba:	bf42      	ittt	mi
 8009cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009cc0:	3302      	addmi	r3, #2
 8009cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	f015 0506 	ands.w	r5, r5, #6
 8009ccc:	d107      	bne.n	8009cde <_printf_common+0x52>
 8009cce:	f104 0a19 	add.w	sl, r4, #25
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	42ab      	cmp	r3, r5
 8009cdc:	dc29      	bgt.n	8009d32 <_printf_common+0xa6>
 8009cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	3300      	adds	r3, #0
 8009ce6:	bf18      	it	ne
 8009ce8:	2301      	movne	r3, #1
 8009cea:	0692      	lsls	r2, r2, #26
 8009cec:	d42e      	bmi.n	8009d4c <_printf_common+0xc0>
 8009cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	47c0      	blx	r8
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d021      	beq.n	8009d40 <_printf_common+0xb4>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	68e5      	ldr	r5, [r4, #12]
 8009d00:	f003 0306 	and.w	r3, r3, #6
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	bf18      	it	ne
 8009d08:	2500      	movne	r5, #0
 8009d0a:	f8d9 2000 	ldr.w	r2, [r9]
 8009d0e:	f04f 0900 	mov.w	r9, #0
 8009d12:	bf08      	it	eq
 8009d14:	1aad      	subeq	r5, r5, r2
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	6922      	ldr	r2, [r4, #16]
 8009d1a:	bf08      	it	eq
 8009d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bfc4      	itt	gt
 8009d24:	1a9b      	subgt	r3, r3, r2
 8009d26:	18ed      	addgt	r5, r5, r3
 8009d28:	341a      	adds	r4, #26
 8009d2a:	454d      	cmp	r5, r9
 8009d2c:	d11a      	bne.n	8009d64 <_printf_common+0xd8>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e008      	b.n	8009d44 <_printf_common+0xb8>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4652      	mov	r2, sl
 8009d36:	4639      	mov	r1, r7
 8009d38:	4630      	mov	r0, r6
 8009d3a:	47c0      	blx	r8
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d103      	bne.n	8009d48 <_printf_common+0xbc>
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295
 8009d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d48:	3501      	adds	r5, #1
 8009d4a:	e7c2      	b.n	8009cd2 <_printf_common+0x46>
 8009d4c:	2030      	movs	r0, #48	; 0x30
 8009d4e:	18e1      	adds	r1, r4, r3
 8009d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d5a:	4422      	add	r2, r4
 8009d5c:	3302      	adds	r3, #2
 8009d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d62:	e7c4      	b.n	8009cee <_printf_common+0x62>
 8009d64:	2301      	movs	r3, #1
 8009d66:	4622      	mov	r2, r4
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	47c0      	blx	r8
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d0e6      	beq.n	8009d40 <_printf_common+0xb4>
 8009d72:	f109 0901 	add.w	r9, r9, #1
 8009d76:	e7d8      	b.n	8009d2a <_printf_common+0x9e>

08009d78 <_printf_i>:
 8009d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d80:	460c      	mov	r4, r1
 8009d82:	7e09      	ldrb	r1, [r1, #24]
 8009d84:	b085      	sub	sp, #20
 8009d86:	296e      	cmp	r1, #110	; 0x6e
 8009d88:	4617      	mov	r7, r2
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	4698      	mov	r8, r3
 8009d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d90:	f000 80b3 	beq.w	8009efa <_printf_i+0x182>
 8009d94:	d822      	bhi.n	8009ddc <_printf_i+0x64>
 8009d96:	2963      	cmp	r1, #99	; 0x63
 8009d98:	d036      	beq.n	8009e08 <_printf_i+0x90>
 8009d9a:	d80a      	bhi.n	8009db2 <_printf_i+0x3a>
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	f000 80b9 	beq.w	8009f14 <_printf_i+0x19c>
 8009da2:	2958      	cmp	r1, #88	; 0x58
 8009da4:	f000 8083 	beq.w	8009eae <_printf_i+0x136>
 8009da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009db0:	e032      	b.n	8009e18 <_printf_i+0xa0>
 8009db2:	2964      	cmp	r1, #100	; 0x64
 8009db4:	d001      	beq.n	8009dba <_printf_i+0x42>
 8009db6:	2969      	cmp	r1, #105	; 0x69
 8009db8:	d1f6      	bne.n	8009da8 <_printf_i+0x30>
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	0605      	lsls	r5, r0, #24
 8009dc0:	f103 0104 	add.w	r1, r3, #4
 8009dc4:	d52a      	bpl.n	8009e1c <_printf_i+0xa4>
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	da03      	bge.n	8009dd6 <_printf_i+0x5e>
 8009dce:	222d      	movs	r2, #45	; 0x2d
 8009dd0:	425b      	negs	r3, r3
 8009dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009dd6:	486f      	ldr	r0, [pc, #444]	; (8009f94 <_printf_i+0x21c>)
 8009dd8:	220a      	movs	r2, #10
 8009dda:	e039      	b.n	8009e50 <_printf_i+0xd8>
 8009ddc:	2973      	cmp	r1, #115	; 0x73
 8009dde:	f000 809d 	beq.w	8009f1c <_printf_i+0x1a4>
 8009de2:	d808      	bhi.n	8009df6 <_printf_i+0x7e>
 8009de4:	296f      	cmp	r1, #111	; 0x6f
 8009de6:	d020      	beq.n	8009e2a <_printf_i+0xb2>
 8009de8:	2970      	cmp	r1, #112	; 0x70
 8009dea:	d1dd      	bne.n	8009da8 <_printf_i+0x30>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	f043 0320 	orr.w	r3, r3, #32
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	e003      	b.n	8009dfe <_printf_i+0x86>
 8009df6:	2975      	cmp	r1, #117	; 0x75
 8009df8:	d017      	beq.n	8009e2a <_printf_i+0xb2>
 8009dfa:	2978      	cmp	r1, #120	; 0x78
 8009dfc:	d1d4      	bne.n	8009da8 <_printf_i+0x30>
 8009dfe:	2378      	movs	r3, #120	; 0x78
 8009e00:	4865      	ldr	r0, [pc, #404]	; (8009f98 <_printf_i+0x220>)
 8009e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e06:	e055      	b.n	8009eb4 <_printf_i+0x13c>
 8009e08:	6813      	ldr	r3, [r2, #0]
 8009e0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e0e:	1d19      	adds	r1, r3, #4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6011      	str	r1, [r2, #0]
 8009e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e08c      	b.n	8009f36 <_printf_i+0x1be>
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e22:	6011      	str	r1, [r2, #0]
 8009e24:	bf18      	it	ne
 8009e26:	b21b      	sxthne	r3, r3
 8009e28:	e7cf      	b.n	8009dca <_printf_i+0x52>
 8009e2a:	6813      	ldr	r3, [r2, #0]
 8009e2c:	6825      	ldr	r5, [r4, #0]
 8009e2e:	1d18      	adds	r0, r3, #4
 8009e30:	6010      	str	r0, [r2, #0]
 8009e32:	0628      	lsls	r0, r5, #24
 8009e34:	d501      	bpl.n	8009e3a <_printf_i+0xc2>
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	e002      	b.n	8009e40 <_printf_i+0xc8>
 8009e3a:	0668      	lsls	r0, r5, #25
 8009e3c:	d5fb      	bpl.n	8009e36 <_printf_i+0xbe>
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	296f      	cmp	r1, #111	; 0x6f
 8009e42:	bf14      	ite	ne
 8009e44:	220a      	movne	r2, #10
 8009e46:	2208      	moveq	r2, #8
 8009e48:	4852      	ldr	r0, [pc, #328]	; (8009f94 <_printf_i+0x21c>)
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e50:	6865      	ldr	r5, [r4, #4]
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	60a5      	str	r5, [r4, #8]
 8009e56:	f2c0 8095 	blt.w	8009f84 <_printf_i+0x20c>
 8009e5a:	6821      	ldr	r1, [r4, #0]
 8009e5c:	f021 0104 	bic.w	r1, r1, #4
 8009e60:	6021      	str	r1, [r4, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d13d      	bne.n	8009ee2 <_printf_i+0x16a>
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	f040 808e 	bne.w	8009f88 <_printf_i+0x210>
 8009e6c:	4665      	mov	r5, ip
 8009e6e:	2a08      	cmp	r2, #8
 8009e70:	d10b      	bne.n	8009e8a <_printf_i+0x112>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	07db      	lsls	r3, r3, #31
 8009e76:	d508      	bpl.n	8009e8a <_printf_i+0x112>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	6862      	ldr	r2, [r4, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	bfde      	ittt	le
 8009e80:	2330      	movle	r3, #48	; 0x30
 8009e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e8a:	ebac 0305 	sub.w	r3, ip, r5
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	f8cd 8000 	str.w	r8, [sp]
 8009e94:	463b      	mov	r3, r7
 8009e96:	aa03      	add	r2, sp, #12
 8009e98:	4621      	mov	r1, r4
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7ff fef6 	bl	8009c8c <_printf_common>
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d14d      	bne.n	8009f40 <_printf_i+0x1c8>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	b005      	add	sp, #20
 8009eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eae:	4839      	ldr	r0, [pc, #228]	; (8009f94 <_printf_i+0x21c>)
 8009eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009eb4:	6813      	ldr	r3, [r2, #0]
 8009eb6:	6821      	ldr	r1, [r4, #0]
 8009eb8:	1d1d      	adds	r5, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6015      	str	r5, [r2, #0]
 8009ebe:	060a      	lsls	r2, r1, #24
 8009ec0:	d50b      	bpl.n	8009eda <_printf_i+0x162>
 8009ec2:	07ca      	lsls	r2, r1, #31
 8009ec4:	bf44      	itt	mi
 8009ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8009eca:	6021      	strmi	r1, [r4, #0]
 8009ecc:	b91b      	cbnz	r3, 8009ed6 <_printf_i+0x15e>
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	f022 0220 	bic.w	r2, r2, #32
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	e7b7      	b.n	8009e4a <_printf_i+0xd2>
 8009eda:	064d      	lsls	r5, r1, #25
 8009edc:	bf48      	it	mi
 8009ede:	b29b      	uxthmi	r3, r3
 8009ee0:	e7ef      	b.n	8009ec2 <_printf_i+0x14a>
 8009ee2:	4665      	mov	r5, ip
 8009ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8009eec:	5cc3      	ldrb	r3, [r0, r3]
 8009eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	2900      	cmp	r1, #0
 8009ef6:	d1f5      	bne.n	8009ee4 <_printf_i+0x16c>
 8009ef8:	e7b9      	b.n	8009e6e <_printf_i+0xf6>
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	6825      	ldr	r5, [r4, #0]
 8009efe:	1d18      	adds	r0, r3, #4
 8009f00:	6961      	ldr	r1, [r4, #20]
 8009f02:	6010      	str	r0, [r2, #0]
 8009f04:	0628      	lsls	r0, r5, #24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	d501      	bpl.n	8009f0e <_printf_i+0x196>
 8009f0a:	6019      	str	r1, [r3, #0]
 8009f0c:	e002      	b.n	8009f14 <_printf_i+0x19c>
 8009f0e:	066a      	lsls	r2, r5, #25
 8009f10:	d5fb      	bpl.n	8009f0a <_printf_i+0x192>
 8009f12:	8019      	strh	r1, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	4665      	mov	r5, ip
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	e7b9      	b.n	8009e90 <_printf_i+0x118>
 8009f1c:	6813      	ldr	r3, [r2, #0]
 8009f1e:	1d19      	adds	r1, r3, #4
 8009f20:	6011      	str	r1, [r2, #0]
 8009f22:	681d      	ldr	r5, [r3, #0]
 8009f24:	6862      	ldr	r2, [r4, #4]
 8009f26:	2100      	movs	r1, #0
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f000 f837 	bl	8009f9c <memchr>
 8009f2e:	b108      	cbz	r0, 8009f34 <_printf_i+0x1bc>
 8009f30:	1b40      	subs	r0, r0, r5
 8009f32:	6060      	str	r0, [r4, #4]
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3e:	e7a7      	b.n	8009e90 <_printf_i+0x118>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	462a      	mov	r2, r5
 8009f44:	4639      	mov	r1, r7
 8009f46:	4630      	mov	r0, r6
 8009f48:	47c0      	blx	r8
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d0aa      	beq.n	8009ea4 <_printf_i+0x12c>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	079b      	lsls	r3, r3, #30
 8009f52:	d413      	bmi.n	8009f7c <_printf_i+0x204>
 8009f54:	68e0      	ldr	r0, [r4, #12]
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	4298      	cmp	r0, r3
 8009f5a:	bfb8      	it	lt
 8009f5c:	4618      	movlt	r0, r3
 8009f5e:	e7a3      	b.n	8009ea8 <_printf_i+0x130>
 8009f60:	2301      	movs	r3, #1
 8009f62:	464a      	mov	r2, r9
 8009f64:	4639      	mov	r1, r7
 8009f66:	4630      	mov	r0, r6
 8009f68:	47c0      	blx	r8
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d09a      	beq.n	8009ea4 <_printf_i+0x12c>
 8009f6e:	3501      	adds	r5, #1
 8009f70:	68e3      	ldr	r3, [r4, #12]
 8009f72:	9a03      	ldr	r2, [sp, #12]
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	42ab      	cmp	r3, r5
 8009f78:	dcf2      	bgt.n	8009f60 <_printf_i+0x1e8>
 8009f7a:	e7eb      	b.n	8009f54 <_printf_i+0x1dc>
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	f104 0919 	add.w	r9, r4, #25
 8009f82:	e7f5      	b.n	8009f70 <_printf_i+0x1f8>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1ac      	bne.n	8009ee2 <_printf_i+0x16a>
 8009f88:	7803      	ldrb	r3, [r0, #0]
 8009f8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f92:	e76c      	b.n	8009e6e <_printf_i+0xf6>
 8009f94:	0800ba71 	.word	0x0800ba71
 8009f98:	0800ba82 	.word	0x0800ba82

08009f9c <memchr>:
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	b2c9      	uxtb	r1, r1
 8009fa0:	4402      	add	r2, r0
 8009fa2:	4290      	cmp	r0, r2
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	d101      	bne.n	8009fac <memchr+0x10>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e003      	b.n	8009fb4 <memchr+0x18>
 8009fac:	781c      	ldrb	r4, [r3, #0]
 8009fae:	3001      	adds	r0, #1
 8009fb0:	428c      	cmp	r4, r1
 8009fb2:	d1f6      	bne.n	8009fa2 <memchr+0x6>
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	bd10      	pop	{r4, pc}

08009fb8 <memcpy>:
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	1e43      	subs	r3, r0, #1
 8009fbc:	440a      	add	r2, r1
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	d100      	bne.n	8009fc4 <memcpy+0xc>
 8009fc2:	bd10      	pop	{r4, pc}
 8009fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fcc:	e7f7      	b.n	8009fbe <memcpy+0x6>

08009fce <memmove>:
 8009fce:	4288      	cmp	r0, r1
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	eb01 0302 	add.w	r3, r1, r2
 8009fd6:	d807      	bhi.n	8009fe8 <memmove+0x1a>
 8009fd8:	1e42      	subs	r2, r0, #1
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d00a      	beq.n	8009ff4 <memmove+0x26>
 8009fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009fe6:	e7f8      	b.n	8009fda <memmove+0xc>
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	d9f5      	bls.n	8009fd8 <memmove+0xa>
 8009fec:	1881      	adds	r1, r0, r2
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	42d3      	cmn	r3, r2
 8009ff2:	d100      	bne.n	8009ff6 <memmove+0x28>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ffe:	e7f7      	b.n	8009ff0 <memmove+0x22>

0800a000 <_free_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4605      	mov	r5, r0
 800a004:	2900      	cmp	r1, #0
 800a006:	d043      	beq.n	800a090 <_free_r+0x90>
 800a008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00c:	1f0c      	subs	r4, r1, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bfb8      	it	lt
 800a012:	18e4      	addlt	r4, r4, r3
 800a014:	f000 f8d0 	bl	800a1b8 <__malloc_lock>
 800a018:	4a1e      	ldr	r2, [pc, #120]	; (800a094 <_free_r+0x94>)
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	4610      	mov	r0, r2
 800a01e:	b933      	cbnz	r3, 800a02e <_free_r+0x2e>
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	6014      	str	r4, [r2, #0]
 800a024:	4628      	mov	r0, r5
 800a026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a02a:	f000 b8c6 	b.w	800a1ba <__malloc_unlock>
 800a02e:	42a3      	cmp	r3, r4
 800a030:	d90b      	bls.n	800a04a <_free_r+0x4a>
 800a032:	6821      	ldr	r1, [r4, #0]
 800a034:	1862      	adds	r2, r4, r1
 800a036:	4293      	cmp	r3, r2
 800a038:	bf01      	itttt	eq
 800a03a:	681a      	ldreq	r2, [r3, #0]
 800a03c:	685b      	ldreq	r3, [r3, #4]
 800a03e:	1852      	addeq	r2, r2, r1
 800a040:	6022      	streq	r2, [r4, #0]
 800a042:	6063      	str	r3, [r4, #4]
 800a044:	6004      	str	r4, [r0, #0]
 800a046:	e7ed      	b.n	800a024 <_free_r+0x24>
 800a048:	4613      	mov	r3, r2
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	b10a      	cbz	r2, 800a052 <_free_r+0x52>
 800a04e:	42a2      	cmp	r2, r4
 800a050:	d9fa      	bls.n	800a048 <_free_r+0x48>
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	1858      	adds	r0, r3, r1
 800a056:	42a0      	cmp	r0, r4
 800a058:	d10b      	bne.n	800a072 <_free_r+0x72>
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	4401      	add	r1, r0
 800a05e:	1858      	adds	r0, r3, r1
 800a060:	4282      	cmp	r2, r0
 800a062:	6019      	str	r1, [r3, #0]
 800a064:	d1de      	bne.n	800a024 <_free_r+0x24>
 800a066:	6810      	ldr	r0, [r2, #0]
 800a068:	6852      	ldr	r2, [r2, #4]
 800a06a:	4401      	add	r1, r0
 800a06c:	6019      	str	r1, [r3, #0]
 800a06e:	605a      	str	r2, [r3, #4]
 800a070:	e7d8      	b.n	800a024 <_free_r+0x24>
 800a072:	d902      	bls.n	800a07a <_free_r+0x7a>
 800a074:	230c      	movs	r3, #12
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	e7d4      	b.n	800a024 <_free_r+0x24>
 800a07a:	6820      	ldr	r0, [r4, #0]
 800a07c:	1821      	adds	r1, r4, r0
 800a07e:	428a      	cmp	r2, r1
 800a080:	bf01      	itttt	eq
 800a082:	6811      	ldreq	r1, [r2, #0]
 800a084:	6852      	ldreq	r2, [r2, #4]
 800a086:	1809      	addeq	r1, r1, r0
 800a088:	6021      	streq	r1, [r4, #0]
 800a08a:	6062      	str	r2, [r4, #4]
 800a08c:	605c      	str	r4, [r3, #4]
 800a08e:	e7c9      	b.n	800a024 <_free_r+0x24>
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	200001f0 	.word	0x200001f0

0800a098 <_malloc_r>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	1ccd      	adds	r5, r1, #3
 800a09c:	f025 0503 	bic.w	r5, r5, #3
 800a0a0:	3508      	adds	r5, #8
 800a0a2:	2d0c      	cmp	r5, #12
 800a0a4:	bf38      	it	cc
 800a0a6:	250c      	movcc	r5, #12
 800a0a8:	2d00      	cmp	r5, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	db01      	blt.n	800a0b2 <_malloc_r+0x1a>
 800a0ae:	42a9      	cmp	r1, r5
 800a0b0:	d903      	bls.n	800a0ba <_malloc_r+0x22>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	6033      	str	r3, [r6, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	f000 f87d 	bl	800a1b8 <__malloc_lock>
 800a0be:	4a21      	ldr	r2, [pc, #132]	; (800a144 <_malloc_r+0xac>)
 800a0c0:	6814      	ldr	r4, [r2, #0]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	b991      	cbnz	r1, 800a0ec <_malloc_r+0x54>
 800a0c6:	4c20      	ldr	r4, [pc, #128]	; (800a148 <_malloc_r+0xb0>)
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	b91b      	cbnz	r3, 800a0d4 <_malloc_r+0x3c>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 f863 	bl	800a198 <_sbrk_r>
 800a0d2:	6020      	str	r0, [r4, #0]
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f000 f85e 	bl	800a198 <_sbrk_r>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d124      	bne.n	800a12a <_malloc_r+0x92>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	f000 f868 	bl	800a1ba <__malloc_unlock>
 800a0ea:	e7e4      	b.n	800a0b6 <_malloc_r+0x1e>
 800a0ec:	680b      	ldr	r3, [r1, #0]
 800a0ee:	1b5b      	subs	r3, r3, r5
 800a0f0:	d418      	bmi.n	800a124 <_malloc_r+0x8c>
 800a0f2:	2b0b      	cmp	r3, #11
 800a0f4:	d90f      	bls.n	800a116 <_malloc_r+0x7e>
 800a0f6:	600b      	str	r3, [r1, #0]
 800a0f8:	18cc      	adds	r4, r1, r3
 800a0fa:	50cd      	str	r5, [r1, r3]
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f000 f85c 	bl	800a1ba <__malloc_unlock>
 800a102:	f104 000b 	add.w	r0, r4, #11
 800a106:	1d23      	adds	r3, r4, #4
 800a108:	f020 0007 	bic.w	r0, r0, #7
 800a10c:	1ac3      	subs	r3, r0, r3
 800a10e:	d0d3      	beq.n	800a0b8 <_malloc_r+0x20>
 800a110:	425a      	negs	r2, r3
 800a112:	50e2      	str	r2, [r4, r3]
 800a114:	e7d0      	b.n	800a0b8 <_malloc_r+0x20>
 800a116:	684b      	ldr	r3, [r1, #4]
 800a118:	428c      	cmp	r4, r1
 800a11a:	bf16      	itet	ne
 800a11c:	6063      	strne	r3, [r4, #4]
 800a11e:	6013      	streq	r3, [r2, #0]
 800a120:	460c      	movne	r4, r1
 800a122:	e7eb      	b.n	800a0fc <_malloc_r+0x64>
 800a124:	460c      	mov	r4, r1
 800a126:	6849      	ldr	r1, [r1, #4]
 800a128:	e7cc      	b.n	800a0c4 <_malloc_r+0x2c>
 800a12a:	1cc4      	adds	r4, r0, #3
 800a12c:	f024 0403 	bic.w	r4, r4, #3
 800a130:	42a0      	cmp	r0, r4
 800a132:	d005      	beq.n	800a140 <_malloc_r+0xa8>
 800a134:	1a21      	subs	r1, r4, r0
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f82e 	bl	800a198 <_sbrk_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d0cf      	beq.n	800a0e0 <_malloc_r+0x48>
 800a140:	6025      	str	r5, [r4, #0]
 800a142:	e7db      	b.n	800a0fc <_malloc_r+0x64>
 800a144:	200001f0 	.word	0x200001f0
 800a148:	200001f4 	.word	0x200001f4

0800a14c <_realloc_r>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	4607      	mov	r7, r0
 800a150:	4614      	mov	r4, r2
 800a152:	460e      	mov	r6, r1
 800a154:	b921      	cbnz	r1, 800a160 <_realloc_r+0x14>
 800a156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a15a:	4611      	mov	r1, r2
 800a15c:	f7ff bf9c 	b.w	800a098 <_malloc_r>
 800a160:	b922      	cbnz	r2, 800a16c <_realloc_r+0x20>
 800a162:	f7ff ff4d 	bl	800a000 <_free_r>
 800a166:	4625      	mov	r5, r4
 800a168:	4628      	mov	r0, r5
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	f000 f826 	bl	800a1bc <_malloc_usable_size_r>
 800a170:	42a0      	cmp	r0, r4
 800a172:	d20f      	bcs.n	800a194 <_realloc_r+0x48>
 800a174:	4621      	mov	r1, r4
 800a176:	4638      	mov	r0, r7
 800a178:	f7ff ff8e 	bl	800a098 <_malloc_r>
 800a17c:	4605      	mov	r5, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0f2      	beq.n	800a168 <_realloc_r+0x1c>
 800a182:	4631      	mov	r1, r6
 800a184:	4622      	mov	r2, r4
 800a186:	f7ff ff17 	bl	8009fb8 <memcpy>
 800a18a:	4631      	mov	r1, r6
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff ff37 	bl	800a000 <_free_r>
 800a192:	e7e9      	b.n	800a168 <_realloc_r+0x1c>
 800a194:	4635      	mov	r5, r6
 800a196:	e7e7      	b.n	800a168 <_realloc_r+0x1c>

0800a198 <_sbrk_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	2300      	movs	r3, #0
 800a19c:	4c05      	ldr	r4, [pc, #20]	; (800a1b4 <_sbrk_r+0x1c>)
 800a19e:	4605      	mov	r5, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	f7fd fa84 	bl	80076b0 <_sbrk>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_sbrk_r+0x1a>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_sbrk_r+0x1a>
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	20003984 	.word	0x20003984

0800a1b8 <__malloc_lock>:
 800a1b8:	4770      	bx	lr

0800a1ba <__malloc_unlock>:
 800a1ba:	4770      	bx	lr

0800a1bc <_malloc_usable_size_r>:
 800a1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c0:	1f18      	subs	r0, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfbc      	itt	lt
 800a1c6:	580b      	ldrlt	r3, [r1, r0]
 800a1c8:	18c0      	addlt	r0, r0, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_init>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <_fini>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr
